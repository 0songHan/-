{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/01-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D.html","text":"\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u80cc\u666f\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u5a31\u4e50\u6570\u636e\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u7684\u5f00\u53d1\u80cc\u666f. \u4e86\u89e3\u5173\u7cfb\u62bd\u53d6\u6280\u672f\u5728\u4f01\u4e1a\u4e2d\u5176\u4ed6\u5b9e\u9645\u5e94\u7528\u573a\u666f \u5a31\u4e50\u6570\u636e\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u80cc\u666f \u00b6 \u5173\u7cfb\u62bd\u53d6\u662f\u4e00\u79cd\u6280\u672f\uff0c\u65e8\u5728\u4ece\u6587\u672c\u6570\u636e\u4e2d\u81ea\u52a8\u8bc6\u522b\u548c\u63d0\u53d6\u51fa\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb. \u5728\u5a31\u4e50\u4e1a\u4e2d\uff0c\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u88ab\u7528\u4e8e\u793e\u4ea4\u5a92\u4f53\u5206\u6790. \u5728\u793e\u4ea4\u5a92\u4f53\u5206\u6790\u4e2d\uff0c\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u4e0a\u7684\u7528\u6237\u7ecf\u5e38\u4f1a\u8c08\u8bba\u4e0d\u540c\u7684\u5a31\u4e50\u660e\u661f\u3001\u7535\u5f71\u3001\u97f3\u4e50\u548c\u7535\u89c6\u8282\u76ee\uff0c\u901a\u8fc7\u4f7f\u7528\u5173\u7cfb\u62bd\u53d6\u6280\u672f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4f8b\u5982\u660e\u661f\u4e4b\u95f4\u7684\u5408\u4f5c\u3001\u7535\u5f71\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u7b49\u7b49. \u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u7528\u4e8e\u5e02\u573a\u8c03\u7814\u3001\u7ade\u54c1\u5206\u6790\u3001\u5e7f\u544a\u6295\u653e\u7b49\u591a\u4e2a\u65b9\u9762. \u540c\u65f6\uff0c\u5173\u7cfb\u62bd\u53d6\u6280\u672f\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5730\u4e86\u89e3\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684\u70ed\u70b9\u8bdd\u9898\u548c\u4e8b\u4ef6\uff0c\u5e76\u8fdb\u884c\u66f4\u52a0\u7cbe\u51c6\u7684\u8206\u60c5\u5206\u6790\u548c\u9884\u6d4b. \u5728\u6b63\u5f0f\u4ecb\u7ecd\u5a31\u4e50\u6570\u636e\u5173\u7cfb\u62bd\u53d6\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u77e5\u8bc6\u56fe\u8c31 (Knowledge Graph) \u7684\u6982\u5ff5\uff0c\u56e0\u4e3a\u5173\u7cfb\u62bd\u53d6\u672c\u8d28\u5c5e\u4e8e\u642d\u5efa\u77e5\u8bc6\u56fe\u8c31\u7684\u5173\u952e\u6280\u672f\u4e4b\u4e00\uff0c\u800c\u77e5\u8bc6\u56fe\u8c31\u4e5f\u662f\u5b9e\u4f53\u5173\u7cfb\u7684\u4e00\u79cd\u5c55\u73b0\u5f62\u5f0f. \u56e0\u6b64\uff0c\u9700\u8981\u5bf9\u77e5\u8bc6\u56fe\u8c31\u76f8\u5173\u77e5\u8bc6\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u548c\u8ba4\u77e5. \u5176\u5b9e\uff0c\u77e5\u8bc6\u56fe\u8c31\u8fd9\u4e00\u6982\u5ff5\u6700\u65e9\u7531\u8c37\u6b4c\u63d0\u51fa\uff0c\u521d\u8877\u662f\u4e3a\u4e86\u8ba9\u673a\u5668\u5177\u5907\u63a8\u7406\u7684\u80fd\u529b\uff0c\u8ba9\u5b83\u53bb\u201c\u7406\u89e3\u201d\u8bed\u4e49\u5c42\u9762\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u67e5\u8be2. \u8fd1\u5e74\u6765, \u968f\u7740\u77e5\u8bc6\u56fe\u8c31\u6280\u672f\u7684\u53d1\u5c55\uff0c\u5df2\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u667a\u80fd\u641c\u7d22\u3001\u667a\u80fd\u95ee\u7b54\u3001\u4e2a\u6027\u5316\u63a8\u8350\u3001\u4eba\u529b\u8d44\u6e90\u7ba1\u7406\u7b49\u9886\u57df. \u4ec0\u4e48\u662f\u77e5\u8bc6\u56fe\u8c31\u5462\uff1f \u5728\u8fd9\u91cc\u6211\u4eec\u5206\u5f00\u8ba8\u8bba\u4e00\u4e0b\u4ec0\u4e48\u662f\u77e5\u8bc6\uff0c\u4ec0\u4e48\u662f\u56fe\u8c31. \u4ec0\u4e48\u662f\u77e5\u8bc6\uff1f \u77e5\u8bc6\u662f\u4eba\u7c7b\u5728\u5b9e\u8df5\u4e2d\u8ba4\u8bc6\u5ba2\u89c2\u4e16\u754c\u7684\u6210\u679c\uff0c\u5b83\u5305\u62ec\u4e8b\u5b9e\u3001\u4fe1\u606f\u3001\u63cf\u8ff0\u4ee5\u53ca\u5728\u6559\u80b2\u548c\u5b9e\u8df5\u4e2d\u83b7\u5f97\u7684\u6280\u80fd. \u77e5\u8bc6\u662f\u4eba\u7c7b\u4ece\u5404\u4e2a\u9014\u5f84\u4e2d\u83b7\u5f97\u7684\u7ecf\u8fc7\u63d0\u5347\u3001\u603b\u7ed3\u4e0e\u51dd\u70bc\u7684\u7cfb\u7edf\u7684\u8ba4\u8bc6. \u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: 226.1\u5398\u7c73\uff0c229\u5398\u7c73\uff0c\u90fd\u662f\u5ba2\u89c2\u5b58\u5728\u7684\u5355\u72ec\u6570\u636e. \u6b64\u65f6\uff0c\u6570\u636e\u4e0d\u5177\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u4ec5\u8868\u8fbe\u4e00\u4e2a\u5ba2\u89c2\u8868\u8fbe\u4e8b\u5b9e. \u800c\u5982\u679c\u6211\u4eec\u8bf4\"\u59da\u660e\u7684\u81c2\u5c55\u4e3a226.1\u5398\u7c73\"\u3001\"\u59da\u660e\u7684\u8eab\u9ad8\u662f229\u5398\u7c73\"\u5219\u79f0\u4e3a\u662f\u4e8b\u5b9e\u578b\u7684\u9648\u8ff0\uff0c\u5c5e\u4e8e\u4fe1\u606f\u7684\u8303\u7574. \u90a3\u4e48\u6240\u8c13\u77e5\u8bc6\uff0c\u5c31\u662f\u5bf9\u4fe1\u606f\u5c42\u9762\u7684\u62bd\u8c61\u548c\u5f52\u7eb3\uff0c\u5982\u679c\u6211\u4eec\u628a\u59da\u660e\u7684\u8eab\u9ad8\u3001\u81c2\u5c55\uff0c\u53ca\u5176\u4ed6\u5c5e\u6027\u6574\u5408\u8d77\u6765, \u5c31\u5f97\u5230\u4e86\u5bf9\u4e8e\u59da\u660e\u7684\u4e00\u4e2a\u8ba4\u77e5, \u8fdb\u4e00\u6b65\u53ef\u4ee5\u4e86\u89e3\u5230\u59da\u660e\u7684\u8eab\u9ad8\u6bd4\u666e\u901a\u4eba\u8981\u9ad8. \u4ec0\u4e48\u662f\u56fe\u8c31 \u56fe\u8c31\u7684\u82f1\u6587\u662fGraph\uff0c\u76f4\u8bd1\u8fc7\u6765\u5c31\u662f\u201c\u56fe\u201d\u7684\u610f\u601d. \u5728\u56fe\u8bba\uff08\u6570\u5b66\u7684\u4e00\u4e2a\u7814\u7a76\u5206\u652f\uff09\u4e2d\uff0c\u56fe\u8868\u793a\u4e00\u4e9b\u4e8b\u7269\u4e0e\u53e6\u4e00\u4e9b\u4e8b\u7269\u4e4b\u95f4\u76f8\u4e92\u8fde\u63a5\u7684\u7ed3\u6784. \u56fe\u901a\u5e38\u7531\u8282\u70b9\uff08Vertex\uff09\u548c\u8fb9\uff08Edge\uff09\u6765\u6784\u6210\uff0c\u591a\u5173\u7cfb\u56fe\u4e00\u822c\u5305\u542b\u591a\u79cd\u7c7b\u578b\u7684\u8282\u70b9\u548c\u591a\u79cd\u7c7b\u578b\u7684\u8fb9. \u5b9e\u4f53\uff08\u8282\u70b9\uff09\u6307\u7684\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e8b\u7269\u6bd4\u5982\u4eba\u3001\u5730\u540d\u3001\u516c\u53f8\u7b49\uff0c\u5173\u7cfb\uff08\u8fb9\uff09\u5219\u7528\u6765\u8868\u8fbe\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u67d0\u79cd\u8054\u7cfb\uff0c\u6bd4\u5982\u5f20\u4e09-\u201c\u51fa\u751f\u4e8e\u201d-\u4e0a\u6d77\u3001\u5c0f\u660e\u548c\u5c0f\u7ea2\u662f\u201c\u670b\u53cb\u201d\u7b49\u7b49. \u4e0b\u9762\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u56fe\uff0c\u5b83\u75314\u4e2a\u8282\u70b9\u548c5\u6761\u8fb9\u7ec4\u6210. \u4ece\u5b57\u9762\u4e0a\u770b\uff0c\u77e5\u8bc6\u56fe\u8c31\u5c31\u662f\u7528\u56fe\u7684\u5f62\u5f0f\u5c06\u77e5\u8bc6\u8868\u793a\u51fa\u6765. \u56fe\u4e2d\u7684\u7ed3\u70b9\u4ee3\u8868\u8bed\u4e49\u5b9e\u4f53\u6216\u6982\u5ff5\uff0c\u8fb9\u4ee3\u8868\u7ed3\u70b9\u95f4\u7684\u5404\u79cd\u8bed\u4e49\u5173\u7cfb. \u5982\u679c\u6211\u4eec\u5c06\u4e0a\u8ff0\u59da\u660e\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u7528\u8ba1\u7b97\u673a\u6240\u80fd\u7406\u89e3\u7684\u8bed\u8a00\u8868\u793a\u51fa\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u77e5\u8bc6\u56fe\u8c31\u6765\u5b9e\u73b0. \u6bd4\u5982\uff0c<\u59da\u660e\uff0c\u804c\u4e1a\uff0c\u7bee\u7403\u8fd0\u52a8\u5458>\u8868\u793a\u59da\u660e\u7684\u804c\u4e1a\u662f\u7bee\u7403\u8fd0\u52a8\u5458\uff0c\u5176\u4e2d\u201c\u59da\u660e\u201d\u548c\u201c\u7bee\u7403\u8fd0\u52a8\u5458\u201d\u662f\u4e24\u4e2a\u8282\u70b9 (\u5373\u5b9e\u4f53)\uff0c\u800c\u8282\u70b9\u95f4\u8fb9(\u5373\u5173\u7cfb)\u662f\u201c\u804c\u4e1a\u201d. \u8fd9\u662f\u4e00\u79cd\u5e38\u7528\u7684\u57fa\u4e8e\u7b26\u53f7\u7684\u77e5\u8bc6\u8868\u793a\u65b9\u5f0f\u2014\u2014\u8d44\u6e90\u63cf\u8ff0\u6846\u67b6\uff08Resource Description Framework\uff0cRDF\uff09\uff0c\u5b83\u628a\u77e5\u8bc6\u8868\u793a\u4e3a\u4e00\u4e2a\u5305\u542b\u4e3b\u8bed\uff08Subject\uff09\u3001\u8c13\u8bed\uff08Predicate\uff09\u548c\u5bbe\u8bed\uff08Object\uff09\u7684\u4e09\u5143\u7ec4 . \u4ece\u4e0a\u8ff0\u5185\u5bb9\u63cf\u8ff0\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0c\u6784\u5efa\u77e5\u8bc6\u56fe\u8c31\u7684\u5173\u952e\u6280\u672f\u73af\u8282\u4e4b\u4e00\uff08\u6216\u8005\u8bf4\u4e0d\u53ef\u6216\u7f3a\u7684\u73af\u8282\u4e4b\u4e00\uff09\u5c31\u662f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6. \u56e0\u6b64\uff0c\u5982\u4f55\u4ece\u6587\u672c\u4e2d\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u4e5f\u6210\u4e3a\u4f17\u591a\u5b66\u8005\u6216\u4f01\u4e1a\u7814\u7a76\u7684\u70ed\u70b9\u95ee\u9898. \u5173\u7cfb\u62bd\u53d6\u4e1a\u52a1\u5176\u4ed6\u5e94\u7528\u573a\u666f \u00b6 \u5173\u7cfb\u62bd\u53d6\u6280\u672f\u5df2\u53d1\u5c55\u591a\u5e74\uff0c\u76f8\u5173\u4ea7\u4e1a\u4e5f\u65e5\u8d8b\u6210\u719f\uff0c\u4e0b\u9762\u662f\u51e0\u79cd\u4e3b\u8981\u7684\u4fe1\u606f\u62bd\u53d6\u4ea7\u4e1a\u5e94\u7528\uff1a \u5546\u4e1a\u4fe1\u606f\u62bd\u53d6\uff1a\u901a\u8fc7\u5f00\u53d1\u4e13\u95e8\u7684\u5173\u7cfb\u62bd\u53d6\u7cfb\u7edf\uff0c\u5206\u6790\u5404\u6e20\u9053\u6536\u96c6\u7684\u5546\u4e1a\u4fe1\u606f\u5927\u6570\u636e\uff0c\u62bd\u53d6\u8bf8\u5982\u6709\u5173\u516c\u53f8\u5de5\u5546\u4fe1\u606f\u3001\u8206\u60c5\u73b0\u72b6\u3001\u98ce\u9669\u76d1\u63a7\u7b49\u4fe1\u606f\uff0c\u63d0\u4f9b\u51b3\u7b56\u652f\u6301\u4fe1\u606f. \u4e0b\u56fe\u4e3a\uff1a**\u516c\u53f8\u5229\u7528\u5168\u91cf\u5de5\u5546\u80a1\u6743\u6570\u636e\uff0c\u7ed3\u5408\u300a\u5927\u989d\u98ce\u9669\u66b4\u9732\u7ba1\u7406\u529e\u6cd5\u300b\u5173\u8054\u5ba2\u6237\u8bc6\u522b\u65b9\u6cd5\u8fdb\u884c\u5efa\u6a21\uff0c\u62bd\u53d6\u4f01\u4e1a\u95f4\u7684\u80a1\u6743\u6295\u8d44\u5173\u7cfb\uff0c\u5206\u6790\u4f01\u4e1a\u96c6\u56e2\u6d3e\u7cfb. \u533b\u7597\u4fe1\u606f\u62bd\u53d6\uff1a\u533b\u7597\u4fdd\u5065\u673a\u6784\u4ee5\u53ca\u5065\u5eb7\u4fdd\u9669\u90e8\u95e8\u53ef\u4ee5\u5229\u7528\u5173\u7cfb\u62bd\u53d6\u6280\u672f\uff0c\u83b7\u53d6\u75c5\u4eba\u7684\u75c7\u72b6\u3001\u8bca\u65ad\u60c5\u51b5\u3001\u5316\u9a8c\u7ed3\u679c\u4ee5\u53ca\u6cbb\u7597\u60c5\u51b5\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u63d0\u4f9b\u533b\u7597\u670d\u52a1\u548c\u4fdd\u9669\u670d\u52a1. \u4e0b\u56fe\u662f**\u516c\u53f8\u6839\u636e\u4e92\u8054\u7f51\u516c\u5f00\u7684\u65b0\u51a0\u611f\u67d3\u4eba\u5458\u51fa\u73b0\u7684\u65f6\u95f4\u3001\u573a\u6240\u3001\u4e58\u5750\u4ea4\u901a\u5de5\u5177\u7b49\u4fe1\u606f\uff0c\u5f62\u6210\u7684\u65b0\u51a0\u6d41\u884c\u75c5\u5b66\u56fe\u8c31. \u57fa\u672c\u5e94\u7528\uff1a\u53ef\u4ee5\u52a9\u529b\u5bf9\u6d41\u884c\u75c5\u8c03\u67e5\u3001\u6eaf\u6e90\u3001\u5bc6\u5207\u63a5\u89e6\u8005\u8ffd\u8e2a\uff0c\u4e3a\u533b\u62a4\u4eba\u5458\u548c\u75be\u75c5\u9632\u63a7\u4eba\u5458\u63d0\u4f9b\u6280\u672f\u652f\u6301\uff0c\u52a0\u901f\u6d41\u884c\u75c5\u8c03\u67e5\u7814\u7a76. \u653f\u52a1\u4fe1\u606f\u62bd\u53d6\uff1a\u653f\u52a1\u90e8\u95e8\u5229\u7528\u4fe1\u606f\u62bd\u53d6\u7cfb\u7edf\uff0c\u83b7\u53d6\u4f17\u591a\u7684\u653f\u52a1\u6587\u4ef6\u4e2d\u7684\u6709\u6548\u4fe1\u606f\uff0c\u4f7f\u653f\u52a1\u670d\u52a1\u66f4\u52a0\u7684\u51c6\u786e\u3001\u9ad8\u6548. \u4e0b\u56fe\u662f***\u516c\u53f8\u548c\u653f\u5e9c\u5408\u4f5c\uff0c\u7ed3\u5408\u653f\u5e9c\u673a\u5173\u63d0\u4f9b\u7684\u65e5\u5e38\u5de5\u4f5c\u548c\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5404\u79cd\u6570\u636e\uff08\u53bb\u654f\uff09\uff0c\u6784\u5efa\u4e86\u653f\u52a1\u77e5\u8bc6\u56fe\u8c31\uff0c\u4e00\u65b9\u9762\u5b9e\u73b0\u6d77\u91cf\u653f\u52a1\u6570\u636e\u81ea\u52a8\u5316\u5206\u6790\u76d1\u6d4b\u7684\u624b\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u63d0\u9ad8\u653f\u52a1\u4eba\u5458\u5de5\u4f5c\u7684\u6548\u7387. \u5c0f\u7ed3\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5173\u7cfb\u62bd\u53d6\u7684\u9879\u76ee\u80cc\u666f\uff0c\u662f\u5c5e\u4e8e\u77e5\u8bc6\u56fe\u8c31\u6784\u5efa\u7684\u5173\u952e\u6280\u672f\u4e4b\u4e00\uff0c\u4e5f\u662f\u76ee\u524d\u5f88\u591a\u4f01\u4e1a\u5e94\u7528\u7684\u4fe1\u606f\u62bd\u53d6\u624b\u6bb5\u4e4b\u4e00. \u5bf9\u5173\u7cfb\u62bd\u53d6\u5b9e\u9645\u4e1a\u52a1\u5e94\u7528\u573a\u666f\u8fdb\u884c\u4e86\u7b80\u5355\u4ecb\u7ecd\uff0c\u6d89\u53ca\u884c\u4e1a\u5404\u65b9\u9762\uff0c\u56e0\u6b64\u4e5f\u662f\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684NLP\u57fa\u672c\u6280\u672f\u4e4b\u4e00.","title":"1.1 \u9879\u76ee\u80cc\u666f\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/01-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D.html#_1","text":"","title":"\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u80cc\u666f\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/01-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D.html#_2","text":"\u7406\u89e3\u5a31\u4e50\u6570\u636e\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u7684\u5f00\u53d1\u80cc\u666f. \u4e86\u89e3\u5173\u7cfb\u62bd\u53d6\u6280\u672f\u5728\u4f01\u4e1a\u4e2d\u5176\u4ed6\u5b9e\u9645\u5e94\u7528\u573a\u666f","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/01-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D.html#_3","text":"\u5173\u7cfb\u62bd\u53d6\u662f\u4e00\u79cd\u6280\u672f\uff0c\u65e8\u5728\u4ece\u6587\u672c\u6570\u636e\u4e2d\u81ea\u52a8\u8bc6\u522b\u548c\u63d0\u53d6\u51fa\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb. \u5728\u5a31\u4e50\u4e1a\u4e2d\uff0c\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u88ab\u7528\u4e8e\u793e\u4ea4\u5a92\u4f53\u5206\u6790. \u5728\u793e\u4ea4\u5a92\u4f53\u5206\u6790\u4e2d\uff0c\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u4e0a\u7684\u7528\u6237\u7ecf\u5e38\u4f1a\u8c08\u8bba\u4e0d\u540c\u7684\u5a31\u4e50\u660e\u661f\u3001\u7535\u5f71\u3001\u97f3\u4e50\u548c\u7535\u89c6\u8282\u76ee\uff0c\u901a\u8fc7\u4f7f\u7528\u5173\u7cfb\u62bd\u53d6\u6280\u672f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4f8b\u5982\u660e\u661f\u4e4b\u95f4\u7684\u5408\u4f5c\u3001\u7535\u5f71\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u7b49\u7b49. \u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u7528\u4e8e\u5e02\u573a\u8c03\u7814\u3001\u7ade\u54c1\u5206\u6790\u3001\u5e7f\u544a\u6295\u653e\u7b49\u591a\u4e2a\u65b9\u9762. \u540c\u65f6\uff0c\u5173\u7cfb\u62bd\u53d6\u6280\u672f\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5730\u4e86\u89e3\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684\u70ed\u70b9\u8bdd\u9898\u548c\u4e8b\u4ef6\uff0c\u5e76\u8fdb\u884c\u66f4\u52a0\u7cbe\u51c6\u7684\u8206\u60c5\u5206\u6790\u548c\u9884\u6d4b. \u5728\u6b63\u5f0f\u4ecb\u7ecd\u5a31\u4e50\u6570\u636e\u5173\u7cfb\u62bd\u53d6\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u77e5\u8bc6\u56fe\u8c31 (Knowledge Graph) \u7684\u6982\u5ff5\uff0c\u56e0\u4e3a\u5173\u7cfb\u62bd\u53d6\u672c\u8d28\u5c5e\u4e8e\u642d\u5efa\u77e5\u8bc6\u56fe\u8c31\u7684\u5173\u952e\u6280\u672f\u4e4b\u4e00\uff0c\u800c\u77e5\u8bc6\u56fe\u8c31\u4e5f\u662f\u5b9e\u4f53\u5173\u7cfb\u7684\u4e00\u79cd\u5c55\u73b0\u5f62\u5f0f. \u56e0\u6b64\uff0c\u9700\u8981\u5bf9\u77e5\u8bc6\u56fe\u8c31\u76f8\u5173\u77e5\u8bc6\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u548c\u8ba4\u77e5. \u5176\u5b9e\uff0c\u77e5\u8bc6\u56fe\u8c31\u8fd9\u4e00\u6982\u5ff5\u6700\u65e9\u7531\u8c37\u6b4c\u63d0\u51fa\uff0c\u521d\u8877\u662f\u4e3a\u4e86\u8ba9\u673a\u5668\u5177\u5907\u63a8\u7406\u7684\u80fd\u529b\uff0c\u8ba9\u5b83\u53bb\u201c\u7406\u89e3\u201d\u8bed\u4e49\u5c42\u9762\uff0c\u63d0\u4f9b\u66f4\u597d\u7684\u67e5\u8be2. \u8fd1\u5e74\u6765, \u968f\u7740\u77e5\u8bc6\u56fe\u8c31\u6280\u672f\u7684\u53d1\u5c55\uff0c\u5df2\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u667a\u80fd\u641c\u7d22\u3001\u667a\u80fd\u95ee\u7b54\u3001\u4e2a\u6027\u5316\u63a8\u8350\u3001\u4eba\u529b\u8d44\u6e90\u7ba1\u7406\u7b49\u9886\u57df. \u4ec0\u4e48\u662f\u77e5\u8bc6\u56fe\u8c31\u5462\uff1f \u5728\u8fd9\u91cc\u6211\u4eec\u5206\u5f00\u8ba8\u8bba\u4e00\u4e0b\u4ec0\u4e48\u662f\u77e5\u8bc6\uff0c\u4ec0\u4e48\u662f\u56fe\u8c31. \u4ec0\u4e48\u662f\u77e5\u8bc6\uff1f \u77e5\u8bc6\u662f\u4eba\u7c7b\u5728\u5b9e\u8df5\u4e2d\u8ba4\u8bc6\u5ba2\u89c2\u4e16\u754c\u7684\u6210\u679c\uff0c\u5b83\u5305\u62ec\u4e8b\u5b9e\u3001\u4fe1\u606f\u3001\u63cf\u8ff0\u4ee5\u53ca\u5728\u6559\u80b2\u548c\u5b9e\u8df5\u4e2d\u83b7\u5f97\u7684\u6280\u80fd. \u77e5\u8bc6\u662f\u4eba\u7c7b\u4ece\u5404\u4e2a\u9014\u5f84\u4e2d\u83b7\u5f97\u7684\u7ecf\u8fc7\u63d0\u5347\u3001\u603b\u7ed3\u4e0e\u51dd\u70bc\u7684\u7cfb\u7edf\u7684\u8ba4\u8bc6. \u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50: 226.1\u5398\u7c73\uff0c229\u5398\u7c73\uff0c\u90fd\u662f\u5ba2\u89c2\u5b58\u5728\u7684\u5355\u72ec\u6570\u636e. \u6b64\u65f6\uff0c\u6570\u636e\u4e0d\u5177\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u4ec5\u8868\u8fbe\u4e00\u4e2a\u5ba2\u89c2\u8868\u8fbe\u4e8b\u5b9e. \u800c\u5982\u679c\u6211\u4eec\u8bf4\"\u59da\u660e\u7684\u81c2\u5c55\u4e3a226.1\u5398\u7c73\"\u3001\"\u59da\u660e\u7684\u8eab\u9ad8\u662f229\u5398\u7c73\"\u5219\u79f0\u4e3a\u662f\u4e8b\u5b9e\u578b\u7684\u9648\u8ff0\uff0c\u5c5e\u4e8e\u4fe1\u606f\u7684\u8303\u7574. \u90a3\u4e48\u6240\u8c13\u77e5\u8bc6\uff0c\u5c31\u662f\u5bf9\u4fe1\u606f\u5c42\u9762\u7684\u62bd\u8c61\u548c\u5f52\u7eb3\uff0c\u5982\u679c\u6211\u4eec\u628a\u59da\u660e\u7684\u8eab\u9ad8\u3001\u81c2\u5c55\uff0c\u53ca\u5176\u4ed6\u5c5e\u6027\u6574\u5408\u8d77\u6765, \u5c31\u5f97\u5230\u4e86\u5bf9\u4e8e\u59da\u660e\u7684\u4e00\u4e2a\u8ba4\u77e5, \u8fdb\u4e00\u6b65\u53ef\u4ee5\u4e86\u89e3\u5230\u59da\u660e\u7684\u8eab\u9ad8\u6bd4\u666e\u901a\u4eba\u8981\u9ad8. \u4ec0\u4e48\u662f\u56fe\u8c31 \u56fe\u8c31\u7684\u82f1\u6587\u662fGraph\uff0c\u76f4\u8bd1\u8fc7\u6765\u5c31\u662f\u201c\u56fe\u201d\u7684\u610f\u601d. \u5728\u56fe\u8bba\uff08\u6570\u5b66\u7684\u4e00\u4e2a\u7814\u7a76\u5206\u652f\uff09\u4e2d\uff0c\u56fe\u8868\u793a\u4e00\u4e9b\u4e8b\u7269\u4e0e\u53e6\u4e00\u4e9b\u4e8b\u7269\u4e4b\u95f4\u76f8\u4e92\u8fde\u63a5\u7684\u7ed3\u6784. \u56fe\u901a\u5e38\u7531\u8282\u70b9\uff08Vertex\uff09\u548c\u8fb9\uff08Edge\uff09\u6765\u6784\u6210\uff0c\u591a\u5173\u7cfb\u56fe\u4e00\u822c\u5305\u542b\u591a\u79cd\u7c7b\u578b\u7684\u8282\u70b9\u548c\u591a\u79cd\u7c7b\u578b\u7684\u8fb9. \u5b9e\u4f53\uff08\u8282\u70b9\uff09\u6307\u7684\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e8b\u7269\u6bd4\u5982\u4eba\u3001\u5730\u540d\u3001\u516c\u53f8\u7b49\uff0c\u5173\u7cfb\uff08\u8fb9\uff09\u5219\u7528\u6765\u8868\u8fbe\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u67d0\u79cd\u8054\u7cfb\uff0c\u6bd4\u5982\u5f20\u4e09-\u201c\u51fa\u751f\u4e8e\u201d-\u4e0a\u6d77\u3001\u5c0f\u660e\u548c\u5c0f\u7ea2\u662f\u201c\u670b\u53cb\u201d\u7b49\u7b49. \u4e0b\u9762\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u56fe\uff0c\u5b83\u75314\u4e2a\u8282\u70b9\u548c5\u6761\u8fb9\u7ec4\u6210. \u4ece\u5b57\u9762\u4e0a\u770b\uff0c\u77e5\u8bc6\u56fe\u8c31\u5c31\u662f\u7528\u56fe\u7684\u5f62\u5f0f\u5c06\u77e5\u8bc6\u8868\u793a\u51fa\u6765. \u56fe\u4e2d\u7684\u7ed3\u70b9\u4ee3\u8868\u8bed\u4e49\u5b9e\u4f53\u6216\u6982\u5ff5\uff0c\u8fb9\u4ee3\u8868\u7ed3\u70b9\u95f4\u7684\u5404\u79cd\u8bed\u4e49\u5173\u7cfb. \u5982\u679c\u6211\u4eec\u5c06\u4e0a\u8ff0\u59da\u660e\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u7528\u8ba1\u7b97\u673a\u6240\u80fd\u7406\u89e3\u7684\u8bed\u8a00\u8868\u793a\u51fa\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u77e5\u8bc6\u56fe\u8c31\u6765\u5b9e\u73b0. \u6bd4\u5982\uff0c<\u59da\u660e\uff0c\u804c\u4e1a\uff0c\u7bee\u7403\u8fd0\u52a8\u5458>\u8868\u793a\u59da\u660e\u7684\u804c\u4e1a\u662f\u7bee\u7403\u8fd0\u52a8\u5458\uff0c\u5176\u4e2d\u201c\u59da\u660e\u201d\u548c\u201c\u7bee\u7403\u8fd0\u52a8\u5458\u201d\u662f\u4e24\u4e2a\u8282\u70b9 (\u5373\u5b9e\u4f53)\uff0c\u800c\u8282\u70b9\u95f4\u8fb9(\u5373\u5173\u7cfb)\u662f\u201c\u804c\u4e1a\u201d. \u8fd9\u662f\u4e00\u79cd\u5e38\u7528\u7684\u57fa\u4e8e\u7b26\u53f7\u7684\u77e5\u8bc6\u8868\u793a\u65b9\u5f0f\u2014\u2014\u8d44\u6e90\u63cf\u8ff0\u6846\u67b6\uff08Resource Description Framework\uff0cRDF\uff09\uff0c\u5b83\u628a\u77e5\u8bc6\u8868\u793a\u4e3a\u4e00\u4e2a\u5305\u542b\u4e3b\u8bed\uff08Subject\uff09\u3001\u8c13\u8bed\uff08Predicate\uff09\u548c\u5bbe\u8bed\uff08Object\uff09\u7684\u4e09\u5143\u7ec4 . \u4ece\u4e0a\u8ff0\u5185\u5bb9\u63cf\u8ff0\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0c\u6784\u5efa\u77e5\u8bc6\u56fe\u8c31\u7684\u5173\u952e\u6280\u672f\u73af\u8282\u4e4b\u4e00\uff08\u6216\u8005\u8bf4\u4e0d\u53ef\u6216\u7f3a\u7684\u73af\u8282\u4e4b\u4e00\uff09\u5c31\u662f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6. \u56e0\u6b64\uff0c\u5982\u4f55\u4ece\u6587\u672c\u4e2d\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u4e5f\u6210\u4e3a\u4f17\u591a\u5b66\u8005\u6216\u4f01\u4e1a\u7814\u7a76\u7684\u70ed\u70b9\u95ee\u9898.","title":"\u5a31\u4e50\u6570\u636e\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u80cc\u666f"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/01-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D.html#_4","text":"\u5173\u7cfb\u62bd\u53d6\u6280\u672f\u5df2\u53d1\u5c55\u591a\u5e74\uff0c\u76f8\u5173\u4ea7\u4e1a\u4e5f\u65e5\u8d8b\u6210\u719f\uff0c\u4e0b\u9762\u662f\u51e0\u79cd\u4e3b\u8981\u7684\u4fe1\u606f\u62bd\u53d6\u4ea7\u4e1a\u5e94\u7528\uff1a \u5546\u4e1a\u4fe1\u606f\u62bd\u53d6\uff1a\u901a\u8fc7\u5f00\u53d1\u4e13\u95e8\u7684\u5173\u7cfb\u62bd\u53d6\u7cfb\u7edf\uff0c\u5206\u6790\u5404\u6e20\u9053\u6536\u96c6\u7684\u5546\u4e1a\u4fe1\u606f\u5927\u6570\u636e\uff0c\u62bd\u53d6\u8bf8\u5982\u6709\u5173\u516c\u53f8\u5de5\u5546\u4fe1\u606f\u3001\u8206\u60c5\u73b0\u72b6\u3001\u98ce\u9669\u76d1\u63a7\u7b49\u4fe1\u606f\uff0c\u63d0\u4f9b\u51b3\u7b56\u652f\u6301\u4fe1\u606f. \u4e0b\u56fe\u4e3a\uff1a**\u516c\u53f8\u5229\u7528\u5168\u91cf\u5de5\u5546\u80a1\u6743\u6570\u636e\uff0c\u7ed3\u5408\u300a\u5927\u989d\u98ce\u9669\u66b4\u9732\u7ba1\u7406\u529e\u6cd5\u300b\u5173\u8054\u5ba2\u6237\u8bc6\u522b\u65b9\u6cd5\u8fdb\u884c\u5efa\u6a21\uff0c\u62bd\u53d6\u4f01\u4e1a\u95f4\u7684\u80a1\u6743\u6295\u8d44\u5173\u7cfb\uff0c\u5206\u6790\u4f01\u4e1a\u96c6\u56e2\u6d3e\u7cfb. \u533b\u7597\u4fe1\u606f\u62bd\u53d6\uff1a\u533b\u7597\u4fdd\u5065\u673a\u6784\u4ee5\u53ca\u5065\u5eb7\u4fdd\u9669\u90e8\u95e8\u53ef\u4ee5\u5229\u7528\u5173\u7cfb\u62bd\u53d6\u6280\u672f\uff0c\u83b7\u53d6\u75c5\u4eba\u7684\u75c7\u72b6\u3001\u8bca\u65ad\u60c5\u51b5\u3001\u5316\u9a8c\u7ed3\u679c\u4ee5\u53ca\u6cbb\u7597\u60c5\u51b5\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u63d0\u4f9b\u533b\u7597\u670d\u52a1\u548c\u4fdd\u9669\u670d\u52a1. \u4e0b\u56fe\u662f**\u516c\u53f8\u6839\u636e\u4e92\u8054\u7f51\u516c\u5f00\u7684\u65b0\u51a0\u611f\u67d3\u4eba\u5458\u51fa\u73b0\u7684\u65f6\u95f4\u3001\u573a\u6240\u3001\u4e58\u5750\u4ea4\u901a\u5de5\u5177\u7b49\u4fe1\u606f\uff0c\u5f62\u6210\u7684\u65b0\u51a0\u6d41\u884c\u75c5\u5b66\u56fe\u8c31. \u57fa\u672c\u5e94\u7528\uff1a\u53ef\u4ee5\u52a9\u529b\u5bf9\u6d41\u884c\u75c5\u8c03\u67e5\u3001\u6eaf\u6e90\u3001\u5bc6\u5207\u63a5\u89e6\u8005\u8ffd\u8e2a\uff0c\u4e3a\u533b\u62a4\u4eba\u5458\u548c\u75be\u75c5\u9632\u63a7\u4eba\u5458\u63d0\u4f9b\u6280\u672f\u652f\u6301\uff0c\u52a0\u901f\u6d41\u884c\u75c5\u8c03\u67e5\u7814\u7a76. \u653f\u52a1\u4fe1\u606f\u62bd\u53d6\uff1a\u653f\u52a1\u90e8\u95e8\u5229\u7528\u4fe1\u606f\u62bd\u53d6\u7cfb\u7edf\uff0c\u83b7\u53d6\u4f17\u591a\u7684\u653f\u52a1\u6587\u4ef6\u4e2d\u7684\u6709\u6548\u4fe1\u606f\uff0c\u4f7f\u653f\u52a1\u670d\u52a1\u66f4\u52a0\u7684\u51c6\u786e\u3001\u9ad8\u6548. \u4e0b\u56fe\u662f***\u516c\u53f8\u548c\u653f\u5e9c\u5408\u4f5c\uff0c\u7ed3\u5408\u653f\u5e9c\u673a\u5173\u63d0\u4f9b\u7684\u65e5\u5e38\u5de5\u4f5c\u548c\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5404\u79cd\u6570\u636e\uff08\u53bb\u654f\uff09\uff0c\u6784\u5efa\u4e86\u653f\u52a1\u77e5\u8bc6\u56fe\u8c31\uff0c\u4e00\u65b9\u9762\u5b9e\u73b0\u6d77\u91cf\u653f\u52a1\u6570\u636e\u81ea\u52a8\u5316\u5206\u6790\u76d1\u6d4b\u7684\u624b\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u63d0\u9ad8\u653f\u52a1\u4eba\u5458\u5de5\u4f5c\u7684\u6548\u7387.","title":"\u5173\u7cfb\u62bd\u53d6\u4e1a\u52a1\u5176\u4ed6\u5e94\u7528\u573a\u666f"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/01-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D.html#_5","text":"\u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u5173\u7cfb\u62bd\u53d6\u7684\u9879\u76ee\u80cc\u666f\uff0c\u662f\u5c5e\u4e8e\u77e5\u8bc6\u56fe\u8c31\u6784\u5efa\u7684\u5173\u952e\u6280\u672f\u4e4b\u4e00\uff0c\u4e5f\u662f\u76ee\u524d\u5f88\u591a\u4f01\u4e1a\u5e94\u7528\u7684\u4fe1\u606f\u62bd\u53d6\u624b\u6bb5\u4e4b\u4e00. \u5bf9\u5173\u7cfb\u62bd\u53d6\u5b9e\u9645\u4e1a\u52a1\u5e94\u7528\u573a\u666f\u8fdb\u884c\u4e86\u7b80\u5355\u4ecb\u7ecd\uff0c\u6d89\u53ca\u884c\u4e1a\u5404\u65b9\u9762\uff0c\u56e0\u6b64\u4e5f\u662f\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684NLP\u57fa\u672c\u6280\u672f\u4e4b\u4e00.","title":"\u5c0f\u7ed3\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html","text":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u5173\u7cfb\u62bd\u53d6\u6982\u5ff5 \u4e86\u89e3\u5173\u7cfb\u62bd\u53d6\u7684\u4efb\u52a1\u7279\u70b9. \u638c\u63e1\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807. \u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5 \u5173\u7cfb\u62bd\u53d6\u6982\u5ff5 \u00b6 \u5173\u7cfb\u62bd\u53d6\u5c31\u662f\u4ece\u4e00\u6bb5\u6587\u672c\u4e2d\u62bd\u53d6\u51fa (\u4e3b\u4f53\uff0c\u5173\u7cfb\uff0c\u5ba2\u4f53) \u8fd9\u6837\u7684\u4e09\u5143\u7ec4\uff0c\u7528\u82f1\u6587\u8868\u793a\u5c31\u662f(subject, relation, object)\u8fd9\u6837\u7684\u4e09\u5143\u7ec4. \u5177\u4f53\u5b9a\u4e49: \u7ed9\u5b9a\u4e00\u4e2a\u53e5\u5b50 S\uff0c\u5176\u4e2d\u5305\u542b\u5b9e\u4f53 A \u548c\u5b9e\u4f53 B\uff0c\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u95f4\u7684\u5173\u7cfbr \u2208 R (R\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5173\u7cfb\u7684\u96c6\u5408) . \u6216\u8005\u8bf4\uff0c\u62bd\u53d6\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u5c06\u975e\u7ed3\u6784\u5316\u7684\u6587\u672c\u4fe1\u606f\u8f6c\u5316\u4e3a\u7ed3\u6784\u5316\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u4ee5\u5173\u7cfb\u4e09\u5143\u7ec4\u3008S\uff0cP\uff0cO\u3009\u7684\u5f62\u5f0f\u6765\u63cf\u8ff0. \u5176\u4e2d\uff0cS \u548cO\u4e3a\u4e3b\u3001\u5ba2\u5b9e\u4f53\uff0cP\u4e3a\u9884\u6d4b\u51fa\u7684\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb. \u5173\u7cfb\u62bd\u53d6\u4e24\u5927\u4efb\u52a1: \u8bc6\u522b\u6587\u672c\u4e2d\u7684subject\u548cobject (\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1) \u5224\u65ad\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u5c5e\u4e8e\u54ea\u79cd\u5173\u7cfb (\u5173\u7cfb\u5206\u7c7b) \u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7279\u70b9 \u00b6 \u5173\u7cfb\u62bd\u53d6\u662f\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u95ee\u9898\uff0c\u76f8\u6bd4\u4e8e\u60c5\u611f\u5206\u6790\u3001\u65b0\u95fb\u5206\u7c7b\u7b49\u5176\u4ed6\u4efb\u52a1\uff0c\u5173\u7cfb\u62bd\u53d6\u4e3b\u8981\u67093\u4e2a\u7279\u70b9: \u9886\u57df\u4f17\u591a\uff0c\u5173\u7cfb\u6a21\u578b\u6784\u5efa\u590d\u6742. \u9488\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u9650\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7814\u7a76\u65f6\u95f4\u8f83\u957f\uff0c\u7814\u7a76\u8005\u6295\u5165\u7684\u7cbe\u529b\u76f8\u5bf9\u5f00\u53d1\u9886\u57df\u591a\uff0c\u56e0\u6b64\u65b9\u6cd5\u4f17\u591a\uff0c\u6280\u672f\u6210\u719f. \u6570\u636e\u6765\u6e90\u5e7f\uff0c\u4e3b\u8981\u6709\u7ed3\u6784\u5316\u3001\u534a\u7ed3\u6784\u5316\u3001\u65e0\u7ed3\u67843\u7c7b. \u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u8868\u683c\u6587\u6863\u3001\u6570\u636e\u5e93\u7b49\uff1b\u534a\u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u5982\u7ef4\u57fa\u767e\u79d1\u3001\u767e\u5ea6\u767e\u79d1\u7b49\uff1b\u65e0\u7ed3\u6784\u5c5e\u4e8e\u7eaf\u6587\u672c\u6570\u636e. \u5173\u7cfb\u79cd\u7c7b\u7e41\u591a\u4e14\u590d\u6742\uff0c\u566a\u97f3\u6570\u636e\u65e0\u6cd5\u907f\u514d\uff0c\u5b9e\u4f53\u95f4\u7684\u5173\u7cfb\u591a\u6837\uff0c\u6709\u4e00\u79cd\u6216\u8005\u591a\u79cd\u5173\u7cfb. \u5173\u7cfb\u62bd\u53d6\u8bc4\u4ef7\u6307\u6807 \u00b6 \u9488\u5bf9\u7279\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7ed3\u679c\uff0c\u4e00\u822c\u901a\u8fc7\u8ba1\u7b97\u5bf9\u5e94\u7684\u51c6\u786e\u7387 ( Precision ) \u3001\u53ec\u56de\u7387 ( Recall ) \u548c F1 \u503c\u6765\u8bc4\u4ef7\uff0e\u5176\u4e2d\uff0c\u51c6\u786e\u7387\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u6a21\u578b\u6b63\u786e\u5206\u7c7b\u4e3a\u6b63\u7c7b\u7684\u6837\u672c\u6570\u4e0e\u5168\u90e8\u6b63\u7c7b\u6837\u672c\u6570\u4e4b\u6bd4\uff1b\u53ec\u56de\u7387\u5219\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u9884\u6d4b\u6b63\u786e\u7684\u6b63\u7c7b\u4e0e\u6240\u6709\u6b63\u7c7b\u6570\u636e\u7684\u6bd4\u503c\uff1b\u800c F1 \u503c\u5219\u662f\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\uff0c\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u7684\u6027\u80fd\u8fdb\u884c\u7efc\u5408\u6027\u7684\u8bc4\u4ef7.\u5bf9\u5e94\u7684\u8ba1\u7b97\u4e3a: \u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5 \u00b6 \u57fa\u4e8e\u89c4\u5219\u65b9\u5f0f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 \u57fa\u4e8e\u89c4\u5219\u7684\u77e5\u8bc6\u62bd\u53d6\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) . \u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u867d\u7136\u5b9a\u4e49\u89c4\u5219\u8fd9\u79cd\u62bd\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u6709\u70b9 low\uff0c\u4f46\u5374\u7b80\u5355\u5b9e\u7528\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6548\u679c\u6bd4\u5f88\u591a\u9ad8\u6df1\u7684\u7b97\u6cd5\u8fd8\u8981\u597d\u4e00\u4e9b (\u975e\u7edd\u5bf9\uff0c\u5177\u4f53\u9886\u57df\u5177\u4f53\u5206\u6790) . \u57fa\u4e8e\u89c4\u5219\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd \u57fa\u4e8ePipeline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 Pipeline\u65b9\u6cd5\u662f\u6307\u5728\u5b9e\u4f53\u8bc6\u522b\u5df2\u7ecf\u5b8c\u6210\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u62bd\u53d6. \u57fa\u4e8ePipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd \u57fa\u4e8eJoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u901a\u8fc7\u4fee\u6539\u6807\u6ce8\u65b9\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u76f4\u63a5\u8f93\u51fa\u6587\u672c\u4e2d\u5305\u542b\u7684(ei ,rk, ej)\u4e09\u5143\u7ec4. Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u53c8\u5206\u4e3a: \"\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b\" \u548c \"\u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b\": \u57fa\u4e8ejoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd. \u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u5e38\u89c1\u95ee\u9898 \u00b6 \u6b63\u5e38\u5173\u7cfb (Normal) \u95ee\u9898: \u5373\u4e09\u5143\u7ec4\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0, \u6570\u636e\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u53ca\u5173\u7cfb \u5982: \u201c\u300a\u4eba\u95f4\u300b\u662f\u738b\u83f2\u6f14\u5531\u6b4c\u66f2\u201c\u4e2d\u5b58\u57281\u79cd\u5173\u7cfb: (\u738b\u83f2-\u6b4c\u624b-\u4eba\u95f4) \u5355\u4e00\u5b9e\u4f53\u5173\u7cfb\u91cd\u53e0\u95ee\u9898 (Single Entity Overlap (SEO) ) \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u53c2\u4e0e\u5230\u4e86\u591a\u4e2a\u5173\u7cfb\u4e2d \u5982: \u201c\u53f6\u6625\u53d9\u51fa\u751f\u4e8e\u6d59\u6c5f\uff0c\u6bd5\u4e1a\u4e8e\u9ec4\u57d4\u519b\u6821\u201d\u4e2d\u5b58\u5728\u4e24\u79cd\u5173\u7cfb: (\u53f6\u6625\u53d9-\u6bd5\u4e1a\u9662\u6821-\u9ec4\u57d4\u519b\u6821) \u3001 (\u53f6\u6625\u53d9-\u51fa\u751f\u5730-\u6d59\u6c5f) \u5b9e\u4f53\u5bf9\u91cd\u53e0(Entity Pair Overlap (EPO)): \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5173\u7cfb\u7c7b\u578b \u5982: \u201c\u5468\u661f\u9a70\u5bfc\u6f14\u4e86\u300a\u529f\u592b\u300b\uff0c\u5e76\u62c5\u4efb\u7537\u4e3b\u89d2\u201d\u4e2d\u5b58\u57282\u79cd\u5173\u7cfb: (\u5468\u661f\u9a70-\u6f14\u5458-\u300a\u529f\u592b\u300b) \u3001 (\u5468\u661f\u9a70-\u5bfc\u6f14-\u300a\u529f\u592b\u300b) < /div ### \u5c0f\u8282\u603b\u7ed3 - \u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5173\u7cfb\u62bd\u53d6\u7684\u6982\u5ff5\u3001\u4efb\u52a1\u7279\u70b9\u3001\u8bc4\u4ef7\u6307\u6807\u3001\u5e38\u7528\u65b9\u6cd5\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u7b49\u77e5\u8bc6","title":"1.2 \u5173\u7cfb\u62bd\u53d6\u7684\u57fa\u672c\u77e5\u8bc6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_1","text":"","title":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_2","text":"\u7406\u89e3\u5173\u7cfb\u62bd\u53d6\u6982\u5ff5 \u4e86\u89e3\u5173\u7cfb\u62bd\u53d6\u7684\u4efb\u52a1\u7279\u70b9. \u638c\u63e1\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807. \u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_3","text":"\u5173\u7cfb\u62bd\u53d6\u5c31\u662f\u4ece\u4e00\u6bb5\u6587\u672c\u4e2d\u62bd\u53d6\u51fa (\u4e3b\u4f53\uff0c\u5173\u7cfb\uff0c\u5ba2\u4f53) \u8fd9\u6837\u7684\u4e09\u5143\u7ec4\uff0c\u7528\u82f1\u6587\u8868\u793a\u5c31\u662f(subject, relation, object)\u8fd9\u6837\u7684\u4e09\u5143\u7ec4. \u5177\u4f53\u5b9a\u4e49: \u7ed9\u5b9a\u4e00\u4e2a\u53e5\u5b50 S\uff0c\u5176\u4e2d\u5305\u542b\u5b9e\u4f53 A \u548c\u5b9e\u4f53 B\uff0c\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u95f4\u7684\u5173\u7cfbr \u2208 R (R\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5173\u7cfb\u7684\u96c6\u5408) . \u6216\u8005\u8bf4\uff0c\u62bd\u53d6\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u5c06\u975e\u7ed3\u6784\u5316\u7684\u6587\u672c\u4fe1\u606f\u8f6c\u5316\u4e3a\u7ed3\u6784\u5316\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u4ee5\u5173\u7cfb\u4e09\u5143\u7ec4\u3008S\uff0cP\uff0cO\u3009\u7684\u5f62\u5f0f\u6765\u63cf\u8ff0. \u5176\u4e2d\uff0cS \u548cO\u4e3a\u4e3b\u3001\u5ba2\u5b9e\u4f53\uff0cP\u4e3a\u9884\u6d4b\u51fa\u7684\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb. \u5173\u7cfb\u62bd\u53d6\u4e24\u5927\u4efb\u52a1: \u8bc6\u522b\u6587\u672c\u4e2d\u7684subject\u548cobject (\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1) \u5224\u65ad\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u5c5e\u4e8e\u54ea\u79cd\u5173\u7cfb (\u5173\u7cfb\u5206\u7c7b)","title":"\u5173\u7cfb\u62bd\u53d6\u6982\u5ff5"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_4","text":"\u5173\u7cfb\u62bd\u53d6\u662f\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u95ee\u9898\uff0c\u76f8\u6bd4\u4e8e\u60c5\u611f\u5206\u6790\u3001\u65b0\u95fb\u5206\u7c7b\u7b49\u5176\u4ed6\u4efb\u52a1\uff0c\u5173\u7cfb\u62bd\u53d6\u4e3b\u8981\u67093\u4e2a\u7279\u70b9: \u9886\u57df\u4f17\u591a\uff0c\u5173\u7cfb\u6a21\u578b\u6784\u5efa\u590d\u6742. \u9488\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u9650\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7814\u7a76\u65f6\u95f4\u8f83\u957f\uff0c\u7814\u7a76\u8005\u6295\u5165\u7684\u7cbe\u529b\u76f8\u5bf9\u5f00\u53d1\u9886\u57df\u591a\uff0c\u56e0\u6b64\u65b9\u6cd5\u4f17\u591a\uff0c\u6280\u672f\u6210\u719f. \u6570\u636e\u6765\u6e90\u5e7f\uff0c\u4e3b\u8981\u6709\u7ed3\u6784\u5316\u3001\u534a\u7ed3\u6784\u5316\u3001\u65e0\u7ed3\u67843\u7c7b. \u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u8868\u683c\u6587\u6863\u3001\u6570\u636e\u5e93\u7b49\uff1b\u534a\u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u5982\u7ef4\u57fa\u767e\u79d1\u3001\u767e\u5ea6\u767e\u79d1\u7b49\uff1b\u65e0\u7ed3\u6784\u5c5e\u4e8e\u7eaf\u6587\u672c\u6570\u636e. \u5173\u7cfb\u79cd\u7c7b\u7e41\u591a\u4e14\u590d\u6742\uff0c\u566a\u97f3\u6570\u636e\u65e0\u6cd5\u907f\u514d\uff0c\u5b9e\u4f53\u95f4\u7684\u5173\u7cfb\u591a\u6837\uff0c\u6709\u4e00\u79cd\u6216\u8005\u591a\u79cd\u5173\u7cfb.","title":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7279\u70b9"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_5","text":"\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7ed3\u679c\uff0c\u4e00\u822c\u901a\u8fc7\u8ba1\u7b97\u5bf9\u5e94\u7684\u51c6\u786e\u7387 ( Precision ) \u3001\u53ec\u56de\u7387 ( Recall ) \u548c F1 \u503c\u6765\u8bc4\u4ef7\uff0e\u5176\u4e2d\uff0c\u51c6\u786e\u7387\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u6a21\u578b\u6b63\u786e\u5206\u7c7b\u4e3a\u6b63\u7c7b\u7684\u6837\u672c\u6570\u4e0e\u5168\u90e8\u6b63\u7c7b\u6837\u672c\u6570\u4e4b\u6bd4\uff1b\u53ec\u56de\u7387\u5219\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u9884\u6d4b\u6b63\u786e\u7684\u6b63\u7c7b\u4e0e\u6240\u6709\u6b63\u7c7b\u6570\u636e\u7684\u6bd4\u503c\uff1b\u800c F1 \u503c\u5219\u662f\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\uff0c\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u7684\u6027\u80fd\u8fdb\u884c\u7efc\u5408\u6027\u7684\u8bc4\u4ef7.\u5bf9\u5e94\u7684\u8ba1\u7b97\u4e3a:","title":"\u5173\u7cfb\u62bd\u53d6\u8bc4\u4ef7\u6307\u6807"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_6","text":"","title":"\u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_7","text":"\u57fa\u4e8e\u89c4\u5219\u7684\u77e5\u8bc6\u62bd\u53d6\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) . \u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u867d\u7136\u5b9a\u4e49\u89c4\u5219\u8fd9\u79cd\u62bd\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u6709\u70b9 low\uff0c\u4f46\u5374\u7b80\u5355\u5b9e\u7528\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6548\u679c\u6bd4\u5f88\u591a\u9ad8\u6df1\u7684\u7b97\u6cd5\u8fd8\u8981\u597d\u4e00\u4e9b (\u975e\u7edd\u5bf9\uff0c\u5177\u4f53\u9886\u57df\u5177\u4f53\u5206\u6790) . \u57fa\u4e8e\u89c4\u5219\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd","title":"\u57fa\u4e8e\u89c4\u5219\u65b9\u5f0f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#pipeline","text":"Pipeline\u65b9\u6cd5\u662f\u6307\u5728\u5b9e\u4f53\u8bc6\u522b\u5df2\u7ecf\u5b8c\u6210\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u62bd\u53d6. \u57fa\u4e8ePipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd","title":"\u57fa\u4e8ePipeline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#joint","text":"Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u901a\u8fc7\u4fee\u6539\u6807\u6ce8\u65b9\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u76f4\u63a5\u8f93\u51fa\u6587\u672c\u4e2d\u5305\u542b\u7684(ei ,rk, ej)\u4e09\u5143\u7ec4. Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u53c8\u5206\u4e3a: \"\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b\" \u548c \"\u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b\": \u57fa\u4e8ejoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd.","title":"\u57fa\u4e8eJoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/02-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_8","text":"\u6b63\u5e38\u5173\u7cfb (Normal) \u95ee\u9898: \u5373\u4e09\u5143\u7ec4\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0, \u6570\u636e\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u53ca\u5173\u7cfb \u5982: \u201c\u300a\u4eba\u95f4\u300b\u662f\u738b\u83f2\u6f14\u5531\u6b4c\u66f2\u201c\u4e2d\u5b58\u57281\u79cd\u5173\u7cfb: (\u738b\u83f2-\u6b4c\u624b-\u4eba\u95f4) \u5355\u4e00\u5b9e\u4f53\u5173\u7cfb\u91cd\u53e0\u95ee\u9898 (Single Entity Overlap (SEO) ) \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u53c2\u4e0e\u5230\u4e86\u591a\u4e2a\u5173\u7cfb\u4e2d \u5982: \u201c\u53f6\u6625\u53d9\u51fa\u751f\u4e8e\u6d59\u6c5f\uff0c\u6bd5\u4e1a\u4e8e\u9ec4\u57d4\u519b\u6821\u201d\u4e2d\u5b58\u5728\u4e24\u79cd\u5173\u7cfb: (\u53f6\u6625\u53d9-\u6bd5\u4e1a\u9662\u6821-\u9ec4\u57d4\u519b\u6821) \u3001 (\u53f6\u6625\u53d9-\u51fa\u751f\u5730-\u6d59\u6c5f) \u5b9e\u4f53\u5bf9\u91cd\u53e0(Entity Pair Overlap (EPO)): \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5173\u7cfb\u7c7b\u578b \u5982: \u201c\u5468\u661f\u9a70\u5bfc\u6f14\u4e86\u300a\u529f\u592b\u300b\uff0c\u5e76\u62c5\u4efb\u7537\u4e3b\u89d2\u201d\u4e2d\u5b58\u57282\u79cd\u5173\u7cfb: (\u5468\u661f\u9a70-\u6f14\u5458-\u300a\u529f\u592b\u300b) \u3001 (\u5468\u661f\u9a70-\u5bfc\u6f14-\u300a\u529f\u592b\u300b) < /div ### \u5c0f\u8282\u603b\u7ed3 - \u672c\u5c0f\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5173\u7cfb\u62bd\u53d6\u7684\u6982\u5ff5\u3001\u4efb\u52a1\u7279\u70b9\u3001\u8bc4\u4ef7\u6307\u6807\u3001\u5e38\u7528\u65b9\u6cd5\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u7b49\u77e5\u8bc6","title":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u5e38\u89c1\u95ee\u9898"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html","text":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u5173\u7cfb\u62bd\u53d6\u6982\u5ff5 \u4e86\u89e3\u5173\u7cfb\u62bd\u53d6\u7684\u4efb\u52a1\u7279\u70b9. \u638c\u63e1\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807. \u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5 \u5173\u7cfb\u62bd\u53d6\u6982\u5ff5 \u00b6 \u5173\u7cfb\u62bd\u53d6\u5c31\u662f\u4ece\u4e00\u6bb5\u6587\u672c\u4e2d\u62bd\u53d6\u51fa (\u4e3b\u4f53\uff0c\u5173\u7cfb\uff0c\u5ba2\u4f53) \u8fd9\u6837\u7684\u4e09\u5143\u7ec4\uff0c\u7528\u82f1\u6587\u8868\u793a\u5c31\u662f(subject, relation, object)\u8fd9\u6837\u7684\u4e09\u5143\u7ec4. \u5177\u4f53\u5b9a\u4e49: \u7ed9\u5b9a\u4e00\u4e2a\u53e5\u5b50 S\uff0c\u5176\u4e2d\u5305\u542b\u5b9e\u4f53 A \u548c\u5b9e\u4f53 B\uff0c\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u95f4\u7684\u5173\u7cfbr \u2208 R (R\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5173\u7cfb\u7684\u96c6\u5408) . \u6216\u8005\u8bf4\uff0c\u62bd\u53d6\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u5c06\u975e\u7ed3\u6784\u5316\u7684\u6587\u672c\u4fe1\u606f\u8f6c\u5316\u4e3a\u7ed3\u6784\u5316\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u4ee5\u5173\u7cfb\u4e09\u5143\u7ec4\u3008S\uff0cP\uff0cO\u3009\u7684\u5f62\u5f0f\u6765\u63cf\u8ff0. \u5176\u4e2d\uff0cS \u548cO\u4e3a\u4e3b\u3001\u5ba2\u5b9e\u4f53\uff0cP\u4e3a\u9884\u6d4b\u51fa\u7684\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb. \u5173\u7cfb\u62bd\u53d6\u4e24\u5927\u4efb\u52a1: \u8bc6\u522b\u6587\u672c\u4e2d\u7684subject\u548cobject (\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1) \u5224\u65ad\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u5c5e\u4e8e\u54ea\u79cd\u5173\u7cfb (\u5173\u7cfb\u5206\u7c7b) \u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7279\u70b9 \u00b6 \u5173\u7cfb\u62bd\u53d6\u662f\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u95ee\u9898\uff0c\u76f8\u6bd4\u4e8e\u60c5\u611f\u5206\u6790\u3001\u65b0\u95fb\u5206\u7c7b\u7b49\u5176\u4ed6\u4efb\u52a1\uff0c\u5173\u7cfb\u62bd\u53d6\u4e3b\u8981\u67093\u4e2a\u7279\u70b9: \u9886\u57df\u4f17\u591a\uff0c\u5173\u7cfb\u6a21\u578b\u6784\u5efa\u590d\u6742. \u9488\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u9650\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7814\u7a76\u65f6\u95f4\u8f83\u957f\uff0c\u7814\u7a76\u8005\u6295\u5165\u7684\u7cbe\u529b\u76f8\u5bf9\u5f00\u53d1\u9886\u57df\u591a\uff0c\u56e0\u6b64\u65b9\u6cd5\u4f17\u591a\uff0c\u6280\u672f\u6210\u719f. \u6570\u636e\u6765\u6e90\u5e7f\uff0c\u4e3b\u8981\u6709\u7ed3\u6784\u5316\u3001\u534a\u7ed3\u6784\u5316\u3001\u65e0\u7ed3\u67843\u7c7b. \u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u8868\u683c\u6587\u6863\u3001\u6570\u636e\u5e93\u7b49\uff1b\u534a\u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u5982\u7ef4\u57fa\u767e\u79d1\u3001\u767e\u5ea6\u767e\u79d1\u7b49\uff1b\u65e0\u7ed3\u6784\u5c5e\u4e8e\u7eaf\u6587\u672c\u6570\u636e. \u5173\u7cfb\u79cd\u7c7b\u7e41\u591a\u4e14\u590d\u6742\uff0c\u566a\u97f3\u6570\u636e\u65e0\u6cd5\u907f\u514d\uff0c\u5b9e\u4f53\u95f4\u7684\u5173\u7cfb\u591a\u6837\uff0c\u6709\u4e00\u79cd\u6216\u8005\u591a\u79cd\u5173\u7cfb. \u5173\u7cfb\u62bd\u53d6\u8bc4\u4ef7\u6307\u6807 \u00b6 \u9488\u5bf9\u7279\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7ed3\u679c\uff0c\u4e00\u822c\u901a\u8fc7\u8ba1\u7b97\u5bf9\u5e94\u7684\u51c6\u786e\u7387 ( Precision ) \u3001\u53ec\u56de\u7387 ( Recall ) \u548c F1 \u503c\u6765\u8bc4\u4ef7\uff0e\u5176\u4e2d\uff0c\u51c6\u786e\u7387\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u6a21\u578b\u6b63\u786e\u5206\u7c7b\u4e3a\u6b63\u7c7b\u7684\u6837\u672c\u6570\u4e0e\u5168\u90e8\u6b63\u7c7b\u6837\u672c\u6570\u4e4b\u6bd4\uff1b\u53ec\u56de\u7387\u5219\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u9884\u6d4b\u6b63\u786e\u7684\u6b63\u7c7b\u4e0e\u6240\u6709\u6b63\u7c7b\u6570\u636e\u7684\u6bd4\u503c\uff1b\u800c F1 \u503c\u5219\u662f\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\uff0c\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u7684\u6027\u80fd\u8fdb\u884c\u7efc\u5408\u6027\u7684\u8bc4\u4ef7.\u5bf9\u5e94\u7684\u8ba1\u7b97\u4e3a: \u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5 \u00b6 \u57fa\u4e8e\u89c4\u5219\u65b9\u5f0f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 \u57fa\u4e8e\u89c4\u5219\u7684\u77e5\u8bc6\u62bd\u53d6\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) . \u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u867d\u7136\u5b9a\u4e49\u89c4\u5219\u8fd9\u79cd\u62bd\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u6709\u70b9 low\uff0c\u4f46\u5374\u7b80\u5355\u5b9e\u7528\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6548\u679c\u6bd4\u5f88\u591a\u9ad8\u6df1\u7684\u7b97\u6cd5\u8fd8\u8981\u597d\u4e00\u4e9b (\u975e\u7edd\u5bf9\uff0c\u5177\u4f53\u9886\u57df\u5177\u4f53\u5206\u6790) . \u57fa\u4e8e\u89c4\u5219\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd \u57fa\u4e8ePipeline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 Pipeline\u65b9\u6cd5\u662f\u6307\u5728\u5b9e\u4f53\u8bc6\u522b\u5df2\u7ecf\u5b8c\u6210\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u62bd\u53d6. \u57fa\u4e8ePipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd \u57fa\u4e8eJoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u901a\u8fc7\u4fee\u6539\u6807\u6ce8\u65b9\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u76f4\u63a5\u8f93\u51fa\u6587\u672c\u4e2d\u5305\u542b\u7684(ei ,rk, ej)\u4e09\u5143\u7ec4. Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u53c8\u5206\u4e3a: \"\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b\" \u548c \"\u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b\": \u57fa\u4e8ejoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd. \u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u5e38\u89c1\u95ee\u9898 \u00b6 \u6b63\u5e38\u5173\u7cfb (Normal) \u95ee\u9898: \u5373\u4e09\u5143\u7ec4\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0, \u6570\u636e\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u53ca\u5173\u7cfb \u5982: \u201c\u300a\u4eba\u95f4\u300b\u662f\u738b\u83f2\u6f14\u5531\u6b4c\u66f2\u201c\u4e2d\u5b58\u57281\u79cd\u5173\u7cfb: (\u738b\u83f2-\u6b4c\u624b-\u4eba\u95f4) \u5355\u4e00\u5b9e\u4f53\u5173\u7cfb\u91cd\u53e0\u95ee\u9898 (Single Entity Overlap (SEO) ) \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u53c2\u4e0e\u5230\u4e86\u591a\u4e2a\u5173\u7cfb\u4e2d \u5982: \u201c\u53f6\u6625\u53d9\u51fa\u751f\u4e8e\u6d59\u6c5f\uff0c\u6bd5\u4e1a\u4e8e\u9ec4\u57d4\u519b\u6821\u201d\u4e2d\u5b58\u5728\u4e24\u79cd\u5173\u7cfb: (\u53f6\u6625\u53d9-\u6bd5\u4e1a\u9662\u6821-\u9ec4\u57d4\u519b\u6821) \u3001 (\u53f6\u6625\u53d9-\u51fa\u751f\u5730-\u6d59\u6c5f) \u5b9e\u4f53\u5bf9\u91cd\u53e0(Entity Pair Overlap (EPO)): \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5173\u7cfb\u7c7b\u578b \u5982: \u201c\u5468\u661f\u9a70\u5bfc\u6f14\u4e86\u300a\u529f\u592b\u300b\uff0c\u5e76\u62c5\u4efb\u7537\u4e3b\u89d2\u201d\u4e2d\u5b58\u57282\u79cd\u5173\u7cfb: (\u5468\u661f\u9a70-\u6f14\u5458-\u300a\u529f\u592b\u300b) \u3001 (\u5468\u661f\u9a70-\u5bfc\u6f14-\u300a\u529f\u592b\u300b) < /div ------ ### \u5c0f\u7ed3\u603b\u7ed3 - \u672c\u5c0f\u8282\u4e3b\u8981\u9488\u5bf9\u4ec0\u4e48\u662f\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4ee5\u53ca\u4efb\u52a1\u7279\u70b9\u3001\u8bc4\u4ef7\u65b9\u6cd5\u3001\u5e38\u7528\u65b9\u6cd5\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u8fdb\u884c\u4e86\u6982\u8ff0. ------","title":"03 \u5173\u7cfb\u62bd\u53d6\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_1","text":"","title":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_2","text":"\u7406\u89e3\u5173\u7cfb\u62bd\u53d6\u6982\u5ff5 \u4e86\u89e3\u5173\u7cfb\u62bd\u53d6\u7684\u4efb\u52a1\u7279\u70b9. \u638c\u63e1\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7684\u8bc4\u4ef7\u6307\u6807. \u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_3","text":"\u5173\u7cfb\u62bd\u53d6\u5c31\u662f\u4ece\u4e00\u6bb5\u6587\u672c\u4e2d\u62bd\u53d6\u51fa (\u4e3b\u4f53\uff0c\u5173\u7cfb\uff0c\u5ba2\u4f53) \u8fd9\u6837\u7684\u4e09\u5143\u7ec4\uff0c\u7528\u82f1\u6587\u8868\u793a\u5c31\u662f(subject, relation, object)\u8fd9\u6837\u7684\u4e09\u5143\u7ec4. \u5177\u4f53\u5b9a\u4e49: \u7ed9\u5b9a\u4e00\u4e2a\u53e5\u5b50 S\uff0c\u5176\u4e2d\u5305\u542b\u5b9e\u4f53 A \u548c\u5b9e\u4f53 B\uff0c\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u95f4\u7684\u5173\u7cfbr \u2208 R (R\u4ee3\u8868\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5173\u7cfb\u7684\u96c6\u5408) . \u6216\u8005\u8bf4\uff0c\u62bd\u53d6\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u5c06\u975e\u7ed3\u6784\u5316\u7684\u6587\u672c\u4fe1\u606f\u8f6c\u5316\u4e3a\u7ed3\u6784\u5316\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u4ee5\u5173\u7cfb\u4e09\u5143\u7ec4\u3008S\uff0cP\uff0cO\u3009\u7684\u5f62\u5f0f\u6765\u63cf\u8ff0. \u5176\u4e2d\uff0cS \u548cO\u4e3a\u4e3b\u3001\u5ba2\u5b9e\u4f53\uff0cP\u4e3a\u9884\u6d4b\u51fa\u7684\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb. \u5173\u7cfb\u62bd\u53d6\u4e24\u5927\u4efb\u52a1: \u8bc6\u522b\u6587\u672c\u4e2d\u7684subject\u548cobject (\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1) \u5224\u65ad\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u5c5e\u4e8e\u54ea\u79cd\u5173\u7cfb (\u5173\u7cfb\u5206\u7c7b)","title":"\u5173\u7cfb\u62bd\u53d6\u6982\u5ff5"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_4","text":"\u5173\u7cfb\u62bd\u53d6\u662f\u4e00\u4e2a\u6587\u672c\u5206\u7c7b\u95ee\u9898\uff0c\u76f8\u6bd4\u4e8e\u60c5\u611f\u5206\u6790\u3001\u65b0\u95fb\u5206\u7c7b\u7b49\u5176\u4ed6\u4efb\u52a1\uff0c\u5173\u7cfb\u62bd\u53d6\u4e3b\u8981\u67093\u4e2a\u7279\u70b9: \u9886\u57df\u4f17\u591a\uff0c\u5173\u7cfb\u6a21\u578b\u6784\u5efa\u590d\u6742. \u9488\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u9650\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7814\u7a76\u65f6\u95f4\u8f83\u957f\uff0c\u7814\u7a76\u8005\u6295\u5165\u7684\u7cbe\u529b\u76f8\u5bf9\u5f00\u53d1\u9886\u57df\u591a\uff0c\u56e0\u6b64\u65b9\u6cd5\u4f17\u591a\uff0c\u6280\u672f\u6210\u719f. \u6570\u636e\u6765\u6e90\u5e7f\uff0c\u4e3b\u8981\u6709\u7ed3\u6784\u5316\u3001\u534a\u7ed3\u6784\u5316\u3001\u65e0\u7ed3\u67843\u7c7b. \u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u8868\u683c\u6587\u6863\u3001\u6570\u636e\u5e93\u7b49\uff1b\u534a\u7ed3\u6784\u5316\u6570\u636e\u9488\u5bf9\u5982\u7ef4\u57fa\u767e\u79d1\u3001\u767e\u5ea6\u767e\u79d1\u7b49\uff1b\u65e0\u7ed3\u6784\u5c5e\u4e8e\u7eaf\u6587\u672c\u6570\u636e. \u5173\u7cfb\u79cd\u7c7b\u7e41\u591a\u4e14\u590d\u6742\uff0c\u566a\u97f3\u6570\u636e\u65e0\u6cd5\u907f\u514d\uff0c\u5b9e\u4f53\u95f4\u7684\u5173\u7cfb\u591a\u6837\uff0c\u6709\u4e00\u79cd\u6216\u8005\u591a\u79cd\u5173\u7cfb.","title":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u7279\u70b9"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_5","text":"\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u7684\u5173\u7cfb\u62bd\u53d6\u7684\u7ed3\u679c\uff0c\u4e00\u822c\u901a\u8fc7\u8ba1\u7b97\u5bf9\u5e94\u7684\u51c6\u786e\u7387 ( Precision ) \u3001\u53ec\u56de\u7387 ( Recall ) \u548c F1 \u503c\u6765\u8bc4\u4ef7\uff0e\u5176\u4e2d\uff0c\u51c6\u786e\u7387\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u6a21\u578b\u6b63\u786e\u5206\u7c7b\u4e3a\u6b63\u7c7b\u7684\u6837\u672c\u6570\u4e0e\u5168\u90e8\u6b63\u7c7b\u6837\u672c\u6570\u4e4b\u6bd4\uff1b\u53ec\u56de\u7387\u5219\u662f\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u9884\u6d4b\u6b63\u786e\u7684\u6b63\u7c7b\u4e0e\u6240\u6709\u6b63\u7c7b\u6570\u636e\u7684\u6bd4\u503c\uff1b\u800c F1 \u503c\u5219\u662f\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8c03\u548c\u5e73\u5747\u503c\uff0c\u53ef\u4ee5\u5bf9\u7cfb\u7edf\u7684\u6027\u80fd\u8fdb\u884c\u7efc\u5408\u6027\u7684\u8bc4\u4ef7.\u5bf9\u5e94\u7684\u8ba1\u7b97\u4e3a:","title":"\u5173\u7cfb\u62bd\u53d6\u8bc4\u4ef7\u6307\u6807"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_6","text":"","title":"\u5173\u7cfb\u62bd\u53d6\u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_7","text":"\u57fa\u4e8e\u89c4\u5219\u7684\u77e5\u8bc6\u62bd\u53d6\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) . \u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u867d\u7136\u5b9a\u4e49\u89c4\u5219\u8fd9\u79cd\u62bd\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u6709\u70b9 low\uff0c\u4f46\u5374\u7b80\u5355\u5b9e\u7528\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6548\u679c\u6bd4\u5f88\u591a\u9ad8\u6df1\u7684\u7b97\u6cd5\u8fd8\u8981\u597d\u4e00\u4e9b (\u975e\u7edd\u5bf9\uff0c\u5177\u4f53\u9886\u57df\u5177\u4f53\u5206\u6790) . \u57fa\u4e8e\u89c4\u5219\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd","title":"\u57fa\u4e8e\u89c4\u5219\u65b9\u5f0f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#pipeline","text":"Pipeline\u65b9\u6cd5\u662f\u6307\u5728\u5b9e\u4f53\u8bc6\u522b\u5df2\u7ecf\u5b8c\u6210\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u62bd\u53d6. \u57fa\u4e8ePipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd","title":"\u57fa\u4e8ePipeline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#joint","text":"Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u901a\u8fc7\u4fee\u6539\u6807\u6ce8\u65b9\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u76f4\u63a5\u8f93\u51fa\u6587\u672c\u4e2d\u5305\u542b\u7684(ei ,rk, ej)\u4e09\u5143\u7ec4. Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u53c8\u5206\u4e3a: \"\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b\" \u548c \"\u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b\": \u57fa\u4e8ejoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u7684\u5b9e\u73b0\u5728\u540e\u7eed\u7ae0\u8282\u4ecb\u7ecd.","title":"\u57fa\u4e8eJoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/03-%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D.html#_8","text":"\u6b63\u5e38\u5173\u7cfb (Normal) \u95ee\u9898: \u5373\u4e09\u5143\u7ec4\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0, \u6570\u636e\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u53ca\u5173\u7cfb \u5982: \u201c\u300a\u4eba\u95f4\u300b\u662f\u738b\u83f2\u6f14\u5531\u6b4c\u66f2\u201c\u4e2d\u5b58\u57281\u79cd\u5173\u7cfb: (\u738b\u83f2-\u6b4c\u624b-\u4eba\u95f4) \u5355\u4e00\u5b9e\u4f53\u5173\u7cfb\u91cd\u53e0\u95ee\u9898 (Single Entity Overlap (SEO) ) \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u53c2\u4e0e\u5230\u4e86\u591a\u4e2a\u5173\u7cfb\u4e2d \u5982: \u201c\u53f6\u6625\u53d9\u51fa\u751f\u4e8e\u6d59\u6c5f\uff0c\u6bd5\u4e1a\u4e8e\u9ec4\u57d4\u519b\u6821\u201d\u4e2d\u5b58\u5728\u4e24\u79cd\u5173\u7cfb: (\u53f6\u6625\u53d9-\u6bd5\u4e1a\u9662\u6821-\u9ec4\u57d4\u519b\u6821) \u3001 (\u53f6\u6625\u53d9-\u51fa\u751f\u5730-\u6d59\u6c5f) \u5b9e\u4f53\u5bf9\u91cd\u53e0(Entity Pair Overlap (EPO)): \u6570\u636e\u4e2d\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5173\u7cfb\u7c7b\u578b \u5982: \u201c\u5468\u661f\u9a70\u5bfc\u6f14\u4e86\u300a\u529f\u592b\u300b\uff0c\u5e76\u62c5\u4efb\u7537\u4e3b\u89d2\u201d\u4e2d\u5b58\u57282\u79cd\u5173\u7cfb: (\u5468\u661f\u9a70-\u6f14\u5458-\u300a\u529f\u592b\u300b) \u3001 (\u5468\u661f\u9a70-\u5bfc\u6f14-\u300a\u529f\u592b\u300b) < /div ------ ### \u5c0f\u7ed3\u603b\u7ed3 - \u672c\u5c0f\u8282\u4e3b\u8981\u9488\u5bf9\u4ec0\u4e48\u662f\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4ee5\u53ca\u4efb\u52a1\u7279\u70b9\u3001\u8bc4\u4ef7\u65b9\u6cd5\u3001\u5e38\u7528\u65b9\u6cd5\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u8fdb\u884c\u4e86\u6982\u8ff0. ------","title":"\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u5e38\u89c1\u95ee\u9898"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html","text":"pipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3Pipeline\u65b9\u6cd5\u7684\u539f\u7406 \u638c\u63e1Pipeline\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9 pipeline\u65b9\u6cd5\u7684\u539f\u7406 \u00b6 pipeline\u65b9\u6cd5\u662f\u6307\u5728\u5b9e\u4f53\u8bc6\u522b\u5df2\u7ecf\u5b8c\u6210\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u62bd\u53d6. \u65e9\u671f\u7684\u6d41\u6c34\u7ebf\u5b66\u4e60\u65b9\u6cd5\u4e3b\u8981\u91c7\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc (CNN) \u548c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc (RNN) \u4e24\u5927\u7c7b\u7ed3\u6784\uff0e\u5176\u4e2d\uff0cCNN\u591a\u6837\u6027\u5377\u79ef\u6838\u7684\u7279\u6027\u6709\u5229\u4e8e\u8bc6\u522b\u76ee\u6807\u7684\u7ed3\u6784\u7279\u5f81\uff0c\u800cRNN\u80fd\u5145\u5206\u8003\u8651\u957f\u8ddd\u79bb\u8bcd\u4e4b\u95f4\u7684\u4f9d\u8d56\u6027\uff0c\u5176\u8bb0\u5fc6\u529f\u80fd\u6709\u5229\u4e8e\u8bc6\u522b\u5e8f\u5217\uff0e\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u4e0d\u65ad\u53d1\u5c55, \u7814\u7a76\u8005\u4e0d\u65ad\u6539\u8fdb\u548c\u5b8c\u5584CNN\u548cRNN\u7684\u65b9\u6cd5\uff0c\u5e76\u4ea7\u751f\u4e86\u8bb8\u591a\u53d8\u4f53\uff0c\u5982\u957f\u77ed\u671f\u8bb0\u5fc6\u7f51\u7edc (LSTM) \u3001\u53cc\u5411\u957f\u77ed\u671f\u8bb0\u5fc6\u7f51 (BI-LSTM) \u3001\u7b49\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u4fc3\u8fdb\u4e86\u5173\u7cfb\u62bd\u53d6\u7684\u53d1\u5c55\uff0e pipeline\u65b9\u6cd5\u6d41\u7a0b\uff1a \u5148\u5bf9\u8f93\u5165\u7684\u53e5\u5b50\u8fdb\u884c\u5b9e\u4f53\u62bd\u53d6\uff0c\u5c06\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53\u5206\u522b\u7ec4\u5408\uff1b\u7136\u540e\u518d\u8fdb\u884c\u5173\u7cfb\u5206\u7c7b. \u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5b50\u8fc7\u7a0b\u662f\u524d\u540e\u4e32\u8054\u7684\uff0c\u5b8c\u5168\u5206\u79bb. pipeline\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\uff1a \u00b6 \u4f18\u70b9\uff1a \u6613\u4e8e\u5b9e\u73b0\uff0c\u5b9e\u4f53\u6a21\u578b\u548c\u5173\u7cfb\u6a21\u578b\u4f7f\u7528\u72ec\u7acb\u7684\u6570\u636e\u96c6\uff0c\u4e0d\u9700\u8981\u540c\u65f6\u6807\u6ce8\u5b9e\u4f53\u548c\u5173\u7cfb\u7684\u6570\u636e\u96c6. \u4e24\u8005\u76f8\u4e92\u72ec\u7acb\uff0c\u82e5\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\u6ca1\u8bad\u7ec3\u597d\u4e0d\u4f1a\u5f71\u54cd\u5230\u5b9e\u4f53\u62bd\u53d6. \u7f3a\u70b9\uff1a \u5173\u7cfb\u548c\u5b9e\u4f53\u4e24\u8005\u662f\u7d27\u5bc6\u76f8\u8fde\u7684\uff0c\u4e92\u76f8\u4e4b\u95f4\u7684\u8054\u7cfb\u6ca1\u6709\u6355\u6349\u5230. \u5bb9\u6613\u9020\u6210\u8bef\u5dee\u79ef\u7d2f\u3001\u5b9e\u4f53\u5197\u4f59\u3001\u4ea4\u4e92\u7f3a\u5931. \u57fa\u4e8epipline\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 \u4e0b\u4e00\u7ae0\u8282\u8fdb\u884c\u5177\u4f53\u4ecb\u7ecd \u5c0f\u7ed3\u603b\u8282 \u00b6 \u672c\u5c0f\u7ed3\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662fpipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\uff0c\u4ee5\u53ca\u8be5\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9.","title":"3.1 \u5173\u7cfb\u62bd\u53d6\u7684pipeline\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#pipline","text":"","title":"pipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_1","text":"\u7406\u89e3Pipeline\u65b9\u6cd5\u7684\u539f\u7406 \u638c\u63e1Pipeline\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#pipeline","text":"pipeline\u65b9\u6cd5\u662f\u6307\u5728\u5b9e\u4f53\u8bc6\u522b\u5df2\u7ecf\u5b8c\u6210\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u62bd\u53d6. \u65e9\u671f\u7684\u6d41\u6c34\u7ebf\u5b66\u4e60\u65b9\u6cd5\u4e3b\u8981\u91c7\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc (CNN) \u548c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc (RNN) \u4e24\u5927\u7c7b\u7ed3\u6784\uff0e\u5176\u4e2d\uff0cCNN\u591a\u6837\u6027\u5377\u79ef\u6838\u7684\u7279\u6027\u6709\u5229\u4e8e\u8bc6\u522b\u76ee\u6807\u7684\u7ed3\u6784\u7279\u5f81\uff0c\u800cRNN\u80fd\u5145\u5206\u8003\u8651\u957f\u8ddd\u79bb\u8bcd\u4e4b\u95f4\u7684\u4f9d\u8d56\u6027\uff0c\u5176\u8bb0\u5fc6\u529f\u80fd\u6709\u5229\u4e8e\u8bc6\u522b\u5e8f\u5217\uff0e\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u4e0d\u65ad\u53d1\u5c55, \u7814\u7a76\u8005\u4e0d\u65ad\u6539\u8fdb\u548c\u5b8c\u5584CNN\u548cRNN\u7684\u65b9\u6cd5\uff0c\u5e76\u4ea7\u751f\u4e86\u8bb8\u591a\u53d8\u4f53\uff0c\u5982\u957f\u77ed\u671f\u8bb0\u5fc6\u7f51\u7edc (LSTM) \u3001\u53cc\u5411\u957f\u77ed\u671f\u8bb0\u5fc6\u7f51 (BI-LSTM) \u3001\u7b49\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u4fc3\u8fdb\u4e86\u5173\u7cfb\u62bd\u53d6\u7684\u53d1\u5c55\uff0e pipeline\u65b9\u6cd5\u6d41\u7a0b\uff1a \u5148\u5bf9\u8f93\u5165\u7684\u53e5\u5b50\u8fdb\u884c\u5b9e\u4f53\u62bd\u53d6\uff0c\u5c06\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53\u5206\u522b\u7ec4\u5408\uff1b\u7136\u540e\u518d\u8fdb\u884c\u5173\u7cfb\u5206\u7c7b. \u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5b50\u8fc7\u7a0b\u662f\u524d\u540e\u4e32\u8054\u7684\uff0c\u5b8c\u5168\u5206\u79bb.","title":"pipeline\u65b9\u6cd5\u7684\u539f\u7406"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#pipeline_1","text":"\u4f18\u70b9\uff1a \u6613\u4e8e\u5b9e\u73b0\uff0c\u5b9e\u4f53\u6a21\u578b\u548c\u5173\u7cfb\u6a21\u578b\u4f7f\u7528\u72ec\u7acb\u7684\u6570\u636e\u96c6\uff0c\u4e0d\u9700\u8981\u540c\u65f6\u6807\u6ce8\u5b9e\u4f53\u548c\u5173\u7cfb\u7684\u6570\u636e\u96c6. \u4e24\u8005\u76f8\u4e92\u72ec\u7acb\uff0c\u82e5\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\u6ca1\u8bad\u7ec3\u597d\u4e0d\u4f1a\u5f71\u54cd\u5230\u5b9e\u4f53\u62bd\u53d6. \u7f3a\u70b9\uff1a \u5173\u7cfb\u548c\u5b9e\u4f53\u4e24\u8005\u662f\u7d27\u5bc6\u76f8\u8fde\u7684\uff0c\u4e92\u76f8\u4e4b\u95f4\u7684\u8054\u7cfb\u6ca1\u6709\u6355\u6349\u5230. \u5bb9\u6613\u9020\u6210\u8bef\u5dee\u79ef\u7d2f\u3001\u5b9e\u4f53\u5197\u4f59\u3001\u4ea4\u4e92\u7f3a\u5931.","title":"pipeline\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\uff1a"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#pipline_1","text":"\u4e0b\u4e00\u7ae0\u8282\u8fdb\u884c\u5177\u4f53\u4ecb\u7ecd","title":"\u57fa\u4e8epipline\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-pipeline%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_2","text":"\u672c\u5c0f\u7ed3\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662fpipline\u6d41\u6c34\u7ebf\u65b9\u6cd5\uff0c\u4ee5\u53ca\u8be5\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9.","title":"\u5c0f\u7ed3\u603b\u8282"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-BiLSTM%2BAttention%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D.html","text":"BiLSTM+Attention\u6a21\u578b\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3BiLSTM+Attention\u6a21\u578b\u7b97\u6cd5\u601d\u60f3. \u638c\u63e1BiLSTM+Attention\u6a21\u578b\u67b6\u6784. BiLSTM+Attention\u7b97\u6cd5\u601d\u60f3 \u00b6 BiLSTM+Attention\u6a21\u578b\u6700\u521d\u7531Zhou\u7b49\u4eba\u57282016\u5e74\u7684\u8bba\u6587\u300aAttention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification\u300b\u4e2d\u63d0\u51fa. \u8be5\u6a21\u578b\u7ed3\u5408\u4e86\u53cc\u5411\u957f\u77ed\u65f6\u8bb0\u5fc6\u7f51\u7edc (Bidirectional LSTM) \u548c\u6ce8\u610f\u529b\u673a\u5236 (Attention) \uff0c\u7528\u4e8e\u5904\u7406\u8f93\u5165\u5e8f\u5217\u5e76\u63d0\u53d6\u5173\u7cfb\u4fe1\u606f. \u8be5\u6a21\u578b\u5e76\u88ab\u5e94\u7528\u4e8e\u5173\u7cfb\u5206\u7c7b\u4efb\u52a1. BiLSTM+Attention\u6a21\u578b\u67b6\u6784 \u00b6 \u57fa\u4e8e\u4e0a\u56fe\u6a21\u578b\u67b6\u6784\u6240\u793a: BiLSTM+Attention\u6a21\u578b\u6574\u4f53\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206: \u8f93\u5165\u5c42 (Input Layer) : \u8f93\u5165\u7684\u662f\u53e5\u5b50\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u5e8f\u5217\u4e5f\u53ef\u4ee5\u662f\u5355\u8bcd\u5e8f\u5217\uff0c\u6216\u8005\u4e24\u8005\u76f8\u7ed3\u5408. \u6b64\u5916\uff0c\u5bf9\u4e8e\u53e5\u5b50\u4e2d\u7684\u4e24\u4e2a\u5b9e\u4f53\uff0c\u5206\u522b\u8ba1\u7b97\u5404\u4e2a\u5b57\u7b26\u76f8\u5bf9\u4e8e\u5b9e\u4f53\u7684\u4f4d\u7f6e. \u6bd4\u5982\u6709\u5982\u4e0b\u6837\u672c: \u6587\u672c\u63cf\u8ff0: \u201c\u5728\u300a\u9003\u5b66\u5a01\u9f99\u300b\u8fd9\u90e8\u7535\u5f71\u4e2d\u5468\u661f\u9a70\u548c\u5434\u5b5f\u8fbe\u8054\u5408\u51fa\u6f14\u201d \u5728\u8fd9\u4e2a\u6837\u672c\u4e2d\uff0c\u5b9e\u4f531\u4e3a\u5468\u661f\u9a70\uff0c\u5b9e\u4f532\u4e3a\u5434\u5b5f\u8fbe. \u5173\u7cfb\u4e3a\u5408\u4f5c\u5173\u7cfb. \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u201c\u5728\u201d\u5b57\u6765\u8bf4\uff0c\u5176\u76f8\u5bf9\u4e8e\u5b9e\u4f531\u7684\u8ddd\u79bb\u4e3a: \u201c\u5728\u201d\u5b57\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15-\u5b9e\u4f531\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15. \u76f8\u5bf9\u4e8e\u5b9e\u4f532\u7684\u8ddd\u79bb\u4e3a: \u201c\u5728\u201d\u5b57\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15-\u5b9e\u4f532\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15. \u56e0\u6b64\uff0c\u6a21\u578b\u7684\u8f93\u5165\u4e3a\u5b50\u5e8f\u5217+\u5b57\u7b26\u7684\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801 \u8bcd\u5d4c\u5165\u5c42 (Embedding Layer) : \u5c06\u6bcf\u4e2a\u5355\u8bcd\u6620\u5c04\u5230\u4e00\u4e2a\u9ad8\u7ef4\u5411\u91cf\u8868\u793a\uff0c\u5305\u62ec: \u5b57\u7b26\u6216\u8bcd\u5d4c\u5165\u4ee5\u53ca\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u7684\u5d4c\u5165\uff0c\u53ef\u4ee5\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\u6216\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3. \u53cc\u5411LSTM\u5c42 (BiLSTM Layer) : LSTM\u662f\u4e00\u79cd\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u53ef\u4ee5\u5bf9\u5e8f\u5217\u6570\u636e\u8fdb\u884c\u5efa\u6a21\uff0c\u7528\u4e8e\u4ece\u53e5\u5b50\u4e2d\u63d0\u53d6\u7279\u5f81. BiLSTM\u662f\u4e00\u79cd\u53cc\u5411LSTM\uff0c\u5b83\u80fd\u591f\u540c\u65f6\u6355\u6349\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5305\u62ec\u524d\u5411\u548c\u540e\u5411\u4fe1\u606f\uff0c\u56e0\u6b64\u5728\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4e2d\u5f97\u5230\u4e86\u5e7f\u6cdb\u5e94\u7528. \u6ce8\u610f\u529b\u673a\u5236\u5c42 (Attention Layer) : \u6ce8\u610f\u529b\u673a\u5236\u53ef\u4ee5\u8ba9\u6a21\u578b\u96c6\u4e2d\u6ce8\u610f\u529b\u4e8e\u5173\u952e\u8bcd\u6216\u7247\u6bb5\uff0c\u6709\u52a9\u4e8e\u63d0\u9ad8\u6a21\u578b\u7684\u6027\u80fd. \u8fd9\u91cc\u6ce8\u610f\u529b\u673a\u5236\u88ab\u7528\u6765\u786e\u5b9a\u6bcf\u4e2a\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u5bf9\u4e8e\u5173\u7cfb\u5206\u7c7b\u7684\u91cd\u8981\u6027. \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8f93\u5165\u53e5\u5b50\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\uff0c\u6ce8\u610f\u529b\u673a\u5236\u4f1a\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u6743\u91cd\uff0c\u8868\u793a\u8be5\u5355\u8bcd\u5bf9\u4e8e\u5173\u7cfb\u5206\u7c7b\u7684\u91cd\u8981\u7a0b\u5ea6. \u8fd9\u4e9b\u6743\u91cd\u5c06\u88ab\u7528\u4e8e\u52a0\u6743\u8f93\u5165\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u8868\u793a\uff0c\u4ee5\u8ba1\u7b97\u5173\u7cfb\u5206\u7c7b\u7684\u8f93\u51fa. \u672c\u6b21\u6ce8\u610f\u529b\u673a\u5236\u7684\u5b9e\u73b0\u662f\u91c7\u7528\u7684\u57fa\u4e8e\u6ce8\u610f\u529b\u6743\u91cd\u7684\u52a0\u6743\u5e73\u5747\u6c60\u5316\u65b9\u5f0f. \u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u5c06 BiLSTM \u7f51\u7edc\u7684\u8f93\u51fa H\u200b H\u200b \u7ecf\u8fc7\u4e00\u4e2a tanh\u200b tanh\u200b \u6fc0\u6d3b\u51fd\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u77e9\u9635 M\u200b M\u200b M = tanh(H) M = tanh(H) \u7b2c\u4e8c\u6b65: \u5c06 M\u200b M\u200b \u4f5c\u4e3a\u8f93\u5165\uff0c\u901a\u8fc7\u6743\u91cd\u5411\u91cf w^T\u200b w^T\u200b \u548c\u4e00\u4e2a softmax \u51fd\u6570\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u5bf9\u4e8e\u5173\u7cfb\u5206\u7c7b\u7684\u91cd\u8981\u7a0b\u5ea6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6743\u91cd\u5411\u91cf \u03b1\u200b \u03b1\u200b . \u03b1 = softmax(w^T*M) \u03b1 = softmax(w^T*M) \u7b2c\u4e09\u6b65: \u5c06BiLSTM\u7f51\u7edc\u7684\u8f93\u51fa H H \u548c\u6ce8\u610f\u529b\u6743\u91cd \u03b1 \u03b1 \u76f8\u4e58\u5f97\u5230\u4e00\u4e2a\u52a0\u6743\u548c r r r = H * \u03b1^T r = H * \u03b1^T \u7b2c\u56db\u6b65: \u5c06\u7b2c\u4e09\u6b65\u5f97\u5230\u7684\u7ed3\u679c r r \uff0c\u7ecf\u8fc7\u4e00\u4e2a tanh\u200b tanh\u200b \u6fc0\u6d3b\u51fd\u6570\uff0c\u5f97\u5230\u6700\u7ec8\u52a0\u6743\u540e\u7684\u8f93\u5165\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u8868\u793a\uff0c\u4ee5\u65b9\u4fbf\u540e\u7eed\u8ba1\u7b97\u5173\u7cfb\u5206\u7c7b\u7684\u8f93\u51fa h^* = tanh(r) h^* = tanh(r) \u8f93\u51fa\u5c42 (Output Layer) : \u6839\u636e\u4efb\u52a1\u7684\u4e0d\u540c\uff0c\u8f93\u51fa\u5c42\u53ef\u4ee5\u662f\u5206\u7c7b\u5c42\u6216\u56de\u5f52\u5c42. \u5728\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4e2d\uff0c\u8f93\u51fa\u5c42\u901a\u5e38\u662f\u4e00\u4e2a\u5206\u7c7b\u5c42\uff0c\u7528\u4e8e\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7c7b\u578b. \u5c0f\u7ed3\u603b\u7ed3: \u00b6 BiLSTM+Attention\u7b97\u6cd5\u601d\u60f3 \u7531Zhou\u7b49\u4eba\u57282016\u5e74\u7684\u8bba\u6587\u300aAttention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification\u300b\u4e2d\u63d0\u51fa \u8be5\u6a21\u578b\u5e76\u88ab\u5e94\u7528\u4e8e\u5173\u7cfb\u5206\u7c7b\u4efb\u52a1. BiLSTM+Attention\u6a21\u578b\u67b6\u6784 \u8f93\u5165\u5c42 (Input Layer) : \u8f93\u5165\u7684\u662f\u53e5\u5b50\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u5e8f\u5217\u4e5f\u53ef\u4ee5\u662f\u5355\u8bcd\u5e8f\u5217\uff0c\u6216\u8005\u4e24\u8005\u76f8\u7ed3\u5408. \u6b64\u5916\uff0c\u5bf9\u4e8e\u53e5\u5b50\u4e2d\u7684\u4e24\u4e2a\u5b9e\u4f53\uff0c\u5206\u522b\u8ba1\u7b97\u5404\u4e2a\u5b57\u7b26\u76f8\u5bf9\u4e8e\u5b9e\u4f53\u7684\u4f4d\u7f6e. \u8bcd\u5d4c\u5165\u5c42 (Embedding Layer) : \u5c06\u6bcf\u4e2a\u5355\u8bcd\u6620\u5c04\u5230\u4e00\u4e2a\u9ad8\u7ef4\u5411\u91cf\u8868\u793a \u53cc\u5411LSTM\u5c42 (BiLSTM Layer) : LSTM\u662f\u4e00\u79cd\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u53ef\u4ee5\u5bf9\u5e8f\u5217\u6570\u636e\u8fdb\u884c\u5efa\u6a21\uff0c\u7528\u4e8e\u4ece\u53e5\u5b50\u4e2d\u63d0\u53d6\u7279\u5f81. \u6ce8\u610f\u529b\u673a\u5236\u5c42 (Attention Layer) : \u6ce8\u610f\u529b\u673a\u5236\u53ef\u4ee5\u8ba9\u6a21\u578b\u96c6\u4e2d\u6ce8\u610f\u529b\u4e8e\u5173\u952e\u8bcd\u6216\u7247\u6bb5\uff0c\u6709\u52a9\u4e8e\u63d0\u9ad8\u6a21\u578b\u7684\u6027\u80fd. \u8f93\u51fa\u5c42 (Output Layer) : \u5728\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4e2d\uff0c\u8f93\u51fa\u5c42\u901a\u5e38\u662f\u4e00\u4e2a\u5206\u7c7b\u5c42\uff0c\u7528\u4e8e\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7c7b\u578b.","title":"3.2 BiLSTM+Attention\u6a21\u578b\u67b6\u6784\u89e3\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-BiLSTM%2BAttention%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D.html#bilstmattention","text":"","title":"BiLSTM+Attention\u6a21\u578b\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-BiLSTM%2BAttention%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D.html#_1","text":"\u7406\u89e3BiLSTM+Attention\u6a21\u578b\u7b97\u6cd5\u601d\u60f3. \u638c\u63e1BiLSTM+Attention\u6a21\u578b\u67b6\u6784.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-BiLSTM%2BAttention%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D.html#bilstmattention_1","text":"BiLSTM+Attention\u6a21\u578b\u6700\u521d\u7531Zhou\u7b49\u4eba\u57282016\u5e74\u7684\u8bba\u6587\u300aAttention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification\u300b\u4e2d\u63d0\u51fa. \u8be5\u6a21\u578b\u7ed3\u5408\u4e86\u53cc\u5411\u957f\u77ed\u65f6\u8bb0\u5fc6\u7f51\u7edc (Bidirectional LSTM) \u548c\u6ce8\u610f\u529b\u673a\u5236 (Attention) \uff0c\u7528\u4e8e\u5904\u7406\u8f93\u5165\u5e8f\u5217\u5e76\u63d0\u53d6\u5173\u7cfb\u4fe1\u606f. \u8be5\u6a21\u578b\u5e76\u88ab\u5e94\u7528\u4e8e\u5173\u7cfb\u5206\u7c7b\u4efb\u52a1.","title":"BiLSTM+Attention\u7b97\u6cd5\u601d\u60f3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-BiLSTM%2BAttention%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D.html#bilstmattention_2","text":"\u57fa\u4e8e\u4e0a\u56fe\u6a21\u578b\u67b6\u6784\u6240\u793a: BiLSTM+Attention\u6a21\u578b\u6574\u4f53\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206: \u8f93\u5165\u5c42 (Input Layer) : \u8f93\u5165\u7684\u662f\u53e5\u5b50\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u5e8f\u5217\u4e5f\u53ef\u4ee5\u662f\u5355\u8bcd\u5e8f\u5217\uff0c\u6216\u8005\u4e24\u8005\u76f8\u7ed3\u5408. \u6b64\u5916\uff0c\u5bf9\u4e8e\u53e5\u5b50\u4e2d\u7684\u4e24\u4e2a\u5b9e\u4f53\uff0c\u5206\u522b\u8ba1\u7b97\u5404\u4e2a\u5b57\u7b26\u76f8\u5bf9\u4e8e\u5b9e\u4f53\u7684\u4f4d\u7f6e. \u6bd4\u5982\u6709\u5982\u4e0b\u6837\u672c: \u6587\u672c\u63cf\u8ff0: \u201c\u5728\u300a\u9003\u5b66\u5a01\u9f99\u300b\u8fd9\u90e8\u7535\u5f71\u4e2d\u5468\u661f\u9a70\u548c\u5434\u5b5f\u8fbe\u8054\u5408\u51fa\u6f14\u201d \u5728\u8fd9\u4e2a\u6837\u672c\u4e2d\uff0c\u5b9e\u4f531\u4e3a\u5468\u661f\u9a70\uff0c\u5b9e\u4f532\u4e3a\u5434\u5b5f\u8fbe. \u5173\u7cfb\u4e3a\u5408\u4f5c\u5173\u7cfb. \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u201c\u5728\u201d\u5b57\u6765\u8bf4\uff0c\u5176\u76f8\u5bf9\u4e8e\u5b9e\u4f531\u7684\u8ddd\u79bb\u4e3a: \u201c\u5728\u201d\u5b57\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15-\u5b9e\u4f531\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15. \u76f8\u5bf9\u4e8e\u5b9e\u4f532\u7684\u8ddd\u79bb\u4e3a: \u201c\u5728\u201d\u5b57\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15-\u5b9e\u4f532\u5728\u5b57\u7b26\u5e8f\u5217\u4e2d\u7684\u7d22\u5f15. \u56e0\u6b64\uff0c\u6a21\u578b\u7684\u8f93\u5165\u4e3a\u5b50\u5e8f\u5217+\u5b57\u7b26\u7684\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801 \u8bcd\u5d4c\u5165\u5c42 (Embedding Layer) : \u5c06\u6bcf\u4e2a\u5355\u8bcd\u6620\u5c04\u5230\u4e00\u4e2a\u9ad8\u7ef4\u5411\u91cf\u8868\u793a\uff0c\u5305\u62ec: \u5b57\u7b26\u6216\u8bcd\u5d4c\u5165\u4ee5\u53ca\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u7684\u5d4c\u5165\uff0c\u53ef\u4ee5\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\u6216\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3. \u53cc\u5411LSTM\u5c42 (BiLSTM Layer) : LSTM\u662f\u4e00\u79cd\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u53ef\u4ee5\u5bf9\u5e8f\u5217\u6570\u636e\u8fdb\u884c\u5efa\u6a21\uff0c\u7528\u4e8e\u4ece\u53e5\u5b50\u4e2d\u63d0\u53d6\u7279\u5f81. BiLSTM\u662f\u4e00\u79cd\u53cc\u5411LSTM\uff0c\u5b83\u80fd\u591f\u540c\u65f6\u6355\u6349\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5305\u62ec\u524d\u5411\u548c\u540e\u5411\u4fe1\u606f\uff0c\u56e0\u6b64\u5728\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4e2d\u5f97\u5230\u4e86\u5e7f\u6cdb\u5e94\u7528. \u6ce8\u610f\u529b\u673a\u5236\u5c42 (Attention Layer) : \u6ce8\u610f\u529b\u673a\u5236\u53ef\u4ee5\u8ba9\u6a21\u578b\u96c6\u4e2d\u6ce8\u610f\u529b\u4e8e\u5173\u952e\u8bcd\u6216\u7247\u6bb5\uff0c\u6709\u52a9\u4e8e\u63d0\u9ad8\u6a21\u578b\u7684\u6027\u80fd. \u8fd9\u91cc\u6ce8\u610f\u529b\u673a\u5236\u88ab\u7528\u6765\u786e\u5b9a\u6bcf\u4e2a\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u5bf9\u4e8e\u5173\u7cfb\u5206\u7c7b\u7684\u91cd\u8981\u6027. \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8f93\u5165\u53e5\u5b50\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\uff0c\u6ce8\u610f\u529b\u673a\u5236\u4f1a\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u6743\u91cd\uff0c\u8868\u793a\u8be5\u5355\u8bcd\u5bf9\u4e8e\u5173\u7cfb\u5206\u7c7b\u7684\u91cd\u8981\u7a0b\u5ea6. \u8fd9\u4e9b\u6743\u91cd\u5c06\u88ab\u7528\u4e8e\u52a0\u6743\u8f93\u5165\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u8868\u793a\uff0c\u4ee5\u8ba1\u7b97\u5173\u7cfb\u5206\u7c7b\u7684\u8f93\u51fa. \u672c\u6b21\u6ce8\u610f\u529b\u673a\u5236\u7684\u5b9e\u73b0\u662f\u91c7\u7528\u7684\u57fa\u4e8e\u6ce8\u610f\u529b\u6743\u91cd\u7684\u52a0\u6743\u5e73\u5747\u6c60\u5316\u65b9\u5f0f. \u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u5c06 BiLSTM \u7f51\u7edc\u7684\u8f93\u51fa H\u200b H\u200b \u7ecf\u8fc7\u4e00\u4e2a tanh\u200b tanh\u200b \u6fc0\u6d3b\u51fd\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u77e9\u9635 M\u200b M\u200b M = tanh(H) M = tanh(H) \u7b2c\u4e8c\u6b65: \u5c06 M\u200b M\u200b \u4f5c\u4e3a\u8f93\u5165\uff0c\u901a\u8fc7\u6743\u91cd\u5411\u91cf w^T\u200b w^T\u200b \u548c\u4e00\u4e2a softmax \u51fd\u6570\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u5bf9\u4e8e\u5173\u7cfb\u5206\u7c7b\u7684\u91cd\u8981\u7a0b\u5ea6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6743\u91cd\u5411\u91cf \u03b1\u200b \u03b1\u200b . \u03b1 = softmax(w^T*M) \u03b1 = softmax(w^T*M) \u7b2c\u4e09\u6b65: \u5c06BiLSTM\u7f51\u7edc\u7684\u8f93\u51fa H H \u548c\u6ce8\u610f\u529b\u6743\u91cd \u03b1 \u03b1 \u76f8\u4e58\u5f97\u5230\u4e00\u4e2a\u52a0\u6743\u548c r r r = H * \u03b1^T r = H * \u03b1^T \u7b2c\u56db\u6b65: \u5c06\u7b2c\u4e09\u6b65\u5f97\u5230\u7684\u7ed3\u679c r r \uff0c\u7ecf\u8fc7\u4e00\u4e2a tanh\u200b tanh\u200b \u6fc0\u6d3b\u51fd\u6570\uff0c\u5f97\u5230\u6700\u7ec8\u52a0\u6743\u540e\u7684\u8f93\u5165\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u8868\u793a\uff0c\u4ee5\u65b9\u4fbf\u540e\u7eed\u8ba1\u7b97\u5173\u7cfb\u5206\u7c7b\u7684\u8f93\u51fa h^* = tanh(r) h^* = tanh(r) \u8f93\u51fa\u5c42 (Output Layer) : \u6839\u636e\u4efb\u52a1\u7684\u4e0d\u540c\uff0c\u8f93\u51fa\u5c42\u53ef\u4ee5\u662f\u5206\u7c7b\u5c42\u6216\u56de\u5f52\u5c42. \u5728\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4e2d\uff0c\u8f93\u51fa\u5c42\u901a\u5e38\u662f\u4e00\u4e2a\u5206\u7c7b\u5c42\uff0c\u7528\u4e8e\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7c7b\u578b.","title":"BiLSTM+Attention\u6a21\u578b\u67b6\u6784"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-BiLSTM%2BAttention%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D.html#_2","text":"BiLSTM+Attention\u7b97\u6cd5\u601d\u60f3 \u7531Zhou\u7b49\u4eba\u57282016\u5e74\u7684\u8bba\u6587\u300aAttention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification\u300b\u4e2d\u63d0\u51fa \u8be5\u6a21\u578b\u5e76\u88ab\u5e94\u7528\u4e8e\u5173\u7cfb\u5206\u7c7b\u4efb\u52a1. BiLSTM+Attention\u6a21\u578b\u67b6\u6784 \u8f93\u5165\u5c42 (Input Layer) : \u8f93\u5165\u7684\u662f\u53e5\u5b50\uff0c\u53ef\u4ee5\u662f\u5b57\u7b26\u5e8f\u5217\u4e5f\u53ef\u4ee5\u662f\u5355\u8bcd\u5e8f\u5217\uff0c\u6216\u8005\u4e24\u8005\u76f8\u7ed3\u5408. \u6b64\u5916\uff0c\u5bf9\u4e8e\u53e5\u5b50\u4e2d\u7684\u4e24\u4e2a\u5b9e\u4f53\uff0c\u5206\u522b\u8ba1\u7b97\u5404\u4e2a\u5b57\u7b26\u76f8\u5bf9\u4e8e\u5b9e\u4f53\u7684\u4f4d\u7f6e. \u8bcd\u5d4c\u5165\u5c42 (Embedding Layer) : \u5c06\u6bcf\u4e2a\u5355\u8bcd\u6620\u5c04\u5230\u4e00\u4e2a\u9ad8\u7ef4\u5411\u91cf\u8868\u793a \u53cc\u5411LSTM\u5c42 (BiLSTM Layer) : LSTM\u662f\u4e00\u79cd\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u53ef\u4ee5\u5bf9\u5e8f\u5217\u6570\u636e\u8fdb\u884c\u5efa\u6a21\uff0c\u7528\u4e8e\u4ece\u53e5\u5b50\u4e2d\u63d0\u53d6\u7279\u5f81. \u6ce8\u610f\u529b\u673a\u5236\u5c42 (Attention Layer) : \u6ce8\u610f\u529b\u673a\u5236\u53ef\u4ee5\u8ba9\u6a21\u578b\u96c6\u4e2d\u6ce8\u610f\u529b\u4e8e\u5173\u952e\u8bcd\u6216\u7247\u6bb5\uff0c\u6709\u52a9\u4e8e\u63d0\u9ad8\u6a21\u578b\u7684\u6027\u80fd. \u8f93\u51fa\u5c42 (Output Layer) : \u5728\u5173\u7cfb\u62bd\u53d6\u4efb\u52a1\u4e2d\uff0c\u8f93\u51fa\u5c42\u901a\u5e38\u662f\u4e00\u4e2a\u5206\u7c7b\u5c42\uff0c\u7528\u4e8e\u9884\u6d4b\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7c7b\u578b.","title":"\u5c0f\u7ed3\u603b\u7ed3:"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html","text":"BILSTM+Attention\u6a21\u578b\u6570\u636e\u5904\u7406 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u4e86\u89e3\u672c\u9879\u76ee\u6570\u636e\u6765\u6e90\u3001\u660e\u786e\u6570\u636e\u683c\u5f0f \u638c\u63e1\u6570\u636e\u5904\u7406\u7684\u5de5\u5177\u51fd\u6570\u4ee3\u7801\u5b9e\u73b0. \u9879\u76ee\u6574\u4f53\u4ee3\u7801\u67b6\u6784\u56fe \u00b6 \u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u6570\u636e\u9884\u5904\u7406 \u00b6 \u672c\u9879\u76ee\u4e2d\u5bf9\u6570\u636e\u90e8\u5206\u7684\u9884\u5904\u7406\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6 \u7b2c\u4e8c\u6b65: \u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801 \u7b2c\u4e09\u6b65: \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570 \u7b2c\u56db\u6b65: \u6784\u5efaDataSet\u7c7b\u4e0edataloader\u51fd\u6570 \u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6 \u00b6 \u672c\u6b21\u9879\u76ee\u6570\u636e\u539f\u59cb\u6765\u6e90\u4e3a\u516c\u5f00\u7684\u5343\u8a00\u6570\u636e\u96c6https:// www.luge.ai/#/ \uff0c\u4f7f\u7528\u5f00\u6e90\u6570\u636e\u7684\u597d\u5904\uff0c\u6211\u4eec\u65e0\u9700\u6807\u6ce8\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\uff0c\u672c\u6b21\u9879\u76ee\u7684\u4e3b\u8981\u9700\u8981\u5927\u5bb6\u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u601d\u60f3\u3002 \u672c\u6b21\u9879\u76ee\u6570\u636e\u7684\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/data \u9879\u76ee\u7684\u6570\u636e\u96c6\u5305\u62ec3\u4e2a\u6587\u4ef6: \u7b2c\u4e00\u4e2a\u5173\u7cfb\u7c7b\u578b\u6587\u4ef6: /home/ec2-user/Bilstm_Attention_RE/data/relation2id.txt \u5bfc\u6f14 0 \u6b4c\u624b 1 \u4f5c\u66f2 2 \u4f5c\u8bcd 3 \u4e3b\u6f14 4 relation2id.txt\u4e2d\u5305\u542b5\u4e2a\u7c7b\u522b\u6807\u7b7e, \u6587\u4ef6\u5171\u5206\u4e3a\u4e24\u5217\uff0c\u7b2c\u4e00\u5217\u662f\u7c7b\u522b\u540d\u79f0\uff0c\u7b2c\u4e8c\u5217\u4e3a\u7c7b\u522b\u5e8f\u53f7\uff0c\u4e2d\u95f4\u7a7a\u683c\u7b26\u53f7\u9694\u5f00 \u7b2c\u4e8c\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6: /home/ec2-user/Bilstm_Attention_RE/data/train.txt \u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765 \u9ec4\u5bb6\u5f3a \u6b4c\u624b \u300a\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\u300b\u662f\u9ec4\u5bb6\u5f3a\u7684\u4e00\u9996\u7ca4\u8bed\u6b4c\u66f2\uff0c\u7531\u4f55\u542f\u5f18\u4f5c\u8bcd\uff0c\u9ec4\u5bb6\u5f3a\u4f5c\u66f2\u7f16\u66f2\u5e76\u6f14\u5531\uff0c\u6536\u5f55\u4e8e2007\u5e7408\u670801\u65e5\u53d1\u884c\u7684\u4e13\u8f91\u300a\u5979\u4ed6\u300b\u4e2d \u4f3c\u6c34\u6d41\u5e74 \u8bb8\u6653\u6770 \u4f5c\u66f2 \u4f3c\u6c34\u6d41\u5e74\uff0c\u7531\u8457\u540d\u4f5c\u8bcd\u5bb6\u95eb\u8083\u4f5c\u8bcd\uff0c\u8457\u540d\u97f3\u4e50\u4eba\u8bb8\u6653\u6770\u4f5c\u66f2\uff0c\u5f20\u70e8\u6f14\u5531 \u4ea4\u6d89\u4eba \u671d\u65e5\u7535\u89c6\u53f0 \u51fa\u54c1\u516c\u53f8 \u300a\u4ea4\u6d89\u4eba\u300b\u662f\u65e5\u672c\u671d\u65e5\u7535\u89c6\u53f0\u5236\u4f5c\u5e76\u64ad\u51fa\u76848\u96c6\u60ac\u7591\u63a8\u7406\u7535\u89c6\u5267 \u751f\u6d3b\u542f\u793a\u5f55 \u95eb\u59ae \u4e3b\u6f14 05\u95eb\u59ae\u63a5\u5230\u300a\u751f\u6d3b\u542f\u793a\u5f55\u300b\u4e4b\u540e\uff0c\u5c31\u5411\u738b\u4e3d\u840d\u63a8\u8350\u4e86\u80e1\u6b4c \u5317\u4eac\u5317\u4eac \u6c6a\u5cf0 \u6b4c\u624b \u201d\u6c6a\u5cf0\u6211\u5370\u8c61\u6700\u6df1\u523b\u7684\u662f\u6c6a\u5cf0\u7684\u300a\u5317\u4eac\u5317\u4eac\u300b\u8680\u9aa8\u5531\u6210\u70db\u9aa8 \u5343\u5c81\u60c5\u4eba \u738b\u83f2 \u4e3b\u6f14 \u96be\u602a\u6625\u665a\u628a\u90a3\u82f1\u79d2\u6210\u4e0d\u4e00\u6837\u5f88\u591a\u4eba\u90fd\u4e0d\u77e5\u9053 \u738b\u83f2\u6f14 \u7684\u8fd9\u90e8\u300a\u5343\u5c81\u60c5\u4eba\u300b\uff0c\u662f1993\u5e74\u7684\u4e00\u90e8\u7a7f\u8d8a\u5267 \u5929\u4f7f\u7684\u5492\u8bed \u9b4f\u96ea\u6f2b \u6b4c\u624b \u9b4f\u96ea\u6f2b\u4e13\u8f91\u300a\u5929\u4f7f\u7684\u5492\u8bed\u300b\u7684\u540c\u540d\u4e3b\u6253\u6b4c\u66f2 \u4e0e\u9752\u6625\u6709\u5173\u7684\u65e5\u5b50 \u767d\u767e\u4f55 \u4e3b\u6f14 \u767d\u767e\u4f55\u7684\u5904\u5973\u5ea7\u662f\u300a\u4e0e\u9752\u6625\u6709\u5173\u7684\u65e5\u5b50\u300b\uff0c\u5408\u4f5c\u7684\u6f14\u5458\u662f\u4f5f\u5927\u4e3a\u3001\u9648\u7fbd\u51e1 \u9ad8\u9ad8\u81f3\u4e0a \u79cb\u8a00 \u4f5c\u8bcd \u4e13\u8f91\u66f2\u76ee\u5e8f\u53f7\u3000\u3000\u66f2\u76ee\u4f5c\u8bcd\u4f5c\u66f2\u7f16\u66f21\u9ad8\u9ad8\u81f3\u4e0a\u79cb\u8a00\u79cb\u8a00\u5f6d\u98de2\u9ad8\u9ad8\u81f3\u4e0a\uff08\u4f34\u594f\uff09\u3000\u3000\u79cb\u8a00\u79cb\u8a00\u5f6d\u98de train.txt \u4e2d\u5305\u542b18267\u884c\u6837\u672c, \u6bcf\u884c\u5206\u4e3a4\u5217\u5143\u7d20\uff0c\u5143\u7d20\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u7b2c\u4e00\u5217\u5143\u7d20\u4e3a\u5b9e\u4f531\u3001\u7b2c\u4e8c\u5217\u5143\u7d20\u4e3a\u5b9e\u4f532\u3001\u7b2c\u4e09\u5217\u5143\u7d20\u4e3a\u5173\u7cfb\u7c7b\u578b\u3001\u7b2c\u56db\u5217\u5143\u7d20\u662f\u539f\u59cb\u6587\u672c \u7b2c\u4e09\u4e2a\u6d4b\u8bd5\u6570\u636e\u96c6:/home/ec2-user/Bilstm_Attention_RE/data/test.txt \u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1 \u5b89\u60a6\u6eaa \u4e3b\u6f14 \u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5: \u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7 \u5931\u604b33\u5929 \u767d\u767e\u4f55 \u4e3b\u6f14 2011\u5e74\uff0c\u62c5\u4efb\u7231\u60c5\u7247\u300a\u5931\u604b33\u5929\u300b\u7684\u7f16\u5267\uff0c\u8be5\u7247\u6539\u7f16\u81ea\u9c8d\u9cb8\u9cb8\u7684\u540c\u540d\u5c0f\u8bf4\uff0c\u7531\u6587\u7ae0\u3001\u767d\u767e\u4f55\u5171\u540c\u4e3b\u6f146 \u7231\u4eba\u4eec\u7684\u6545\u4e8b \u88f4\u52c7\u4fca \u4e3b\u6f14 \u300a\u7231\u4eba\u4eec\u7684\u6545\u4e8b\u300b\u662f\u5168\u57fa\u5c1a\u5bfc\u6f14\uff0c\u88f4\u52c7\u4fca\u3001\u674e\u82f1\u7231\u3001\u674e\u6167\u82f1\u7b49\u4e3b\u6f14\u768418\u96c6\u7231\u60c5\u7c7b\u578b\u7684\u7535\u89c6\u5267 \u4e3a\u4f60\u53eb\u597d \u5415\u8587 \u6b4c\u624b \u57fa\u672c\u8d44\u6599\u3000\u3000\u6b4c\u66f2\u540d\u79f0: \u4e3a\u4f60\u53eb\u597d1\u6b4c\u624b: \u5415\u8587\u3000\u3000\u6240\u5c5e\u4e13\u8f91: \u300a\u4f46\u613f\u4eba\u957f\u4e45\u300b\u6b4c\u8bcd\u3000\u3000\u6b4c\u624b: \u5415\u8587\u3000\u3000\u8bcd: \u6e05\u98ce \u66f2: \u5218\u9752 \u5361\u62c9\u662f\u6761\u72d7 \u8def\u5b66\u957f \u5bfc\u6f14 \u4e2a\u4eba\u751f\u6d3b\u674e\u4f73\u7487\u548c\u5bfc\u6f14\u8def\u5b66\u957f\u56e0\u62cd\u6444\u300a\u5361\u62c9\u662f\u6761\u72d7\u300b\u800c\u76f8\u8bc6\uff0c2003\u5e74\u4e24\u4eba\u7ed3\u5a5a \u4e0a\u5e1d\u521b\u9020\u5973\u4eba \u7b80-\u8def\u6613\u65af\u00b7\u7279\u6797\u63d0\u683c\u5357\u7279 \u4e3b\u6f14 \u300a\u4e0a\u5e1d\u521b\u9020\u5973\u4eba\u300b\u662f\u7f57\u6770\u00b7\u74e6\u8fea\u59c6\u6267\u5bfc\u7684\u7c89\u7ea2\u6d6a\u6f2b\u7231\u60c5\u5f71\u7247\uff0c\u7531\u78a7\u59ec\u00b7\u82ad\u94ce\u548c\u7b80-\u8def\u6613\u65af\u00b7\u7279\u6797\u63d0\u683c\u5357\u7279\u53c2\u52a0\u6f14\u51fa \u4e0a\u5e1d\u521b\u9020\u5973\u4eba \u78a7\u59ec\u00b7\u82ad\u94ce \u4e3b\u6f14 \u300a\u4e0a\u5e1d\u521b\u9020\u5973\u4eba\u300b\u662f\u7f57\u6770\u00b7\u74e6\u8fea\u59c6\u6267\u5bfc\u7684\u7c89\u7ea2\u6d6a\u6f2b\u7231\u60c5\u5f71\u7247\uff0c\u7531\u78a7\u59ec\u00b7\u82ad\u94ce\u548c\u7b80-\u8def\u6613\u65af\u00b7\u7279\u6797\u63d0\u683c\u5357\u7279\u53c2\u52a0\u6f14\u51fa test.txt\u4e2d\u5305\u542b5873\u884c\u6837\u672c, \u6bcf\u884c\u5206\u4e3a4\u5217\u5143\u7d20\uff0c\u5143\u7d20\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u7b2c\u4e00\u5217\u5143\u7d20\u4e3a\u5b9e\u4f531\u3001\u7b2c\u4e8c\u5217\u5143\u7d20\u4e3a\u5b9e\u4f532\u3001\u7b2c\u4e09\u5217\u5143\u7d20\u4e3a\u5173\u7cfb\u7c7b\u578b\u3001\u7b2c\u56db\u5217\u5143\u7d20\u662f\u539f\u59cb\u6587\u672c \u7b2c\u4e8c\u6b65:\u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801 \u00b6 Config\u7c7b\u6587\u4ef6\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/config.py config\u6587\u4ef6\u76ee\u7684: \u914d\u7f6e\u9879\u76ee\u5e38\u7528\u53d8\u91cf\uff0c\u4e00\u822c\u8fd9\u4e9b\u53d8\u91cf\u5c5e\u4e8e\u4e0d\u7ecf\u5e38\u6539\u53d8\u7684\uff0c\u6bd4\u5982: \u8bad\u7ec3\u6587\u4ef6\u8def\u5f84\u3001\u6a21\u578b\u8bad\u7ec3\u6b21\u6570\u3001\u6a21\u578b\u8d85\u53c2\u6570\u7b49\u7b49 # coding:utf-8 import torch class Config ( object ): def __init__ ( self ): self . device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) self . train_data_path = \"\u8bad\u7ec3\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u540d\u79f0\" self . test_data_path = \"\u6d4b\u8bd5\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u540d\u79f0\" self . rel_data_path = \"\u5173\u7cfb\u7c7b\u578b\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u540d\u79f0\" self . embedding_dim = 128 self . pos_dim = 32 self . hidden_dim = 200 self . epochs = 50 self . batch_size = 32 self . max_len = 70 self . learning_rate = 1e-3 \u7b2c\u4e09\u6b65: \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570 \u00b6 \u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570\u7684\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/utils/process.py \u9996\u9009\u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 # coding:utf-8 from config import * from itertools import chain from collections import Counter conf = Config () # \u83b7\u53d6\u5173\u7cfb\u7c7b\u578b\u5b57\u5178 relation2id = {} with open ( conf . rel_data_path , 'r' , encoding = 'utf-8' ) as fr : for line in fr . readlines (): word , id = line . rstrip () . split ( ' ' ) if word not in relation2id : relation2id [ word ] = id \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570sent_padding, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def sent_padding ( words , word2id ): \"\"\"\u628a\u53e5\u5b50 words \u8f6c\u4e3a id \u5f62\u5f0f\uff0c\u5e76\u81ea\u52a8\u8865\u5168\u4e3a max_len \u957f\u5ea6\u3002\"\"\" ids = [] for word in words : if word in word2id : ids . append ( word2id [ word ]) else : ids . append ( word2id [ 'UNKNOW' ]) if len ( ids ) >= conf . max_len : return ids [: conf . max_len ] ids . extend ([ word2id [ 'BLANK' ]] * ( conf . max_len - len ( ids ))) return ids \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570pos, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def pos ( num ): ''' \u5c06\u5b9e\u4f53\u4f4d\u7f6e\u4fe1\u606f\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u4e3apos_embedding\u4e0d\u80fd\u51fa\u73b0\u8d1f\u6570 ''' if num < - 70 : return 0 if num >= - 70 and num <= 70 : return num + 70 if num > 70 : return 142 \u6784\u5efa\u7b2c\u4e09\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570position_padding, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def position_padding ( pos_ids ): ''' \"\"\"\u628a pos\u4f4d\u7f6e\u4fe1\u606f \u8f6c\u4e3a id \u5f62\u5f0f\uff0c\u5e76\u81ea\u52a8\u8865\u5168\u4e3a max_len \u957f\u5ea6\u3002\"\"\" ''' pos_ids = [ pos ( id ) for id in pos_ids ] if len ( pos_ids ) >= conf . max_len : return pos_ids [: conf . max_len ] pos_ids . extend ([ 142 ] * ( conf . max_len - len ( pos_ids ))) return pos_ids \u6784\u5efa\u7b2c\u56db\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_train_data, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_txt_data ( data_path ): ''' \u7f16\u7801\u8bad\u7ec3\u3001\u6d4b\u8bd5\u6570\u636e\u96c6\u683c\u5f0f ''' datas = [] labels = [] positionE1 = [] positionE2 = [] entities = [] count_dict = { key : 0 for key , value in relation2id . items ()} with open ( data_path , 'r' , encoding = 'utf-8' ) as tfr : for line in tfr . readlines (): line = line . rstrip () . split ( ' ' , maxsplit = 3 ) if line [ 2 ] not in count_dict : continue if count_dict [ line [ 2 ]] > 2000 : continue else : entities . append ([ line [ 0 ], line [ 1 ]]) sentence = [] index1 = line [ 3 ] . index ( line [ 0 ]) position1 = [] index2 = line [ 3 ] . index ( line [ 1 ]) position2 = [] assert len ( line ) == 4 for i , word in enumerate ( line [ 3 ]): sentence . append ( word ) position1 . append ( i - index1 ) position2 . append ( i - index2 ) datas . append ( sentence ) labels . append ( relation2id [ line [ 2 ]]) positionE1 . append ( position1 ) positionE2 . append ( position2 ) count_dict [ line [ 2 ]] += 1 return datas , labels , positionE1 , positionE2 , entities \u6784\u5efa\u7b2c\u4e94\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_word_id, \u4f4d\u4e8e process.py \u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_word_id ( data_path ): ''' \u6587\u672c\u6570\u5b57\u5316\u8868\u793a\u5904\u7406\uff0c\u5f97\u5230word2id, id2word ''' datas , labels , positionE1 , positionE2 , entities = get_txt_data ( data_path ) data_list = list ( set ( chain ( * datas ))) word2id = { word : id for id , word in enumerate ( data_list )} id2word = { id : word for id , word in enumerate ( data_list )} word2id [ \"BLANK\" ] = len ( word2id ) word2id [ \"UNKNOW\" ] = len ( word2id ) id2word [ len ( id2word )] = \"BLANK\" id2word [ len ( id2word )] = \"UNKNOW\" return word2id , id2word \u7b2c\u56db\u6b65: \u6784\u5efaDataSet\u7c7b\u4ee5\u53caDataloader\u51fd\u6570 \u00b6 \u4ee3\u7801\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/utils/data_loader.py \u9996\u5148\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305 # coding:utf-8 import os from torch.utils.data import DataLoader , Dataset from utils.process import * import torch \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u7c7bMyDataset, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u7c7b. class MyDataset ( Dataset ): def __init__ ( self , data_path ): self . data = get_txt_data ( data_path ) def __len__ ( self ): return len ( self . data [ 0 ]) def __getitem__ ( self , index ): sequence = self . data [ 0 ][ index ] label = int ( self . data [ 1 ][ index ]) positionE1 = self . data [ 2 ][ index ] positionE2 = self . data [ 3 ][ index ] entites = self . data [ 4 ][ index ] return sequence , label , positionE1 , positionE2 , entites \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570collate_fn, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def collate_fn ( datas ): sequences = [ data [ 0 ] for data in datas ] labels = [ data [ 1 ] for data in datas ] positionE1 = [ data [ 2 ] for data in datas ] positionE2 = [ data [ 3 ] for data in datas ] entities = [ data [ 4 ] for data in datas ] word2id , id2word = get_word_id ( conf . train_data_path ) sequences_ids = [] for words in sequences : ids = sent_padding ( words , word2id ) sequences_ids . append ( ids ) positionE1_ids = [] positionE2_ids = [] for pos_ids in positionE1 : pos1_ids = position_padding ( pos_ids ) positionE1_ids . append ( pos1_ids ) for pos_ids in positionE2 : pos2_ids = position_padding ( pos_ids ) positionE2_ids . append ( pos2_ids ) datas_tensor = torch . tensor ( sequences_ids , dtype = torch . long , device = conf . device ) positionE1_tensor = torch . tensor ( positionE1_ids , dtype = torch . long , device = conf . device ) positionE2_tensor = torch . tensor ( positionE2_ids , dtype = torch . long , device = conf . device ) labels_tensor = torch . tensor ( labels , dtype = torch . long , device = conf . device ) return datas_tensor , positionE1_tensor , positionE2_tensor , labels_tensor , sequences , labels , entities \u6784\u5efa\u7b2c\u4e09\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_loader_data, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_loader_data (): train_data = MyDataset ( conf . train_data_path ) train_dataloader = DataLoader ( dataset = train_data , batch_size = conf . batch_size , shuffle = False , collate_fn = collate_fn , drop_last = True ) test_data = MyDataset ( conf . test_data_path ) test_dataloader = DataLoader ( dataset = test_data , batch_size = conf . batch_size , shuffle = False , collate_fn = collate_fn , drop_last = True ) return train_dataloader , test_dataloader \u5c0f\u7ed3\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u8bb2\u89e3\u4e86\u5173\u7cfb\u62bd\u53d6\u6570\u636e\u7ed3\u6784\u5f62\u5f0f, \u5e76\u5b9e\u73b0\u4e86\u82e5\u5e72\u6570\u636e\u5904\u7406\u51fd\u6570, \u8fd9\u4e9b\u51fd\u6570\u4f1a\u5728\u672a\u6765\u7684\u9879\u76ee\u4ee3\u7801\u4e2d\u5e94\u7528.","title":"3.3 BiLSTM+Attention\u6a21\u578b\u7684\u6570\u636e\u9884\u5904\u7406"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#bilstmattention","text":"","title":"BILSTM+Attention\u6a21\u578b\u6570\u636e\u5904\u7406"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_1","text":"\u4e86\u89e3\u672c\u9879\u76ee\u6570\u636e\u6765\u6e90\u3001\u660e\u786e\u6570\u636e\u683c\u5f0f \u638c\u63e1\u6570\u636e\u5904\u7406\u7684\u5de5\u5177\u51fd\u6570\u4ee3\u7801\u5b9e\u73b0.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_2","text":"","title":"\u9879\u76ee\u6574\u4f53\u4ee3\u7801\u67b6\u6784\u56fe"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_3","text":"\u672c\u9879\u76ee\u4e2d\u5bf9\u6570\u636e\u90e8\u5206\u7684\u9884\u5904\u7406\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6 \u7b2c\u4e8c\u6b65: \u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801 \u7b2c\u4e09\u6b65: \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570 \u7b2c\u56db\u6b65: \u6784\u5efaDataSet\u7c7b\u4e0edataloader\u51fd\u6570","title":"\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u6570\u636e\u9884\u5904\u7406"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_4","text":"\u672c\u6b21\u9879\u76ee\u6570\u636e\u539f\u59cb\u6765\u6e90\u4e3a\u516c\u5f00\u7684\u5343\u8a00\u6570\u636e\u96c6https:// www.luge.ai/#/ \uff0c\u4f7f\u7528\u5f00\u6e90\u6570\u636e\u7684\u597d\u5904\uff0c\u6211\u4eec\u65e0\u9700\u6807\u6ce8\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\uff0c\u672c\u6b21\u9879\u76ee\u7684\u4e3b\u8981\u9700\u8981\u5927\u5bb6\u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u601d\u60f3\u3002 \u672c\u6b21\u9879\u76ee\u6570\u636e\u7684\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/data \u9879\u76ee\u7684\u6570\u636e\u96c6\u5305\u62ec3\u4e2a\u6587\u4ef6: \u7b2c\u4e00\u4e2a\u5173\u7cfb\u7c7b\u578b\u6587\u4ef6: /home/ec2-user/Bilstm_Attention_RE/data/relation2id.txt \u5bfc\u6f14 0 \u6b4c\u624b 1 \u4f5c\u66f2 2 \u4f5c\u8bcd 3 \u4e3b\u6f14 4 relation2id.txt\u4e2d\u5305\u542b5\u4e2a\u7c7b\u522b\u6807\u7b7e, \u6587\u4ef6\u5171\u5206\u4e3a\u4e24\u5217\uff0c\u7b2c\u4e00\u5217\u662f\u7c7b\u522b\u540d\u79f0\uff0c\u7b2c\u4e8c\u5217\u4e3a\u7c7b\u522b\u5e8f\u53f7\uff0c\u4e2d\u95f4\u7a7a\u683c\u7b26\u53f7\u9694\u5f00 \u7b2c\u4e8c\u4e2a\u8bad\u7ec3\u6570\u636e\u96c6: /home/ec2-user/Bilstm_Attention_RE/data/train.txt \u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765 \u9ec4\u5bb6\u5f3a \u6b4c\u624b \u300a\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\u300b\u662f\u9ec4\u5bb6\u5f3a\u7684\u4e00\u9996\u7ca4\u8bed\u6b4c\u66f2\uff0c\u7531\u4f55\u542f\u5f18\u4f5c\u8bcd\uff0c\u9ec4\u5bb6\u5f3a\u4f5c\u66f2\u7f16\u66f2\u5e76\u6f14\u5531\uff0c\u6536\u5f55\u4e8e2007\u5e7408\u670801\u65e5\u53d1\u884c\u7684\u4e13\u8f91\u300a\u5979\u4ed6\u300b\u4e2d \u4f3c\u6c34\u6d41\u5e74 \u8bb8\u6653\u6770 \u4f5c\u66f2 \u4f3c\u6c34\u6d41\u5e74\uff0c\u7531\u8457\u540d\u4f5c\u8bcd\u5bb6\u95eb\u8083\u4f5c\u8bcd\uff0c\u8457\u540d\u97f3\u4e50\u4eba\u8bb8\u6653\u6770\u4f5c\u66f2\uff0c\u5f20\u70e8\u6f14\u5531 \u4ea4\u6d89\u4eba \u671d\u65e5\u7535\u89c6\u53f0 \u51fa\u54c1\u516c\u53f8 \u300a\u4ea4\u6d89\u4eba\u300b\u662f\u65e5\u672c\u671d\u65e5\u7535\u89c6\u53f0\u5236\u4f5c\u5e76\u64ad\u51fa\u76848\u96c6\u60ac\u7591\u63a8\u7406\u7535\u89c6\u5267 \u751f\u6d3b\u542f\u793a\u5f55 \u95eb\u59ae \u4e3b\u6f14 05\u95eb\u59ae\u63a5\u5230\u300a\u751f\u6d3b\u542f\u793a\u5f55\u300b\u4e4b\u540e\uff0c\u5c31\u5411\u738b\u4e3d\u840d\u63a8\u8350\u4e86\u80e1\u6b4c \u5317\u4eac\u5317\u4eac \u6c6a\u5cf0 \u6b4c\u624b \u201d\u6c6a\u5cf0\u6211\u5370\u8c61\u6700\u6df1\u523b\u7684\u662f\u6c6a\u5cf0\u7684\u300a\u5317\u4eac\u5317\u4eac\u300b\u8680\u9aa8\u5531\u6210\u70db\u9aa8 \u5343\u5c81\u60c5\u4eba \u738b\u83f2 \u4e3b\u6f14 \u96be\u602a\u6625\u665a\u628a\u90a3\u82f1\u79d2\u6210\u4e0d\u4e00\u6837\u5f88\u591a\u4eba\u90fd\u4e0d\u77e5\u9053 \u738b\u83f2\u6f14 \u7684\u8fd9\u90e8\u300a\u5343\u5c81\u60c5\u4eba\u300b\uff0c\u662f1993\u5e74\u7684\u4e00\u90e8\u7a7f\u8d8a\u5267 \u5929\u4f7f\u7684\u5492\u8bed \u9b4f\u96ea\u6f2b \u6b4c\u624b \u9b4f\u96ea\u6f2b\u4e13\u8f91\u300a\u5929\u4f7f\u7684\u5492\u8bed\u300b\u7684\u540c\u540d\u4e3b\u6253\u6b4c\u66f2 \u4e0e\u9752\u6625\u6709\u5173\u7684\u65e5\u5b50 \u767d\u767e\u4f55 \u4e3b\u6f14 \u767d\u767e\u4f55\u7684\u5904\u5973\u5ea7\u662f\u300a\u4e0e\u9752\u6625\u6709\u5173\u7684\u65e5\u5b50\u300b\uff0c\u5408\u4f5c\u7684\u6f14\u5458\u662f\u4f5f\u5927\u4e3a\u3001\u9648\u7fbd\u51e1 \u9ad8\u9ad8\u81f3\u4e0a \u79cb\u8a00 \u4f5c\u8bcd \u4e13\u8f91\u66f2\u76ee\u5e8f\u53f7\u3000\u3000\u66f2\u76ee\u4f5c\u8bcd\u4f5c\u66f2\u7f16\u66f21\u9ad8\u9ad8\u81f3\u4e0a\u79cb\u8a00\u79cb\u8a00\u5f6d\u98de2\u9ad8\u9ad8\u81f3\u4e0a\uff08\u4f34\u594f\uff09\u3000\u3000\u79cb\u8a00\u79cb\u8a00\u5f6d\u98de train.txt \u4e2d\u5305\u542b18267\u884c\u6837\u672c, \u6bcf\u884c\u5206\u4e3a4\u5217\u5143\u7d20\uff0c\u5143\u7d20\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u7b2c\u4e00\u5217\u5143\u7d20\u4e3a\u5b9e\u4f531\u3001\u7b2c\u4e8c\u5217\u5143\u7d20\u4e3a\u5b9e\u4f532\u3001\u7b2c\u4e09\u5217\u5143\u7d20\u4e3a\u5173\u7cfb\u7c7b\u578b\u3001\u7b2c\u56db\u5217\u5143\u7d20\u662f\u539f\u59cb\u6587\u672c \u7b2c\u4e09\u4e2a\u6d4b\u8bd5\u6570\u636e\u96c6:/home/ec2-user/Bilstm_Attention_RE/data/test.txt \u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1 \u5b89\u60a6\u6eaa \u4e3b\u6f14 \u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5: \u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7 \u5931\u604b33\u5929 \u767d\u767e\u4f55 \u4e3b\u6f14 2011\u5e74\uff0c\u62c5\u4efb\u7231\u60c5\u7247\u300a\u5931\u604b33\u5929\u300b\u7684\u7f16\u5267\uff0c\u8be5\u7247\u6539\u7f16\u81ea\u9c8d\u9cb8\u9cb8\u7684\u540c\u540d\u5c0f\u8bf4\uff0c\u7531\u6587\u7ae0\u3001\u767d\u767e\u4f55\u5171\u540c\u4e3b\u6f146 \u7231\u4eba\u4eec\u7684\u6545\u4e8b \u88f4\u52c7\u4fca \u4e3b\u6f14 \u300a\u7231\u4eba\u4eec\u7684\u6545\u4e8b\u300b\u662f\u5168\u57fa\u5c1a\u5bfc\u6f14\uff0c\u88f4\u52c7\u4fca\u3001\u674e\u82f1\u7231\u3001\u674e\u6167\u82f1\u7b49\u4e3b\u6f14\u768418\u96c6\u7231\u60c5\u7c7b\u578b\u7684\u7535\u89c6\u5267 \u4e3a\u4f60\u53eb\u597d \u5415\u8587 \u6b4c\u624b \u57fa\u672c\u8d44\u6599\u3000\u3000\u6b4c\u66f2\u540d\u79f0: \u4e3a\u4f60\u53eb\u597d1\u6b4c\u624b: \u5415\u8587\u3000\u3000\u6240\u5c5e\u4e13\u8f91: \u300a\u4f46\u613f\u4eba\u957f\u4e45\u300b\u6b4c\u8bcd\u3000\u3000\u6b4c\u624b: \u5415\u8587\u3000\u3000\u8bcd: \u6e05\u98ce \u66f2: \u5218\u9752 \u5361\u62c9\u662f\u6761\u72d7 \u8def\u5b66\u957f \u5bfc\u6f14 \u4e2a\u4eba\u751f\u6d3b\u674e\u4f73\u7487\u548c\u5bfc\u6f14\u8def\u5b66\u957f\u56e0\u62cd\u6444\u300a\u5361\u62c9\u662f\u6761\u72d7\u300b\u800c\u76f8\u8bc6\uff0c2003\u5e74\u4e24\u4eba\u7ed3\u5a5a \u4e0a\u5e1d\u521b\u9020\u5973\u4eba \u7b80-\u8def\u6613\u65af\u00b7\u7279\u6797\u63d0\u683c\u5357\u7279 \u4e3b\u6f14 \u300a\u4e0a\u5e1d\u521b\u9020\u5973\u4eba\u300b\u662f\u7f57\u6770\u00b7\u74e6\u8fea\u59c6\u6267\u5bfc\u7684\u7c89\u7ea2\u6d6a\u6f2b\u7231\u60c5\u5f71\u7247\uff0c\u7531\u78a7\u59ec\u00b7\u82ad\u94ce\u548c\u7b80-\u8def\u6613\u65af\u00b7\u7279\u6797\u63d0\u683c\u5357\u7279\u53c2\u52a0\u6f14\u51fa \u4e0a\u5e1d\u521b\u9020\u5973\u4eba \u78a7\u59ec\u00b7\u82ad\u94ce \u4e3b\u6f14 \u300a\u4e0a\u5e1d\u521b\u9020\u5973\u4eba\u300b\u662f\u7f57\u6770\u00b7\u74e6\u8fea\u59c6\u6267\u5bfc\u7684\u7c89\u7ea2\u6d6a\u6f2b\u7231\u60c5\u5f71\u7247\uff0c\u7531\u78a7\u59ec\u00b7\u82ad\u94ce\u548c\u7b80-\u8def\u6613\u65af\u00b7\u7279\u6797\u63d0\u683c\u5357\u7279\u53c2\u52a0\u6f14\u51fa test.txt\u4e2d\u5305\u542b5873\u884c\u6837\u672c, \u6bcf\u884c\u5206\u4e3a4\u5217\u5143\u7d20\uff0c\u5143\u7d20\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u7b2c\u4e00\u5217\u5143\u7d20\u4e3a\u5b9e\u4f531\u3001\u7b2c\u4e8c\u5217\u5143\u7d20\u4e3a\u5b9e\u4f532\u3001\u7b2c\u4e09\u5217\u5143\u7d20\u4e3a\u5173\u7cfb\u7c7b\u578b\u3001\u7b2c\u56db\u5217\u5143\u7d20\u662f\u539f\u59cb\u6587\u672c","title":"\u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#config","text":"Config\u7c7b\u6587\u4ef6\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/config.py config\u6587\u4ef6\u76ee\u7684: \u914d\u7f6e\u9879\u76ee\u5e38\u7528\u53d8\u91cf\uff0c\u4e00\u822c\u8fd9\u4e9b\u53d8\u91cf\u5c5e\u4e8e\u4e0d\u7ecf\u5e38\u6539\u53d8\u7684\uff0c\u6bd4\u5982: \u8bad\u7ec3\u6587\u4ef6\u8def\u5f84\u3001\u6a21\u578b\u8bad\u7ec3\u6b21\u6570\u3001\u6a21\u578b\u8d85\u53c2\u6570\u7b49\u7b49 # coding:utf-8 import torch class Config ( object ): def __init__ ( self ): self . device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) self . train_data_path = \"\u8bad\u7ec3\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u540d\u79f0\" self . test_data_path = \"\u6d4b\u8bd5\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u540d\u79f0\" self . rel_data_path = \"\u5173\u7cfb\u7c7b\u578b\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u540d\u79f0\" self . embedding_dim = 128 self . pos_dim = 32 self . hidden_dim = 200 self . epochs = 50 self . batch_size = 32 self . max_len = 70 self . learning_rate = 1e-3","title":"\u7b2c\u4e8c\u6b65:\u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_5","text":"\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570\u7684\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/utils/process.py \u9996\u9009\u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 # coding:utf-8 from config import * from itertools import chain from collections import Counter conf = Config () # \u83b7\u53d6\u5173\u7cfb\u7c7b\u578b\u5b57\u5178 relation2id = {} with open ( conf . rel_data_path , 'r' , encoding = 'utf-8' ) as fr : for line in fr . readlines (): word , id = line . rstrip () . split ( ' ' ) if word not in relation2id : relation2id [ word ] = id \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570sent_padding, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def sent_padding ( words , word2id ): \"\"\"\u628a\u53e5\u5b50 words \u8f6c\u4e3a id \u5f62\u5f0f\uff0c\u5e76\u81ea\u52a8\u8865\u5168\u4e3a max_len \u957f\u5ea6\u3002\"\"\" ids = [] for word in words : if word in word2id : ids . append ( word2id [ word ]) else : ids . append ( word2id [ 'UNKNOW' ]) if len ( ids ) >= conf . max_len : return ids [: conf . max_len ] ids . extend ([ word2id [ 'BLANK' ]] * ( conf . max_len - len ( ids ))) return ids \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570pos, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def pos ( num ): ''' \u5c06\u5b9e\u4f53\u4f4d\u7f6e\u4fe1\u606f\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u4e3apos_embedding\u4e0d\u80fd\u51fa\u73b0\u8d1f\u6570 ''' if num < - 70 : return 0 if num >= - 70 and num <= 70 : return num + 70 if num > 70 : return 142 \u6784\u5efa\u7b2c\u4e09\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570position_padding, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def position_padding ( pos_ids ): ''' \"\"\"\u628a pos\u4f4d\u7f6e\u4fe1\u606f \u8f6c\u4e3a id \u5f62\u5f0f\uff0c\u5e76\u81ea\u52a8\u8865\u5168\u4e3a max_len \u957f\u5ea6\u3002\"\"\" ''' pos_ids = [ pos ( id ) for id in pos_ids ] if len ( pos_ids ) >= conf . max_len : return pos_ids [: conf . max_len ] pos_ids . extend ([ 142 ] * ( conf . max_len - len ( pos_ids ))) return pos_ids \u6784\u5efa\u7b2c\u56db\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_train_data, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_txt_data ( data_path ): ''' \u7f16\u7801\u8bad\u7ec3\u3001\u6d4b\u8bd5\u6570\u636e\u96c6\u683c\u5f0f ''' datas = [] labels = [] positionE1 = [] positionE2 = [] entities = [] count_dict = { key : 0 for key , value in relation2id . items ()} with open ( data_path , 'r' , encoding = 'utf-8' ) as tfr : for line in tfr . readlines (): line = line . rstrip () . split ( ' ' , maxsplit = 3 ) if line [ 2 ] not in count_dict : continue if count_dict [ line [ 2 ]] > 2000 : continue else : entities . append ([ line [ 0 ], line [ 1 ]]) sentence = [] index1 = line [ 3 ] . index ( line [ 0 ]) position1 = [] index2 = line [ 3 ] . index ( line [ 1 ]) position2 = [] assert len ( line ) == 4 for i , word in enumerate ( line [ 3 ]): sentence . append ( word ) position1 . append ( i - index1 ) position2 . append ( i - index2 ) datas . append ( sentence ) labels . append ( relation2id [ line [ 2 ]]) positionE1 . append ( position1 ) positionE2 . append ( position2 ) count_dict [ line [ 2 ]] += 1 return datas , labels , positionE1 , positionE2 , entities \u6784\u5efa\u7b2c\u4e94\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_word_id, \u4f4d\u4e8e process.py \u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_word_id ( data_path ): ''' \u6587\u672c\u6570\u5b57\u5316\u8868\u793a\u5904\u7406\uff0c\u5f97\u5230word2id, id2word ''' datas , labels , positionE1 , positionE2 , entities = get_txt_data ( data_path ) data_list = list ( set ( chain ( * datas ))) word2id = { word : id for id , word in enumerate ( data_list )} id2word = { id : word for id , word in enumerate ( data_list )} word2id [ \"BLANK\" ] = len ( word2id ) word2id [ \"UNKNOW\" ] = len ( word2id ) id2word [ len ( id2word )] = \"BLANK\" id2word [ len ( id2word )] = \"UNKNOW\" return word2id , id2word","title":"\u7b2c\u4e09\u6b65:  \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#datasetdataloader","text":"\u4ee3\u7801\u8def\u5f84\u4e3a: /home/ec2-user/Bilstm_Attention_RE/utils/data_loader.py \u9996\u5148\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305 # coding:utf-8 import os from torch.utils.data import DataLoader , Dataset from utils.process import * import torch \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u7c7bMyDataset, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u7c7b. class MyDataset ( Dataset ): def __init__ ( self , data_path ): self . data = get_txt_data ( data_path ) def __len__ ( self ): return len ( self . data [ 0 ]) def __getitem__ ( self , index ): sequence = self . data [ 0 ][ index ] label = int ( self . data [ 1 ][ index ]) positionE1 = self . data [ 2 ][ index ] positionE2 = self . data [ 3 ][ index ] entites = self . data [ 4 ][ index ] return sequence , label , positionE1 , positionE2 , entites \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570collate_fn, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def collate_fn ( datas ): sequences = [ data [ 0 ] for data in datas ] labels = [ data [ 1 ] for data in datas ] positionE1 = [ data [ 2 ] for data in datas ] positionE2 = [ data [ 3 ] for data in datas ] entities = [ data [ 4 ] for data in datas ] word2id , id2word = get_word_id ( conf . train_data_path ) sequences_ids = [] for words in sequences : ids = sent_padding ( words , word2id ) sequences_ids . append ( ids ) positionE1_ids = [] positionE2_ids = [] for pos_ids in positionE1 : pos1_ids = position_padding ( pos_ids ) positionE1_ids . append ( pos1_ids ) for pos_ids in positionE2 : pos2_ids = position_padding ( pos_ids ) positionE2_ids . append ( pos2_ids ) datas_tensor = torch . tensor ( sequences_ids , dtype = torch . long , device = conf . device ) positionE1_tensor = torch . tensor ( positionE1_ids , dtype = torch . long , device = conf . device ) positionE2_tensor = torch . tensor ( positionE2_ids , dtype = torch . long , device = conf . device ) labels_tensor = torch . tensor ( labels , dtype = torch . long , device = conf . device ) return datas_tensor , positionE1_tensor , positionE2_tensor , labels_tensor , sequences , labels , entities \u6784\u5efa\u7b2c\u4e09\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_loader_data, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_loader_data (): train_data = MyDataset ( conf . train_data_path ) train_dataloader = DataLoader ( dataset = train_data , batch_size = conf . batch_size , shuffle = False , collate_fn = collate_fn , drop_last = True ) test_data = MyDataset ( conf . test_data_path ) test_dataloader = DataLoader ( dataset = test_data , batch_size = conf . batch_size , shuffle = False , collate_fn = collate_fn , drop_last = True ) return train_dataloader , test_dataloader","title":"\u7b2c\u56db\u6b65: \u6784\u5efaDataSet\u7c7b\u4ee5\u53caDataloader\u51fd\u6570"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86.html#_6","text":"\u672c\u5c0f\u8282\u8bb2\u89e3\u4e86\u5173\u7cfb\u62bd\u53d6\u6570\u636e\u7ed3\u6784\u5f62\u5f0f, \u5e76\u5b9e\u73b0\u4e86\u82e5\u5e72\u6570\u636e\u5904\u7406\u51fd\u6570, \u8fd9\u4e9b\u51fd\u6570\u4f1a\u5728\u672a\u6765\u7684\u9879\u76ee\u4ee3\u7801\u4e2d\u5e94\u7528.","title":"\u5c0f\u7ed3\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html","text":"BiLSTM+Attention\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\u642d\u5efa \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1\u57fa\u4e8e BiLSTM+Attention \u6a21\u578b\u642d\u5efa\u7684\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u6a21\u578b\u7684\u8bad\u7ec3\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0. BiLSTM+Attention\u6a21\u578b\u642d\u5efa \u00b6 \u672c\u9879\u76ee\u4e2dBiLSTN+Attention\u6a21\u578b\u642d\u5efa\u7684\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u8bad\u7ec3\u51fd\u6570 \u7b2c\u4e09\u6b65: \u7f16\u5199\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0. \u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u00b6 \u6784\u5efaBiLSTM_ATT\u6a21\u578b\u7c7b \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Bilstm_Attention_RE/model/bilstm_atten.py # coding:utf8 import torch import torch.nn as nn import torch.nn.functional as F class BiLSTM_ATT ( nn . Module ): def __init__ ( self , conf , vocab_size , pos_size , tag_size ): super ( BiLSTM_ATT , self ) . __init__ () self . batch = conf . batch_size self . device = conf . device self . vocab_size = vocab_size self . embedding_dim = conf . embedding_dim self . hidden_dim = conf . hidden_dim self . pos_size = pos_size self . pos_dim = conf . pos_dim self . tag_size = tag_size self . word_embeds = nn . Embedding ( self . vocab_size , self . embedding_dim ) self . pos1_embeds = nn . Embedding ( self . pos_size , self . pos_dim ) self . pos2_embeds = nn . Embedding ( self . pos_size , self . pos_dim ) self . lstm = nn . LSTM ( input_size = self . embedding_dim + self . pos_dim * 2 , hidden_size = self . hidden_dim // 2 , num_layers = 1 , bidirectional = True ) self . linear = nn . Linear ( self . hidden_dim , self . tag_size ) self . dropout_emb = nn . Dropout ( p = 0.2 ) self . dropout_lstm = nn . Dropout ( p = 0.2 ) self . dropout_att = nn . Dropout ( p = 0.2 ) self . att_weight = nn . Parameter ( torch . randn ( self . batch , 1 , self . hidden_dim ) . to ( self . device )) def init_hidden_lstm ( self ): return ( torch . randn ( 2 , self . batch , self . hidden_dim // 2 ) . to ( self . device ), torch . randn ( 2 , self . batch , self . hidden_dim // 2 ) . to ( self . device )) def attention ( self , H ): M = F . tanh ( H ) a = F . softmax ( torch . bmm ( self . att_weight , M ), dim =- 1 ) a = torch . transpose ( a , 1 , 2 ) return torch . bmm ( H , a ) def forward ( self , sentence , pos1 , pos2 ): init_hidden = self . init_hidden_lstm () embeds = torch . cat (( self . word_embeds ( sentence ), self . pos1_embeds ( pos1 ), self . pos2_embeds ( pos2 )), 2 ) embeds = self . dropout_emb ( embeds ) embeds = torch . transpose ( embeds , 0 , 1 ) lstm_out , lstm_hidden = self . lstm ( embeds , init_hidden ) lstm_out = lstm_out . permute ( 1 , 2 , 0 ) lstm_out = self . dropout_lstm ( lstm_out ) att_out = F . tanh ( self . attention ( lstm_out )) att_out = self . dropout_att ( att_out ) . squeeze () result = self . linear ( att_out ) return result \u7b2c\u4e8c\u6b65: \u7f16\u5199\u8bad\u7ec3\u51fd\u6570 \u00b6 \u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570train.py \u4ee3\u7801\u4f4d\u7f6e: /home/ec2-user/Bilstm_Attention_RE/train.py # coding:utf-8 from model.bilstm_atten import * from utils.data_loader import * from utils.process import * import torch import torch.nn as nn import torch.optim as optim import time from tqdm import tqdm def train ( conf , vocab_size , pos_size , tag_size ): # \u52a0\u8f7d\u6570\u636e\u96c6 train_iter , test_iter = get_loader_data () print ( '\u8bad\u7ec3\u6570\u636e\u96c6\u957f\u5ea6' , len ( train_iter )) # \u5b9e\u4f8b\u5316Bilstm+attention\u6a21\u578b ba_model = BiLSTM_ATT ( conf , vocab_size , pos_size , tag_size ) . to ( conf . device ) print ( ba_model ) # \u5b9e\u4f8b\u5316\u4f18\u5316\u5668 optimizer = optim . Adam ( ba_model . parameters (), lr = conf . learning_rate ) # \u5b9e\u4f8b\u5316\u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () # \u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 # \u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b\u53c2\u6570 start_time = time . time () train_loss = 0 # \u5df2\u7ecf\u8bad\u7ec3\u6837\u672c\u7684\u635f\u5931 train_acc = 0 # \u5df2\u7ecf\u8bad\u7ec3\u6837\u672c\u7684\u51c6\u786e\u7387 total_iter_num = 0 # \u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570 total_sample = 0 # \u5df2\u7ecf\u8bad\u7ec3\u7684\u6837\u672c\u6570 # \u5f00\u59cb\u6a21\u578b\u7684\u8bad\u7ec3 for epoch in range ( conf . epochs ): for sentence , pos1 , pos2 , label , _ , _ , _ in tqdm ( train_iter ): # \u5c06\u6570\u636e\u8f93\u5165\u6a21\u578b output = ba_model ( sentence , pos1 , pos2 ) # \u8ba1\u7b97\u635f\u5931 loss = criterion ( output , label ) # \u68af\u5ea6\u6e05\u96f6 optimizer . zero_grad () # \u53cd\u5411\u4f20\u64ad loss . backward () # \u68af\u5ea6\u66f4\u65b0 optimizer . step () # \u8ba1\u7b97\u603b\u635f\u5931 total_iter_num += 1 train_loss += loss . item () # \u8ba1\u7b97\u603b\u51c6\u786e\u7387 train_acc = train_acc + sum ( torch . argmax ( output , dim = 1 ) == label ) . item () total_sample = total_sample + label . size ()[ 0 ] # print(f'total_sample--->{total_sample}') # \u6bcf25\u6b21\u8bad\u7ec3\uff0c\u6253\u5370\u65e5\u5fd7 if total_iter_num % 25 == 0 : tmploss = train_loss / total_iter_num tmpacc = train_acc / total_sample end_time = time . time () print ( '\u8f6e\u6b21: %d , \u635f\u5931: %.6f , \u65f6\u95f4: %d , \u51c6\u786e\u7387: %.3f ' % ( epoch + 1 , tmploss , end_time - start_time , tmpacc )) if epoch % 10 == 0 : torch . save ( ba_model . state_dict (), './save_model/20230228_new_model_ %d .bin' % epoch ) if __name__ == '__main__' : word2id , id2word = get_word_id ( conf . train_data_path ) vocab_size = len ( word2id ) print ( vocab_size ) pos_size = 143 tag_size = len ( relation2id ) train ( conf , vocab_size , pos_size , tag_size ) \u6a21\u578b\u8bad\u7ec3\u7ed3\u679c\u5c55\u793a: \u7ed3\u8bba: BiLSTM+Attention\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u6700\u7ec8\u8868\u73b0\u662fACC:80% \u7b2c\u4e09\u6b65: \u7f16\u5199\u6a21\u578b\u9884\u6d4b\u51fd\u6570 \u00b6 \u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u968f\u673a\u62bd\u53d6\u6587\u672c\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6 \u4ee3\u7801\u4f4d\u7f6e: /home/ec2-user/Bilstm_Attention_RE/predict.py # coding:utf-8 from model.bilstm_atten import * from utils.data_loader import * from utils.process import * import torch from tqdm import tqdm # \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6 conf = Config () # \u83b7\u53d6\u6216\u5b9a\u4e49\u6a21\u578b\u53c2\u6570 word2id , id2word = get_word_id ( conf . train_data_path ) vocab_size = len ( word2id ) pos_size = 143 tag_size = len ( relation2id ) print ( tag_size ) # \u83b7\u53d6id2relation\u7684\u6620\u5c04 id2relation = { int ( value ): key for key , value in relation2id . items ()} # \u52a0\u8f7d\u6570\u636e\u96c6 _ , test_iter = get_loader_data () # \u5b9e\u4f8b\u5316Bilstm+attention\u6a21\u578b ba_model = BiLSTM_ATT ( conf , vocab_size , pos_size , tag_size ) . to ( conf . device ) # \u52a0\u8f7d\u6a21\u578b ba_model . load_state_dict ( torch . load ( './save_model/20230228_new_model_40.bin' )) # \u5f00\u59cb\u6a21\u578b\u7684\u9884\u6d4b def model2predict (): ba_model . eval () with torch . no_grad (): for sentence , pos1 , pos2 , label , original_sequences , original_labels , entites in tqdm ( test_iter ): print ( label ) print ( original_labels ) print ( 'original_sequences' , len ( original_sequences )) print ( 'original_labels' , len ( original_labels )) # \u5c06\u6570\u636e\u8f93\u5165\u6a21\u578b output = ba_model ( sentence , pos1 , pos2 ) # \u5b9e\u73b0\u6a21\u578b\u7684\u9884\u6d4b predict_ids = torch . argmax ( output , dim = 1 ) . tolist () for i in range ( len ( original_sequences )): original_sequence = '' . join ( original_sequences [ i ]) original_label = id2relation [ original_labels [ i ]] entity = entites [ i ] predict_label = id2relation [ predict_ids [ i ]] print ( '\u539f\u59cb\u53e5\u5b50: ' , original_sequence ) print ( '\u539f\u59cb\u5173\u7cfb\u7c7b\u522b: ' , original_label ) print ( '\u5b9e\u4f53\u5217\u8868' , entity ) print ( '\u6a21\u578b\u9884\u6d4b\u7684\u5173\u7cfb\u7c7b\u522b: ' , predict_label ) print ( '*' * 80 ) if __name__ == '__main__' : model2predict () \u9884\u6d4b\u7ed3\u679c\u5c55\u793a: \u5c0f\u8282\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u5b9e\u73b0\u4e86\u57fa\u4e8eBiLSTM+Attention\u6a21\u578b\u7684\u6784\u5efa, \u5e76\u5b8c\u6210\u4e86\u8bad\u7ec3\u548c\u6d4b\u8bd5\u8bc4\u4f30.","title":"3.4 BiLSTM+Attention\u6a21\u578b\u7684\u642d\u5efa\u4e0e\u8bad\u7ec3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#bilstmattention","text":"","title":"BiLSTM+Attention\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\u642d\u5efa"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_1","text":"\u638c\u63e1\u57fa\u4e8e BiLSTM+Attention \u6a21\u578b\u642d\u5efa\u7684\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u6a21\u578b\u7684\u8bad\u7ec3\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#bilstmattention_1","text":"\u672c\u9879\u76ee\u4e2dBiLSTN+Attention\u6a21\u578b\u642d\u5efa\u7684\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u8bad\u7ec3\u51fd\u6570 \u7b2c\u4e09\u6b65: \u7f16\u5199\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0.","title":"BiLSTM+Attention\u6a21\u578b\u642d\u5efa"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_2","text":"\u6784\u5efaBiLSTM_ATT\u6a21\u578b\u7c7b \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Bilstm_Attention_RE/model/bilstm_atten.py # coding:utf8 import torch import torch.nn as nn import torch.nn.functional as F class BiLSTM_ATT ( nn . Module ): def __init__ ( self , conf , vocab_size , pos_size , tag_size ): super ( BiLSTM_ATT , self ) . __init__ () self . batch = conf . batch_size self . device = conf . device self . vocab_size = vocab_size self . embedding_dim = conf . embedding_dim self . hidden_dim = conf . hidden_dim self . pos_size = pos_size self . pos_dim = conf . pos_dim self . tag_size = tag_size self . word_embeds = nn . Embedding ( self . vocab_size , self . embedding_dim ) self . pos1_embeds = nn . Embedding ( self . pos_size , self . pos_dim ) self . pos2_embeds = nn . Embedding ( self . pos_size , self . pos_dim ) self . lstm = nn . LSTM ( input_size = self . embedding_dim + self . pos_dim * 2 , hidden_size = self . hidden_dim // 2 , num_layers = 1 , bidirectional = True ) self . linear = nn . Linear ( self . hidden_dim , self . tag_size ) self . dropout_emb = nn . Dropout ( p = 0.2 ) self . dropout_lstm = nn . Dropout ( p = 0.2 ) self . dropout_att = nn . Dropout ( p = 0.2 ) self . att_weight = nn . Parameter ( torch . randn ( self . batch , 1 , self . hidden_dim ) . to ( self . device )) def init_hidden_lstm ( self ): return ( torch . randn ( 2 , self . batch , self . hidden_dim // 2 ) . to ( self . device ), torch . randn ( 2 , self . batch , self . hidden_dim // 2 ) . to ( self . device )) def attention ( self , H ): M = F . tanh ( H ) a = F . softmax ( torch . bmm ( self . att_weight , M ), dim =- 1 ) a = torch . transpose ( a , 1 , 2 ) return torch . bmm ( H , a ) def forward ( self , sentence , pos1 , pos2 ): init_hidden = self . init_hidden_lstm () embeds = torch . cat (( self . word_embeds ( sentence ), self . pos1_embeds ( pos1 ), self . pos2_embeds ( pos2 )), 2 ) embeds = self . dropout_emb ( embeds ) embeds = torch . transpose ( embeds , 0 , 1 ) lstm_out , lstm_hidden = self . lstm ( embeds , init_hidden ) lstm_out = lstm_out . permute ( 1 , 2 , 0 ) lstm_out = self . dropout_lstm ( lstm_out ) att_out = F . tanh ( self . attention ( lstm_out )) att_out = self . dropout_att ( att_out ) . squeeze () result = self . linear ( att_out ) return result","title":"\u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_3","text":"\u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570train.py \u4ee3\u7801\u4f4d\u7f6e: /home/ec2-user/Bilstm_Attention_RE/train.py # coding:utf-8 from model.bilstm_atten import * from utils.data_loader import * from utils.process import * import torch import torch.nn as nn import torch.optim as optim import time from tqdm import tqdm def train ( conf , vocab_size , pos_size , tag_size ): # \u52a0\u8f7d\u6570\u636e\u96c6 train_iter , test_iter = get_loader_data () print ( '\u8bad\u7ec3\u6570\u636e\u96c6\u957f\u5ea6' , len ( train_iter )) # \u5b9e\u4f8b\u5316Bilstm+attention\u6a21\u578b ba_model = BiLSTM_ATT ( conf , vocab_size , pos_size , tag_size ) . to ( conf . device ) print ( ba_model ) # \u5b9e\u4f8b\u5316\u4f18\u5316\u5668 optimizer = optim . Adam ( ba_model . parameters (), lr = conf . learning_rate ) # \u5b9e\u4f8b\u5316\u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () # \u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 # \u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b\u53c2\u6570 start_time = time . time () train_loss = 0 # \u5df2\u7ecf\u8bad\u7ec3\u6837\u672c\u7684\u635f\u5931 train_acc = 0 # \u5df2\u7ecf\u8bad\u7ec3\u6837\u672c\u7684\u51c6\u786e\u7387 total_iter_num = 0 # \u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570 total_sample = 0 # \u5df2\u7ecf\u8bad\u7ec3\u7684\u6837\u672c\u6570 # \u5f00\u59cb\u6a21\u578b\u7684\u8bad\u7ec3 for epoch in range ( conf . epochs ): for sentence , pos1 , pos2 , label , _ , _ , _ in tqdm ( train_iter ): # \u5c06\u6570\u636e\u8f93\u5165\u6a21\u578b output = ba_model ( sentence , pos1 , pos2 ) # \u8ba1\u7b97\u635f\u5931 loss = criterion ( output , label ) # \u68af\u5ea6\u6e05\u96f6 optimizer . zero_grad () # \u53cd\u5411\u4f20\u64ad loss . backward () # \u68af\u5ea6\u66f4\u65b0 optimizer . step () # \u8ba1\u7b97\u603b\u635f\u5931 total_iter_num += 1 train_loss += loss . item () # \u8ba1\u7b97\u603b\u51c6\u786e\u7387 train_acc = train_acc + sum ( torch . argmax ( output , dim = 1 ) == label ) . item () total_sample = total_sample + label . size ()[ 0 ] # print(f'total_sample--->{total_sample}') # \u6bcf25\u6b21\u8bad\u7ec3\uff0c\u6253\u5370\u65e5\u5fd7 if total_iter_num % 25 == 0 : tmploss = train_loss / total_iter_num tmpacc = train_acc / total_sample end_time = time . time () print ( '\u8f6e\u6b21: %d , \u635f\u5931: %.6f , \u65f6\u95f4: %d , \u51c6\u786e\u7387: %.3f ' % ( epoch + 1 , tmploss , end_time - start_time , tmpacc )) if epoch % 10 == 0 : torch . save ( ba_model . state_dict (), './save_model/20230228_new_model_ %d .bin' % epoch ) if __name__ == '__main__' : word2id , id2word = get_word_id ( conf . train_data_path ) vocab_size = len ( word2id ) print ( vocab_size ) pos_size = 143 tag_size = len ( relation2id ) train ( conf , vocab_size , pos_size , tag_size ) \u6a21\u578b\u8bad\u7ec3\u7ed3\u679c\u5c55\u793a: \u7ed3\u8bba: BiLSTM+Attention\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u6700\u7ec8\u8868\u73b0\u662fACC:80%","title":"\u7b2c\u4e8c\u6b65: \u7f16\u5199\u8bad\u7ec3\u51fd\u6570"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_4","text":"\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u968f\u673a\u62bd\u53d6\u6587\u672c\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6 \u4ee3\u7801\u4f4d\u7f6e: /home/ec2-user/Bilstm_Attention_RE/predict.py # coding:utf-8 from model.bilstm_atten import * from utils.data_loader import * from utils.process import * import torch from tqdm import tqdm # \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6 conf = Config () # \u83b7\u53d6\u6216\u5b9a\u4e49\u6a21\u578b\u53c2\u6570 word2id , id2word = get_word_id ( conf . train_data_path ) vocab_size = len ( word2id ) pos_size = 143 tag_size = len ( relation2id ) print ( tag_size ) # \u83b7\u53d6id2relation\u7684\u6620\u5c04 id2relation = { int ( value ): key for key , value in relation2id . items ()} # \u52a0\u8f7d\u6570\u636e\u96c6 _ , test_iter = get_loader_data () # \u5b9e\u4f8b\u5316Bilstm+attention\u6a21\u578b ba_model = BiLSTM_ATT ( conf , vocab_size , pos_size , tag_size ) . to ( conf . device ) # \u52a0\u8f7d\u6a21\u578b ba_model . load_state_dict ( torch . load ( './save_model/20230228_new_model_40.bin' )) # \u5f00\u59cb\u6a21\u578b\u7684\u9884\u6d4b def model2predict (): ba_model . eval () with torch . no_grad (): for sentence , pos1 , pos2 , label , original_sequences , original_labels , entites in tqdm ( test_iter ): print ( label ) print ( original_labels ) print ( 'original_sequences' , len ( original_sequences )) print ( 'original_labels' , len ( original_labels )) # \u5c06\u6570\u636e\u8f93\u5165\u6a21\u578b output = ba_model ( sentence , pos1 , pos2 ) # \u5b9e\u73b0\u6a21\u578b\u7684\u9884\u6d4b predict_ids = torch . argmax ( output , dim = 1 ) . tolist () for i in range ( len ( original_sequences )): original_sequence = '' . join ( original_sequences [ i ]) original_label = id2relation [ original_labels [ i ]] entity = entites [ i ] predict_label = id2relation [ predict_ids [ i ]] print ( '\u539f\u59cb\u53e5\u5b50: ' , original_sequence ) print ( '\u539f\u59cb\u5173\u7cfb\u7c7b\u522b: ' , original_label ) print ( '\u5b9e\u4f53\u5217\u8868' , entity ) print ( '\u6a21\u578b\u9884\u6d4b\u7684\u5173\u7cfb\u7c7b\u522b: ' , predict_label ) print ( '*' * 80 ) if __name__ == '__main__' : model2predict () \u9884\u6d4b\u7ed3\u679c\u5c55\u793a:","title":"\u7b2c\u4e09\u6b65: \u7f16\u5199\u6a21\u578b\u9884\u6d4b\u51fd\u6570"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Epipeline%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-BILSTM%2BAttention%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_5","text":"\u672c\u5c0f\u8282\u5b9e\u73b0\u4e86\u57fa\u4e8eBiLSTM+Attention\u6a21\u578b\u7684\u6784\u5efa, \u5e76\u5b8c\u6210\u4e86\u8bad\u7ec3\u548c\u6d4b\u8bd5\u8bc4\u4f30.","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html","text":"\u57fa\u4e8e\u89c4\u5219\u65b9\u5f0f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u6982\u5ff5 \u638c\u63e1\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 \u638c\u63e1\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u4ee3\u7801\u5b9e\u73b0 \u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u7406\u89e3 \u00b6 \u57fa\u4e8e\u89c4\u5219\u7684\u5173\u7cfb\u62bd\u53d6\u4e3b\u8981\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) \uff0c\u8fd9\u4e9b\u89c4\u5219\u901a\u5e38\u57fa\u4e8e\u9886\u57df\u77e5\u8bc6\u548c\u8bed\u8a00\u5b66\u77e5\u8bc6\uff0c\u7531\u4e13\u4e1a\u4eba\u5458\u8bbe\u8ba1\u548c\u4f18\u5316\uff0c\u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u867d\u7136\u5b9a\u4e49\u89c4\u5219\u8fd9\u79cd\u62bd\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u6709\u70b9 low\uff0c\u4f46\u5374\u7b80\u5355\u5b9e\u7528\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6548\u679c\u6bd4\u5f88\u591a\u9ad8\u6df1\u7684\u7b97\u6cd5\u8fd8\u8981\u597d\u4e00\u4e9b (\u975e\u7edd\u5bf9\uff0c\u5177\u4f53\u9886\u57df\u5177\u4f53\u5206\u6790) . \u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 \u00b6 \u57fa\u4e8e\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 (\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4) \u7b2c\u4e00\u6b65\uff1a\u5b9a\u4e49\u9700\u8981\u62bd\u53d6\u7684\u5173\u7cfb\u96c6\u5408\uff0c\u6bd4\u5982\u3010\u592b\u59bb\u5173\u7cfb\uff0c\u5408\u4f5c\u5173\u7cfb\uff0c\uff0c\u2026\u3011 \u7b2c\u4e8c\u6b65\uff1a\u904d\u5386\u6587\u7ae0\u7684\u6bcf\u4e00\u53e5\u8bdd\uff0c\u5c06\u6bcf\u53e5\u8bdd\u4e2d\u975e\u5b9e\u4f53\u548c\u975e\u5173\u7cfb\u96c6\u5408\u91cc\u9762\u7684\u8bcd\u53bb\u6389 \u7b2c\u4e09\u6b65\uff1a\u5206\u522b\u4ece\u5b9e\u4f53\u96c6\u5408\u548c\u5173\u7cfb\u96c6\u5408\u4e2d\uff0c\u63d0\u53d6\u5173\u7cfb\u4e09\u5143\u7ec4 \u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6ce8\u610f\uff1a\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u4f8b\u53ea\u4ee3\u8868\u89c4\u5219\u5b9e\u73b0\u65b9\u5f0f\u7684\u4e00\u79cd\uff0c\u5176\u4ed6\u573a\u666f\u4e0b\u9700\u8981\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u8fdb\u884c\u4eba\u4e3a\u8bbe\u5b9a. \u4ee3\u7801\u5b9e\u6218\uff1a import jieba.posseg as pseg # \u9700\u8981\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u6837\u672c\u6570\u636e samples = [ \"2014\u5e741\u67088\u65e5\uff0c\u6768\u5e42\u4e0e\u5218\u607a\u5a01\u7684\u5a5a\u793c\u5728\u5370\u5ea6\u5c3c\u897f\u4e9a\u5df4\u5398\u5c9b\u4e3e\u884c\" , \"\u5468\u661f\u9a70\u548c\u5434\u5b5f\u8fbe\u5728\u300a\u9003\u5b66\u5a01\u9f99\u300b\u4e2d\u5408\u4f5c\u51fa\u6f14\" , '\u6210\u9f99\u51fa\u6f14\u4e86\u300a\u8b66\u5bdf\u6545\u4e8b\u300b\u7b49\u591a\u90e8\u7ecf\u5178\u7535\u5f71' ] # \u5b9a\u4e49\u9700\u8981\u62bd\u53d6\u7684\u5173\u7cfb\u96c6\u5408 relations2dict = { '\u592b\u59bb\u5173\u7cfb' :[ '\u7ed3\u5a5a' , '\u9886\u8bc1' , '\u5a5a\u793c' ], '\u5408\u4f5c\u5173\u7cfb' : [ '\u642d\u6863' , '\u5408\u4f5c' , '\u7b7e\u7ea6' ], '\u6f14\u5458\u5173\u7cfb' : [ '\u51fa\u6f14' , '\u89d2\u8272' , '\u4e3b\u6f14' ]} # \u901a\u8fc7jieba\u8bcd\u6027\u8bc6\u522b\u62bd\u53d6\u51fanr\u7684\u5b9e\u4f53\u548c\u5e26\u6709\u5173\u7cfb\u7684\u8bcd\u7ec4 for text in samples : entities = [] # \u5b58\u50a8\u5b9e\u4f53 relations = [] # \u5b58\u50a8\u5173\u7cfb move_name = [] for word , flag in pseg . lcut ( text ): if flag == 'nr' : entities . append ( word ) elif flag == 'x' : if len ( move_name ) == 0 : move_name . append ( text . index ( word )) else : move_name . append ( text . index ( word )) entities . append ( text [ move_name [ 0 ] + 1 : move_name [ 1 ]]) else : for key , value in relations2dict . items (): if word in value : relations . append ( key ) if len ( entities ) >= 2 and len ( relations ) >= 1 : print ( \"\u539f\u59cb\u6587\u672c\uff1a\" , text ) print ( '\u63d0\u53d6\u7ed3\u679c\uff1a' , entities [ 0 ] + '->' + relations [ 0 ] + '->' + entities [ 1 ]) else : print ( \"\u539f\u59cb\u6587\u672c\uff1a\" , text ) print ( '\u4e0d\u597d\u610f\u601d\uff0c\u6682\u65f6\u6ca1\u80fd\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u51fa\u5173\u7cfb\u7ed3\u679c' ) print ( '*' * 80 ) \u8fd0\u884c\u7ed3\u679c: \u539f\u59cb\u6587\u672c \uff1a 2014 \u5e741\u67088\u65e5 \uff0c \u6768\u5e42\u4e0e\u5218\u607a\u5a01\u7684\u5a5a\u793c\u5728\u5370\u5ea6\u5c3c\u897f\u4e9a\u5df4\u5398\u5c9b\u4e3e\u884c \u63d0\u53d6\u7ed3\u679c \uff1a \u6768\u5e42 -> \u592b\u59bb\u5173\u7cfb -> \u5218\u607a\u5a01 ******************************************************************************** \u539f\u59cb\u6587\u672c \uff1a \u5468\u661f\u9a70\u548c\u5434\u5b5f\u8fbe\u5728 \u300a \u9003\u5b66\u5a01\u9f99 \u300b \u4e2d\u5408\u4f5c\u51fa\u6f14 \u63d0\u53d6\u7ed3\u679c \uff1a \u5468\u661f\u9a70 -> \u5408\u4f5c\u5173\u7cfb -> \u5434\u5b5f\u8fbe ******************************************************************************** \u539f\u59cb\u6587\u672c \uff1a \u6210\u9f99\u51fa\u6f14\u4e86 \u300a \u8b66\u5bdf\u6545\u4e8b \u300b \u7b49\u591a\u90e8\u7ecf\u5178\u7535\u5f71 \u63d0\u53d6\u7ed3\u679c \uff1a \u6210\u9f99 -> \u6f14\u5458\u5173\u7cfb -> \u8b66\u5bdf\u6545\u4e8b ******************************************************************************** \u5229\u7528\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u4f18\u7f3a\u70b9\uff1a \u00b6 \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u3001\u65e0\u9700\u8bad\u7ec3\uff0c\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u5bb9\u6613\u5b9e\u73b0. \u7f3a\u70b9\uff1a\u5bf9\u8de8\u9886\u57df\u7684\u53ef\u79fb\u690d\u6027\u8f83\u5dee\u3001\u4eba\u5de5\u6807\u6ce8\u6210\u672c\u8f83\u9ad8\u4ee5\u53ca\u53ec\u56de\u7387\u8f83\u4f4e. \u5c0f\u8282\u603b\u7ed3\uff1a \u00b6 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u89c4\u5219\u7684\u5173\u7cfb\u62bd\u53d6\u65b9\u5f0f\uff1a \u57fa\u4e8e\u89c4\u5219\u7684\u77e5\u8bc6\u62bd\u53d6\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u7ae0\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) . \u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u5b66\u4e60\u4e86\u57fa\u4e8e\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 (\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4) \u7b2c\u4e00\u6b65\uff1a\u5b9a\u4e49\u9700\u8981\u62bd\u53d6\u7684\u5173\u7cfb\u96c6\u5408\uff0c\u6bd4\u5982\u3010\u592b\u59bb\u5173\u7cfb\uff0c\u5408\u4f5c\u5173\u7cfb\uff0c\uff0c\u2026\u3011 \u7b2c\u4e8c\u6b65\uff1a\u904d\u5386\u6587\u7ae0\u7684\u6bcf\u4e00\u53e5\u8bdd\uff0c\u5c06\u6bcf\u53e5\u8bdd\u4e2d\u975e\u5b9e\u4f53\u548c\u975e\u5173\u7cfb\u96c6\u5408\u91cc\u9762\u7684\u8bcd\u53bb\u6389 \u7b2c\u4e09\u6b65\uff1a\u5206\u522b\u4ece\u5b9e\u4f53\u96c6\u5408\u548c\u5173\u7cfb\u96c6\u5408\u4e2d\uff0c\u63d0\u53d6\u5173\u7cfb\u4e09\u5143\u7ec4 \u5b66\u4e60\u4e86\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u4ee3\u7801\u5b9e\u73b0 \u5229\u7528\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u3001\u65e0\u9700\u8bad\u7ec3\uff0c\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u5bb9\u6613\u5b9e\u73b0. \u7f3a\u70b9\uff1a\u5bf9\u8de8\u9886\u57df\u7684\u53ef\u79fb\u690d\u6027\u8f83\u5dee\u3001\u4eba\u5de5\u6807\u6ce8\u6210\u672c\u8f83\u9ad8\u4ee5\u53ca\u53ec\u56de\u7387\u8f83\u4f4e.","title":"2.1 \u5173\u7cfb\u62bd\u53d6\u7684\u89c4\u5219\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_1","text":"","title":"\u57fa\u4e8e\u89c4\u5219\u65b9\u5f0f\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_2","text":"\u7406\u89e3\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u6982\u5ff5 \u638c\u63e1\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 \u638c\u63e1\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u4ee3\u7801\u5b9e\u73b0","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_3","text":"\u57fa\u4e8e\u89c4\u5219\u7684\u5173\u7cfb\u62bd\u53d6\u4e3b\u8981\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u672c\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) \uff0c\u8fd9\u4e9b\u89c4\u5219\u901a\u5e38\u57fa\u4e8e\u9886\u57df\u77e5\u8bc6\u548c\u8bed\u8a00\u5b66\u77e5\u8bc6\uff0c\u7531\u4e13\u4e1a\u4eba\u5458\u8bbe\u8ba1\u548c\u4f18\u5316\uff0c\u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u867d\u7136\u5b9a\u4e49\u89c4\u5219\u8fd9\u79cd\u62bd\u53d6\u65b9\u5f0f\u770b\u8d77\u6765\u6709\u70b9 low\uff0c\u4f46\u5374\u7b80\u5355\u5b9e\u7528\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6548\u679c\u6bd4\u5f88\u591a\u9ad8\u6df1\u7684\u7b97\u6cd5\u8fd8\u8981\u597d\u4e00\u4e9b (\u975e\u7edd\u5bf9\uff0c\u5177\u4f53\u9886\u57df\u5177\u4f53\u5206\u6790) .","title":"\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u7406\u89e3"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_4","text":"\u57fa\u4e8e\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 (\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4) \u7b2c\u4e00\u6b65\uff1a\u5b9a\u4e49\u9700\u8981\u62bd\u53d6\u7684\u5173\u7cfb\u96c6\u5408\uff0c\u6bd4\u5982\u3010\u592b\u59bb\u5173\u7cfb\uff0c\u5408\u4f5c\u5173\u7cfb\uff0c\uff0c\u2026\u3011 \u7b2c\u4e8c\u6b65\uff1a\u904d\u5386\u6587\u7ae0\u7684\u6bcf\u4e00\u53e5\u8bdd\uff0c\u5c06\u6bcf\u53e5\u8bdd\u4e2d\u975e\u5b9e\u4f53\u548c\u975e\u5173\u7cfb\u96c6\u5408\u91cc\u9762\u7684\u8bcd\u53bb\u6389 \u7b2c\u4e09\u6b65\uff1a\u5206\u522b\u4ece\u5b9e\u4f53\u96c6\u5408\u548c\u5173\u7cfb\u96c6\u5408\u4e2d\uff0c\u63d0\u53d6\u5173\u7cfb\u4e09\u5143\u7ec4","title":"\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_5","text":"\u6ce8\u610f\uff1a\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u4f8b\u53ea\u4ee3\u8868\u89c4\u5219\u5b9e\u73b0\u65b9\u5f0f\u7684\u4e00\u79cd\uff0c\u5176\u4ed6\u573a\u666f\u4e0b\u9700\u8981\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u8fdb\u884c\u4eba\u4e3a\u8bbe\u5b9a. \u4ee3\u7801\u5b9e\u6218\uff1a import jieba.posseg as pseg # \u9700\u8981\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u6837\u672c\u6570\u636e samples = [ \"2014\u5e741\u67088\u65e5\uff0c\u6768\u5e42\u4e0e\u5218\u607a\u5a01\u7684\u5a5a\u793c\u5728\u5370\u5ea6\u5c3c\u897f\u4e9a\u5df4\u5398\u5c9b\u4e3e\u884c\" , \"\u5468\u661f\u9a70\u548c\u5434\u5b5f\u8fbe\u5728\u300a\u9003\u5b66\u5a01\u9f99\u300b\u4e2d\u5408\u4f5c\u51fa\u6f14\" , '\u6210\u9f99\u51fa\u6f14\u4e86\u300a\u8b66\u5bdf\u6545\u4e8b\u300b\u7b49\u591a\u90e8\u7ecf\u5178\u7535\u5f71' ] # \u5b9a\u4e49\u9700\u8981\u62bd\u53d6\u7684\u5173\u7cfb\u96c6\u5408 relations2dict = { '\u592b\u59bb\u5173\u7cfb' :[ '\u7ed3\u5a5a' , '\u9886\u8bc1' , '\u5a5a\u793c' ], '\u5408\u4f5c\u5173\u7cfb' : [ '\u642d\u6863' , '\u5408\u4f5c' , '\u7b7e\u7ea6' ], '\u6f14\u5458\u5173\u7cfb' : [ '\u51fa\u6f14' , '\u89d2\u8272' , '\u4e3b\u6f14' ]} # \u901a\u8fc7jieba\u8bcd\u6027\u8bc6\u522b\u62bd\u53d6\u51fanr\u7684\u5b9e\u4f53\u548c\u5e26\u6709\u5173\u7cfb\u7684\u8bcd\u7ec4 for text in samples : entities = [] # \u5b58\u50a8\u5b9e\u4f53 relations = [] # \u5b58\u50a8\u5173\u7cfb move_name = [] for word , flag in pseg . lcut ( text ): if flag == 'nr' : entities . append ( word ) elif flag == 'x' : if len ( move_name ) == 0 : move_name . append ( text . index ( word )) else : move_name . append ( text . index ( word )) entities . append ( text [ move_name [ 0 ] + 1 : move_name [ 1 ]]) else : for key , value in relations2dict . items (): if word in value : relations . append ( key ) if len ( entities ) >= 2 and len ( relations ) >= 1 : print ( \"\u539f\u59cb\u6587\u672c\uff1a\" , text ) print ( '\u63d0\u53d6\u7ed3\u679c\uff1a' , entities [ 0 ] + '->' + relations [ 0 ] + '->' + entities [ 1 ]) else : print ( \"\u539f\u59cb\u6587\u672c\uff1a\" , text ) print ( '\u4e0d\u597d\u610f\u601d\uff0c\u6682\u65f6\u6ca1\u80fd\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u51fa\u5173\u7cfb\u7ed3\u679c' ) print ( '*' * 80 ) \u8fd0\u884c\u7ed3\u679c: \u539f\u59cb\u6587\u672c \uff1a 2014 \u5e741\u67088\u65e5 \uff0c \u6768\u5e42\u4e0e\u5218\u607a\u5a01\u7684\u5a5a\u793c\u5728\u5370\u5ea6\u5c3c\u897f\u4e9a\u5df4\u5398\u5c9b\u4e3e\u884c \u63d0\u53d6\u7ed3\u679c \uff1a \u6768\u5e42 -> \u592b\u59bb\u5173\u7cfb -> \u5218\u607a\u5a01 ******************************************************************************** \u539f\u59cb\u6587\u672c \uff1a \u5468\u661f\u9a70\u548c\u5434\u5b5f\u8fbe\u5728 \u300a \u9003\u5b66\u5a01\u9f99 \u300b \u4e2d\u5408\u4f5c\u51fa\u6f14 \u63d0\u53d6\u7ed3\u679c \uff1a \u5468\u661f\u9a70 -> \u5408\u4f5c\u5173\u7cfb -> \u5434\u5b5f\u8fbe ******************************************************************************** \u539f\u59cb\u6587\u672c \uff1a \u6210\u9f99\u51fa\u6f14\u4e86 \u300a \u8b66\u5bdf\u6545\u4e8b \u300b \u7b49\u591a\u90e8\u7ecf\u5178\u7535\u5f71 \u63d0\u53d6\u7ed3\u679c \uff1a \u6210\u9f99 -> \u6f14\u5458\u5173\u7cfb -> \u8b66\u5bdf\u6545\u4e8b ********************************************************************************","title":"\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_6","text":"\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u3001\u65e0\u9700\u8bad\u7ec3\uff0c\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u5bb9\u6613\u5b9e\u73b0. \u7f3a\u70b9\uff1a\u5bf9\u8de8\u9886\u57df\u7684\u53ef\u79fb\u690d\u6027\u8f83\u5dee\u3001\u4eba\u5de5\u6807\u6ce8\u6210\u672c\u8f83\u9ad8\u4ee5\u53ca\u53ec\u56de\u7387\u8f83\u4f4e.","title":"\u5229\u7528\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u4f18\u7f3a\u70b9\uff1a"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-%E8%A7%84%E5%88%99%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_7","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u89c4\u5219\u7684\u5173\u7cfb\u62bd\u53d6\u65b9\u5f0f\uff1a \u57fa\u4e8e\u89c4\u5219\u7684\u77e5\u8bc6\u62bd\u53d6\u4e3b\u8981\u8fd8\u662f\u901a\u8fc7\u4eba\u5de5\u5b9a\u4e49\u4e00\u4e9b\u62bd\u53d6\u89c4\u5219\uff0c\u4ece\u6587\u7ae0\u4e2d\u62bd\u53d6\u51fa\u4e09\u5143\u7ec4\u4fe1\u606f (\u5b9e\u4f53-\u5173\u7cfb-\u5b9e\u4f53) . \u91cd\u70b9\u5373\u662f\u5b9a\u4e49\u89c4\u5219. \u5b66\u4e60\u4e86\u57fa\u4e8e\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u539f\u7406 (\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4) \u7b2c\u4e00\u6b65\uff1a\u5b9a\u4e49\u9700\u8981\u62bd\u53d6\u7684\u5173\u7cfb\u96c6\u5408\uff0c\u6bd4\u5982\u3010\u592b\u59bb\u5173\u7cfb\uff0c\u5408\u4f5c\u5173\u7cfb\uff0c\uff0c\u2026\u3011 \u7b2c\u4e8c\u6b65\uff1a\u904d\u5386\u6587\u7ae0\u7684\u6bcf\u4e00\u53e5\u8bdd\uff0c\u5c06\u6bcf\u53e5\u8bdd\u4e2d\u975e\u5b9e\u4f53\u548c\u975e\u5173\u7cfb\u96c6\u5408\u91cc\u9762\u7684\u8bcd\u53bb\u6389 \u7b2c\u4e09\u6b65\uff1a\u5206\u522b\u4ece\u5b9e\u4f53\u96c6\u5408\u548c\u5173\u7cfb\u96c6\u5408\u4e2d\uff0c\u63d0\u53d6\u5173\u7cfb\u4e09\u5143\u7ec4 \u5b66\u4e60\u4e86\u5229\u7528\u89c4\u5219\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\u7684\u4ee3\u7801\u5b9e\u73b0 \u5229\u7528\u89c4\u5219\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u3001\u65e0\u9700\u8bad\u7ec3\uff0c\u5c0f\u89c4\u6a21\u6570\u636e\u96c6\u5bb9\u6613\u5b9e\u73b0. \u7f3a\u70b9\uff1a\u5bf9\u8de8\u9886\u57df\u7684\u53ef\u79fb\u690d\u6027\u8f83\u5dee\u3001\u4eba\u5de5\u6807\u6ce8\u6210\u672c\u8f83\u9ad8\u4ee5\u53ca\u53ec\u56de\u7387\u8f83\u4f4e.","title":"\u5c0f\u8282\u603b\u7ed3\uff1a"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html","text":"\u57fa\u4e8eFlask\u5b9e\u73b0\u6a21\u578bAPI\u63a5\u53e3\u7684\u5236\u4f5c \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1API\u63a5\u53e3\u4e3b\u903b\u8f91\u670d\u52a1\u7684\u642d\u5efa \u638c\u63e1API\u63a5\u53e3\u6d4b\u8bd5\u5b9e\u73b0\u65b9\u5f0f Flask\u5b9e\u73b0\u6a21\u578bAPI\u7684\u57fa\u672c\u6b65\u9aa4 \u00b6 \u7b2c\u4e00\u6b65\uff1a\u7f16\u5199\u4e3b\u903b\u8f91\u670d\u52a1\u4ee3\u7801 \u7b2c\u4e8c\u6b65\uff1a\u542f\u52a8Flask\u670d\u52a1 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801 \u7b2c\u56db\u6b65\uff1a\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u68c0\u9a8c\u7ed3\u679c \u7b2c\u4e00\u6b65: \u7f16\u5199\u4e3b\u903b\u8f91\u670d\u52a1\u4ee3\u7801 \u00b6 \u4ee3\u7801\u6587\u4ef6\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/flask_web.py # \u670d\u52a1\u6846\u67b6\u4f7f\u7528Flask, \u5bfc\u5165\u5de5\u5177\u5305 from flask import Flask from flask import request # \u5bfc\u5165\u9884\u6d4b\u51fd\u6570\u4ee3\u7801 import json from predict import * # \u5b9e\u4f8b\u5316Flask\u5bf9\u8c61 app = Flask ( __name__ ) # \u5bfc\u5165\u8bad\u7ec3\u597d\u7684\u6a21\u578b model_path = '../save_model/last_model.pth' mymodel = load_model ( model_path ) # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f @app . route ( '/search/' , methods = [ \"POST\" ]) def get_relation (): # \u63a5\u6536\u6570\u636e sample = request . form [ 'sample' ] # \u5bf9\u5173\u7cfb\u8fdb\u884c\u63d0\u53d6 outputs = model2predict ( sample , mymodel ) # \u8fd4\u56dejson\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u7ed3\u679c return json . dumps ( outputs , ensure_ascii = False ) if __name__ == '__main__' : app . run ( host = '127.0.0.1' , port = 5001 ) \u7b2c\u4e8c\u6b65: \u542f\u52a8Flask\u670d\u52a1 \u00b6 cd / home / ec2 - user / Casrel_RE / relationship_extract / codes / python flask_web . py # nohup python flask_web.py & ##--->\u540e\u53f0\u8fd0\u884c \u7b2c\u4e09\u6b65: \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801 \u00b6 \u4ee3\u7801\u6587\u4ef6\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/flask_test.py import requests import json from config import * conf = Config () url = \"http://127.0.0.1:5001/search/\" data = { \"sample\" : \"\u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5\uff1a\u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7\" } res = requests . post ( url , data = data ) result = json . loads ( res . text ) print ( result ) \u7b2c\u56db\u6b65: \u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u68c0\u9a8c\u7ed3\u679c \u00b6 cd / home / ec2 - user / Casrel_RE / relationship_extract / codes / python flask_test . py \u8f93\u51fa\u7ed3\u679c { 'text': '\u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5\uff1a\u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7', 'spo_list': [{'subject': '\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1', 'predicate': '\u4e3b\u6f14', 'object': '\u5b89\u60a6\u6eaa'}] } \u5c0f\u8282\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u5b9e\u73b0\u4e86\u57fa\u4e8eFlask\u6846\u67b6\u5b9e\u73b0\u4e86\u5173\u7cfb\u62bd\u53d6\u6a21\u578bAPI\u63a5\u53e3\u7684\u5f00\u53d1\u548c\u5e94\u7528","title":"5.1 \u6a21\u578bAPI\u63a5\u53e3\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#flaskapi","text":"","title":"\u57fa\u4e8eFlask\u5b9e\u73b0\u6a21\u578bAPI\u63a5\u53e3\u7684\u5236\u4f5c"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#_1","text":"\u638c\u63e1API\u63a5\u53e3\u4e3b\u903b\u8f91\u670d\u52a1\u7684\u642d\u5efa \u638c\u63e1API\u63a5\u53e3\u6d4b\u8bd5\u5b9e\u73b0\u65b9\u5f0f","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#flaskapi_1","text":"\u7b2c\u4e00\u6b65\uff1a\u7f16\u5199\u4e3b\u903b\u8f91\u670d\u52a1\u4ee3\u7801 \u7b2c\u4e8c\u6b65\uff1a\u542f\u52a8Flask\u670d\u52a1 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801 \u7b2c\u56db\u6b65\uff1a\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u68c0\u9a8c\u7ed3\u679c","title":"Flask\u5b9e\u73b0\u6a21\u578bAPI\u7684\u57fa\u672c\u6b65\u9aa4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#_2","text":"\u4ee3\u7801\u6587\u4ef6\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/flask_web.py # \u670d\u52a1\u6846\u67b6\u4f7f\u7528Flask, \u5bfc\u5165\u5de5\u5177\u5305 from flask import Flask from flask import request # \u5bfc\u5165\u9884\u6d4b\u51fd\u6570\u4ee3\u7801 import json from predict import * # \u5b9e\u4f8b\u5316Flask\u5bf9\u8c61 app = Flask ( __name__ ) # \u5bfc\u5165\u8bad\u7ec3\u597d\u7684\u6a21\u578b model_path = '../save_model/last_model.pth' mymodel = load_model ( model_path ) # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f @app . route ( '/search/' , methods = [ \"POST\" ]) def get_relation (): # \u63a5\u6536\u6570\u636e sample = request . form [ 'sample' ] # \u5bf9\u5173\u7cfb\u8fdb\u884c\u63d0\u53d6 outputs = model2predict ( sample , mymodel ) # \u8fd4\u56dejson\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u7ed3\u679c return json . dumps ( outputs , ensure_ascii = False ) if __name__ == '__main__' : app . run ( host = '127.0.0.1' , port = 5001 )","title":"\u7b2c\u4e00\u6b65: \u7f16\u5199\u4e3b\u903b\u8f91\u670d\u52a1\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#flask","text":"cd / home / ec2 - user / Casrel_RE / relationship_extract / codes / python flask_web . py # nohup python flask_web.py & ##--->\u540e\u53f0\u8fd0\u884c","title":"\u7b2c\u4e8c\u6b65: \u542f\u52a8Flask\u670d\u52a1"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#_3","text":"\u4ee3\u7801\u6587\u4ef6\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/flask_test.py import requests import json from config import * conf = Config () url = \"http://127.0.0.1:5001/search/\" data = { \"sample\" : \"\u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5\uff1a\u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7\" } res = requests . post ( url , data = data ) result = json . loads ( res . text ) print ( result )","title":"\u7b2c\u4e09\u6b65: \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#_4","text":"cd / home / ec2 - user / Casrel_RE / relationship_extract / codes / python flask_test . py \u8f93\u51fa\u7ed3\u679c { 'text': '\u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5\uff1a\u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7', 'spo_list': [{'subject': '\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1', 'predicate': '\u4e3b\u6f14', 'object': '\u5b89\u60a6\u6eaa'}] }","title":"\u7b2c\u56db\u6b65: \u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u68c0\u9a8c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/01-%E6%A8%A1%E5%9E%8BAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0.html#_5","text":"\u672c\u5c0f\u8282\u5b9e\u73b0\u4e86\u57fa\u4e8eFlask\u6846\u67b6\u5b9e\u73b0\u4e86\u5173\u7cfb\u62bd\u53d6\u6a21\u578bAPI\u63a5\u53e3\u7684\u5f00\u53d1\u548c\u5e94\u7528","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html","text":"Neo4j \u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u4e86\u89e3Neo4j\u56fe\u6570\u636e\u5e93\u7684\u7b80\u4ecb\u3001\u7248\u672c\u8bf4\u660e \u4e86\u89e3\u8282\u70b9, \u5173\u7cfb, \u5c5e\u6027, \u6807\u7b7e\u7684\u6709\u5173\u6982\u5ff5 \u638c\u63e1Cypher\u8bed\u53e5\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5 \u638c\u63e1py2neo\u5de5\u5177\u5bf9Neo4j\u56fe\u6570\u636e\u5e93\u7684\u64cd\u4f5c Neo4j \u4ecb\u7ecd \u00b6 Neo4j\u662f\u7531Java\u5b9e\u73b0\u7684\u5f00\u6e90NoSQL\u56fe\u6570\u636e\u5e93. \u81ea\u4ece2003\u5e74\u5f00\u59cb\u7814\u53d1, \u52302007\u5e74\u53d1\u5e03\u7b2c\u4e00\u7248. neo4j\u73b0\u5982\u4eca\u5df2\u7ecf\u88ab\u5404\u884c\u5404\u4e1a\u7684\u6570\u5341\u4e07\u5bb6\u516c\u53f8\u548c\u7ec4\u7ec7\u91c7\u7528. Neo4j\u5b9e\u73b0\u4e86\u4e13\u4e1a\u6570\u636e\u5e93\u7ea7\u522b\u7684\u56fe\u6570\u636e\u6a21\u578b\u7684\u5b58\u50a8. \u4e0e\u666e\u901a\u7684\u56fe\u5904\u7406\u6216\u5185\u5b58\u7ea7\u6570\u636e\u5e93\u4e0d\u540c, neo4j\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u6570\u636e\u5e93\u7279\u6027, \u5305\u62ecACID\u4e8b\u7269\u7684\u652f\u6301, \u96c6\u7fa4\u652f\u6301, \u5907\u4efd\u4e0e\u6545\u969c\u8f6c\u79fb\u7b49. \u8fd9\u4f7f\u5176\u9002\u5408\u4e8e\u4f01\u4e1a\u7ea7\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u5404\u79cd\u5e94\u7528. Neo4j\u7684\u7248\u672c\u8bf4\u660e: \u4f01\u4e1a\u7248: \u9700\u8981\u9ad8\u989d\u7684\u4ed8\u8d39\u83b7\u5f97\u6388\u6743, \u63d0\u4f9b\u9ad8\u53ef\u7528, \u70ed\u5907\u4efd\u7b49\u6027\u80fd. \u793e\u533a\u5f00\u6e90\u7248: \u514d\u8d39\u4f7f\u7528, \u4f46\u53ea\u80fd\u5355\u70b9\u8fd0\u884c. Neo4j \u56fe\u6570\u636e\u5e93\u6982\u5ff5 \u00b6 \u8282\u70b9 \u8282\u70b9\u662f\u4e3b\u8981\u7684\u6570\u636e\u5143\u7d20, \u8282\u70b9\u901a\u8fc7\u5173\u7cfb\u8fde\u63a5\u5230\u5176\u4ed6\u8282\u70b9, \u8282\u70b9\u53ef\u4ee5\u5177\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027 (\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684\u5c5e\u6027), \u8282\u70b9\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u7b7e, \u7528\u4e8e\u63cf\u8ff0\u5176\u5728\u56fe\u8868\u4e2d\u7684\u4f5c\u7528. \u793a\u4f8b: Person>\u8282\u70b9. \u53ef\u4ee5\u5c06\u8282\u70b9\u7c7b\u6bd4\u4e3a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u8868, \u5bf9\u5e94\u7684\u6807\u7b7e\u53ef\u4ee5\u7c7b\u6bd4\u4e3a\u4e0d\u540c\u7684\u8868\u540d, \u5c5e\u6027\u5c31\u662f\u8868\u4e2d\u7684\u5217. \u5173\u7cfb \u5173\u7cfb\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9, \u5173\u7cfb\u662f\u65b9\u5411\u6027\u7684, \u5173\u7cfb\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027(\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684 \u5c5e\u6027). \u5c5e\u6027 \u5c5e\u6027\u662f\u547d\u540d\u503c, \u5176\u4e2d\u540d\u79f0(\u6216\u952e)\u662f\u5b57\u7b26\u4e32, \u5c5e\u6027\u53ef\u4ee5\u88ab\u7d22\u5f15\u548c\u7ea6\u675f, \u53ef\u4ee5\u4ece\u591a\u4e2a\u5c5e\u6027\u521b \u5efa\u590d\u5408\u7d22\u5f15. \u6807\u7b7e \u6807\u7b7e\u7528\u4e8e\u7ec4\u8282\u70b9\u5230\u96c6, \u8282\u70b9\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u6807\u7b7e, \u5bf9\u6807\u7b7e\u8fdb\u884c\u7d22\u5f15\u4ee5\u52a0\u901f\u5728\u56fe\u4e2d\u67e5\u627e\u8282\u70b9 Neo4j \u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5 \u00b6 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecdwindows\u4e0bNeo4j\u56fe\u6570\u636e\u5e93\u662f\u5982\u4f55\u5b89\u88c5\u7684 \u7b2c\u4e00\u6b65: \u5b89\u88c5JAVA SE \u7684 JDK \u4e0b\u8f7d\u5730\u5740: https://www.oracle.com/java/technologies/downloads/#java11 (\u6ce8\u610f: \u5728\u70b9\u51fb\u4e0b\u8f7d\u7684\u8fc7\u7a0b\u4e2d, \u53ef\u80fd\u9700\u8981\u9700\u8981oracle\u8d26\u6237, \u76f4\u63a5\u6ce8\u518c\u767b\u5f55\u5373\u53ef\u4e0b\u8f7d) \u4e0b\u8f7d\u5b89\u88c5\u5b8c\u4e4b\u540e, \u6253\u5f00windows\u7ec8\u7aef, \u8f93\u5165java --version\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u597d \u7b2c\u4e8c\u6b65: \u4e0b\u8f7d\u5b89\u88c5Neo4j \u4ece\u5b98\u7f51\u4e0b\u8f7d\u793e\u533a\u7248\u672c, \u4e0b\u8f7d\u5730\u5740: https://neo4j.com/download-center/#community \u8fd9\u91cc\u6ce8\u610f, \u56e0\u4e3aJDK\u4e3a11\u7248\u672c, \u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5bf9\u5e94\u4e0b\u8f7dNeo4j 4.0\u7248\u672c \u4e0b\u8f7d\u597d\u540e, \u89e3\u538b\u5230\u81ea\u5df1\u60f3\u653e\u7684\u76d8\u91cc\uff08\u6ce8\u610f, \u8def\u5f84\u4e0d\u8981\u51fa\u73b0\u4e2d\u6587, \u4ee5\u514d\u62a5\u9519\uff09. \u4f8b\u5982: C:\\Program Files (x86)\\neo4j-community-4.4.18 \u7b2c\u4e09\u6b65: \u5bf9Neo4j\u8fdb\u884c\u73af\u5883\u53d8\u91cf\u914d\u7f6e \u521b\u5efa\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u8fc7\u7a0b: \u7535\u8111--->\u5c5e\u6027--->\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e--->\u73af\u5883\u53d8\u91cf--->\u65b0\u5efa \u624b\u52a8\u6dfb\u52a0\u53d8\u91cf\u540d\u79f0\u548c\u53d8\u91cf\u503c\uff08\u6ce8\u610f\u53d8\u91cf\u503c\u662f\u4f60\u5b58\u653e\u6587\u4ef6\u7684\u8def\u5f84\uff09 \u5728path\u8def\u5f84\u4e2d\u5c06\u53d8\u91cf\u6dfb\u52a0\u8fdb\u53bb \u7b2c\u56db\u6b65: \u542f\u52a8neo4j\u6570\u636e\u5e93 \u6253\u5f00cmd, \u8f93\u5165: neo4j console \u6d4f\u89c8\u5668\u9875\u9762\u5c55\u793a \u6ce8\u610f: \u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5\u767b\u5f55\u6210\u529f, \u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff08\u9ed8\u8ba4\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e00\u81f4\u90fd\u662f: neo4j\uff09. \u7b2c\u4e00\u6b21\u767b\u5f55\u9700\u8981\u66f4\u6539\u5bc6\u7801. Cypher\u4ecb\u7ecd\u4e0e\u4f7f\u7528 \u00b6 1 create\u547d\u4ee4 \u00b6 \u521b\u5efa\u56fe\u6570\u636e\u4e2d\u7684\u8282\u70b9 \u6f14\u793a: # \u521b\u5efa\u547d\u4ee4\u683c\u5f0f : # \u6b64\u5904 create\u662f\u5173\u952e\u5b57 , \u521b\u5efa\u8282\u70b9\u540d\u79f0 node_name , \u8282\u70b9\u6807\u7b7e Node_Label , \u653e\u5728\u5c0f\u62ec\u53f7\u91cc\u9762 () # \u540e\u9762\u628a\u6240\u6709\u5c5e\u4e8e\u8282\u70b9\u6807\u7b7e\u7684\u5c5e\u6027\u653e\u5728\u5927\u62ec\u53f7 '{}' \u91cc\u9762 , \u4f9d\u6b21\u5199\u51fa\u5c5e\u6027\u540d\u79f0 : \u5c5e\u6027\u503c , \u4e0d\u540c\u5c5e\u6027\u7528\u9017\u53f7 ',' \u5206\u9694 # \u4f8b\u5982\u4e0b\u9762\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u8282\u70b9 e , \u8282\u70b9\u6807\u7b7e\u662f Employee , \u62e5\u6709 id , name , salary , deptnp\u56db\u4e2a\u5c5e\u6027 : CREATE ( e : Employee { id : 222 , name : 'Bob' , salary : 6000 , deptnp : 12 }\uff09 \u6548\u679c 2 match\u547d\u4ee4 \u00b6 \u5339\u914d(\u67e5\u8be2)\u5df2\u6709\u6570\u636e \u6f14\u793a: # match\u547d\u4ee4\u4e13\u95e8\u7528\u6765\u5339\u914d\u67e5\u8be2 , \u8282\u70b9\u540d\u79f0 : \u8282\u70b9\u6807\u7b7e , \u4f9d\u7136\u653e\u5728\u5c0f\u62ec\u53f7\u5185 , \u7136\u540e\u4f7f\u7528 return\u8bed\u53e5\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c , \u548c SQL\u5f88\u76f8\u4f3c . MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno MATCH ( n ) return n # \u67e5\u8be2\u6240\u6709\u7ed3\u70b9 \u6548\u679c 3 merge\u547d\u4ee4 \u00b6 \u82e5\u8282\u70b9\u5b58\u5728, \u5219\u7b49\u6548\u4e0ematch\u547d\u4ee4; \u8282\u70b9\u4e0d\u5b58\u5728, \u5219\u7b49\u6548\u4e8ecreate\u547d\u4ee4. \u6f14\u793a: MERGE ( e : Employee { id : 146 , name : 'Lucer' , salary : 3500 , deptno : 16 } ) - \u6548\u679c: \u7136\u540e\u518d\u6b21\u7528merge\u67e5\u8be2, \u53d1\u73b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u589e\u52a0, \u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u76f8\u540c\u7684\u6570\u636e\u4e86, merge\u5339\u914d\u6210\u529f. \u6f14\u793a: MERGE ( e : Employee { id : 146 , name : 'Lucer' , salary : 3500 , deptno : 16 } ) - \u6548\u679c: 4 \u4f7f\u7528create\u521b\u5efa\u5173\u7cfb \u00b6 \u5fc5\u987b\u521b\u5efa\u6709\u65b9\u5411\u6027\u7684\u5173\u7cfb, \u5426\u5219\u62a5\u9519. \u6f14\u793a: # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u6709\u65b9\u5411\u5173\u7cfb , \u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3aBuy , \u4ee3\u8868 p1\u8d2d\u4e70\u4e86p2 , \u65b9\u5411\u4e3a p1\u6307\u5411p2 CREATE ( p1 : Profile1 ) - [ r : Buy ] -> ( p2 : Profile2 ) \u6548\u679c: 5 \u4f7f\u7528merge\u521b\u5efa\u5173\u7cfb \u00b6 \u53ef\u4ee5\u521b\u5efa\u6709/\u65e0\u65b9\u5411\u6027\u7684\u5173\u7cfb. \u6f14\u793a: # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u65e0\u65b9\u5411\u5173\u7cfb , \u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3amiss , \u4ee3\u8868 p1 - miss - p2 , \u65b9\u5411\u4e3a\u76f8\u4e92\u7684 MERGE ( p1 : Profile1 ) - [ r : miss ] - ( p2 : Profile2 ) - \u6548\u679c: 6 where\u547d\u4ee4 \u00b6 \u7c7b\u4f3c\u4e8eSQL\u4e2d\u7684\u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6. \u6f14\u793a: # \u67e5\u8be2\u8282\u70b9 Employee\u4e2d , id\u503c\u7b49\u4e8e123\u7684\u90a3\u4e2a\u8282\u70b9 MATCH ( e : Employee ) WHERE e . id = 123 RETURN e - \u6548\u679c: 7 delete\u547d\u4ee4 \u00b6 \u5220\u9664\u8282\u70b9/\u5173\u7cfb\u53ca\u5176\u5173\u8054\u7684\u5c5e\u6027. \u6f14\u793a: # \u6ce8\u610f : \u5220\u9664\u8282\u70b9\u7684\u540c\u65f6 , \u4e5f\u8981\u5220\u9664\u5173\u8054\u7684\u5173\u7cfb\u8fb9 MATCH ( p1 : Profile1 ) - [ r ] - ( p2 : Profile2 ) DELETE p1 , r , p2 - \u6548\u679c: 8 sort\u547d\u4ee4 \u00b6 Cypher\u547d\u4ee4\u4e2d\u7684\u6392\u5e8f\u4f7f\u7528\u7684\u662forder by. \u6f14\u793a: # \u5339\u914d\u67e5\u8be2\u6807\u7b7e Employee , \u5c06\u6240\u6709\u5339\u914d\u7ed3\u679c\u6309\u7167 id\u503c\u5347\u5e8f\u6392\u5217\u540e\u8fd4\u56de\u7ed3\u679c MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . id # \u5982\u679c\u8981\u6309\u7167\u964d\u5e8f\u6392\u5e8f , \u53ea\u9700\u8981\u5c06 ORDER BY e . salary\u6539\u5199\u4e3aORDER BY e . salary DESC MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . salary DESC - \u6548\u679c: 9 \u5b57\u7b26\u4e32\u51fd\u6570: \u00b6 1 toUpper()\u51fd\u6570 \u00b6 \u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd. \u6f14\u793a: MATCH ( e : Employee ) RETURN e . id , toUpper ( e . name ), e . salary , e . deptno \u6548\u679c: 2 toLower()\u51fd\u6570 \u00b6 \u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd. \u6f14\u793a: MATCH ( e : Employee ) RETURN e . id , toLower ( e . name ), e . salary , e . deptno - \u6548\u679c: 3 substring()\u51fd\u6570 \u00b6 \u8fd4\u56de\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32. \u6f14\u793a: # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u8fd4\u56de\u4ece\u7d22\u5f15 start_index\u5f00\u59cb , \u5230 end_index - 1 \u7ed3\u675f\u7684\u5b50\u5b57\u7b26\u4e32 substring ( input_str , start_index , end_index ) # \u793a\u4f8b\u4ee3\u7801 , \u8fd4\u56de\u5458\u5de5\u540d\u5b57\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd MATCH ( e : Employee ) RETURN e . id , substring ( e . name , 0 , 2 ), e . salary , e . deptno - \u6548\u679c: 4 replace()\u51fd\u6570 \u00b6 \u66ff\u6362\u6389\u5b50\u5b57\u7b26\u4e32. \u6f14\u793a: # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7b26\u5408 origin_str\u7684\u90e8\u5206 , \u66ff\u6362\u6210 new_str replace ( input_str , origin_str , new_str ) # \u793a\u4f8b\u4ee3\u7801 , \u5c06\u5458\u5de5\u540d\u5b57\u66ff\u6362\u4e3a\u6dfb\u52a0\u540e\u7f00 _HelloWorld MATCH ( e : Employee ) RETURN e . id , replace ( e . name , e . name , e . name + \"_HelloWorld\" ), e . salary , e . deptno # \u8fd8\u539f MATCH ( e : Employee ) RETURN e . id , replace ( e . name , \"_HelloWorld\" , \"\" ), e . salary , e . deptno - \u6548\u679c: 10 \u805a\u5408\u51fd\u6570 \u00b6 1 count()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u6761\u6570. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2a\u6570 MATCH ( e : Employee ) RETURN count ( * ) - \u6548\u679c: 2 max()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5927\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6700\u9ad8\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN max ( e . salary ) - \u6548\u679c: 3 min()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5c0f\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6700\u4f4e\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN min ( e . salary ) - \u6548\u679c: 4 sum()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5168\u90e8\u52a0\u548c\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u548c MATCH ( e : Employee ) RETURN sum ( e . salary ) - \u6548\u679c: 5 avg()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5e73\u5747\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u5e73\u5747\u503c MATCH ( e : Employee ) RETURN avg ( e . salary ) - \u6548\u679c: 11 \u7d22\u5f15index \u00b6 Neo4j\u652f\u6301\u5728\u8282\u70b9\u6216\u5173\u7cfb\u5c5e\u6027\u4e0a\u7684\u7d22\u5f15, \u4ee5\u63d0\u9ad8\u67e5\u8be2\u7684\u6027\u80fd. \u53ef\u4ee5\u4e3a\u5177\u6709\u76f8\u540c\u6807\u7b7e\u540d\u79f0\u7684\u6240\u6709\u8282\u70b9\u7684\u5c5e\u6027\u521b\u5efa\u7d22\u5f15. 1 \u521b\u5efa\u7d22\u5f15 \u00b6 \u4f7f\u7528create index on\u6765\u521b\u5efa\u7d22\u5f15. \u6f14\u793a: # \u521b\u5efa\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 CREATE INDEX ON : Employee ( id ) - \u6548\u679c: 2 \u5220\u9664\u7d22\u5f15 \u00b6 \u4f7f\u7528drop index on\u6765\u5220\u9664\u7d22\u5f15. \u6f14\u793a: # \u5220\u9664\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 DROP INDEX ON : Employee ( id ) - \u6548\u679c: \u5728Python\u4e2d\u4f7f\u7528Neo4j \u00b6 1 \u8fde\u63a5 Neo4j \u6570\u636e\u5e93: \u00b6 \u8981\u901a\u8fc7python\u6765\u64cd\u4f5cNeo4j, \u9996\u5148\u9700\u8981\u5b89\u88c5py2neo, \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528pip\u5b89\u88c5. pip install py2neo \u5728\u5b89\u88c5\u5b8c\u6210\u540e, \u76f4\u63a5\u8c03\u7528py2neo\u5373\u53ef # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 # \u5bfc\u5165\u521b\u5efa\u8282\u70b9\u3001\u5173\u7cfb\u7684\u5de5\u5177\u5305 from py2neo import Graph , Node , Relationship # \u5bfc\u5165\u67e5\u8be2\u8282\u70b9\u3001\u5173\u7cfb\u7684\u5de5\u5177\u5305 from py2neo import NodeMatcher , RelationshipMatcher # \u5b9e\u4f8b\u5316\u56fe\u6570\u636e\u5e93 # \u8fde\u63a5neo4j\u6570\u636e\u5e93, \u8f93\u5165\u5730\u5740\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801 graph = Graph ( 'http://127.0.0.1:7474/' , auth = ( 'neo4j' , '12345' )) 2 \u5efa\u7acb\u8282\u70b9 \u00b6 \u4f7f\u7528py2neo\u521b\u5efa\u8282\u70b9, \u6211\u4eec\u4e00\u822c\u76f4\u63a5\u4f7f\u7528 Node \u8282\u70b9\u7c7b\u6765\u521b\u5efa, \u5efa\u7acb\u8282\u70b9\u7684\u65f6\u5019\u9700\u8981\u5b9a\u4e49\u8282\u70b9\u7684\u7c7b\u578b\uff08label\uff09\u4ee5\u53ca\u8282\u70b9\u7684\u5c5e\u6027\uff08property\uff09, \u4e0b\u9762\u662f\u4ee3\u7801\u6f14\u793a: # \u5b9a\u4e49\u8282\u70b91, \u6807\u7b7e\u7c7b\u522b\u4e3aStudent, \u5c5e\u6027: name:jack, age:18 node1 = Node ( \"Student\" , name = \"jack\" , age = 18 ) # \u6ce8\u610f: \u8fd9\u91cc\u4e0d\u8981\u52a0\u201clabel=\u201d, \u5426\u5219label\u4f1a\u4ee5\u5c5e\u6027\u7684\u5f62\u5f0f\u5c55\u793a, \u800c\u975e\u6807\u7b7e # \u5b9a\u4e49\u8282\u70b92, \u6807\u7b7e\u7c7b\u522b\u4e3aStudent, \u5c5e\u6027: name:lucy, age:20 node2 = Node ( \"Student\" , name = \"lucy\" , age = 20 ) # \u8c03\u7528graph\u5bf9\u8c61\u7684create\u65b9\u6cd5\u5b8c\u6210\u8282\u70b9\u7684\u521b\u5efa graph . create ( node1 ) graph . create ( node2 ) 3 \u8282\u70b9\u5173\u7cfb\u7684\u5efa\u7acb \u00b6 \u4f7f\u7528py2neo\u521b\u5efa\u5173\u7cfb\u65f6, \u6211\u4eec\u4e00\u822c\u4f7f\u7528 Relationship \u5173\u7cfb\u7c7b\u6765\u521b\u5efa, \u5efa\u7acb\u5173\u7cfb\u7684\u65f6\u5019, \u9700\u8981\u8003\u8651\u5173\u7cfb\u7684\u65b9\u5411, \u56e0\u6b64\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u8d77\u59cb\u8282\u70b9\u548c\u4e00\u4e2a\u7ed3\u675f\u8282\u70b9. \uff08\u6ce8\u610f: \u5982\u679c\u8d77\u59cb\u8282\u70b9\u548c\u7ed3\u675f\u8282\u70b9\u76f8\u540c, \u90a3\u4e48\u8fd9\u4e2a\u5173\u7cfb\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u6307\u5411\u81ea\u5df1\uff09. \u5728\u8282\u70b9\u5173\u7cfb\u5efa\u7acb\u7684\u8fc7\u7a0b\u4e2d, \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u521b\u5efa\u8fc7\u8282\u70b9, \u90a3\u4e48\u4f1a\u9ed8\u8ba4\u521b\u5efa\u8282\u70b9 \u4e0b\u9762\u4ee3\u7801\u6f14\u793a: # \u5b9e\u4f8b\u5316\u5173\u7cfb\u7c7b\u5bf9\u8c61 relation1 = Relationship ( node1 , 'Friend' , node2 ) # \u8c03\u7528graph\u5bf9\u8c61\u7684create\u65b9\u6cd5\u5b8c\u6210\u5173\u7cfb\u7684\u521b\u5efa graph . create ( relation1 ) # \u5b9e\u4f8b\u5316\u5173\u7cfb\u7c7b\u5bf9\u8c61 relation2 = Relationship ( node2 , 'Friend' , node1 ) # \u8c03\u7528graph\u5bf9\u8c61\u7684create\u65b9\u6cd5\u5b8c\u6210\u5173\u7cfb\u7684\u521b\u5efa graph . create ( relation2 ) 4 \u4f7f\u7528 NodeMatcher \u67e5\u8be2\u8282\u70b9 \u00b6 \u901a\u5e38\u67e5\u8be2\u8282\u70b9, \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a NodeMatcher \u5bf9\u8c61, \u7136\u540e\u8c03\u7528 match \u65b9\u6cd5\u6765\u6307\u660e\u8981\u5339\u914d\u54ea\u79cdlabel\u7684\u8282\u70b9, \u8fd8\u53ef\u4ee5\u4f7f\u7528where\u6765\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\uff08\u6709\u4e24\u79cd\u65b9\u6cd5\uff09. \u6ce8\u610f: \u5982\u679c\u8282\u70b9\u5b58\u5728, \u8fd4\u56de\u7684\u7ed3\u679c\u662f NodeMatcher \u7684\u5bf9\u8c61, \u9700\u8981\u8f6c\u5316\u6210Node\u5bf9\u8c61, \u53ef\u4ee5\u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9, \u6216\u8005\u8f6c\u5316\u6210\u8282\u70b9\u7684list. \u4e0b\u9762\u4ee3\u7801\u6f14\u793a1: \u4e0d\u5e26where\u6761\u4ef6, \u8fd4\u56de\u6240\u6709\u6ee1\u8db3\u6807\u7b7e\u7684\u8282\u70b9: # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u7528list\u65b9\u5f0f\u8fd4\u56de\u8282\u70b9\u5217\u8868 nodes = list ( node_match . match ( 'Student' )) # print(nodes)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # [Node('Student', age=18, name='jack'), Node('Student', age=20, name='lucy')] # \u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 node = node_match . match ( 'Student' ) . first () # print(node)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_10:Student {age: 18, name: 'jack'}) \u4e0b\u9762\u4ee3\u7801\u6f14\u793a2: where\u6761\u4ef6\u7684\u7b2c\u4e00\u79cd\u5199\u6cd5: \u628a\u5339\u914d\u7684\u5c5e\u6027\u548c\u503c\u5199\u6210key=value\u7684\u5f62\u5f0f, \u4f8b\u5982\u4e0a\u9762where(age='18'), \u8fd9\u79cd\u5199\u6cd5\u53ea\u80fd\u6309\u7167\u503c\u662f\u5426\u5b8c\u5168\u4e00\u81f4\u6765\u5339\u914d, \u4e0d\u80fd\u6309\u7167\u503c\u7684\u5927\u5c0f\u6765\u7b5b\u9009, \u5982\u679c\u5199\u6210where(age>'18'), \u4f1a\u62a5\u9519. # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u7528list\u65b9\u5f0f\u8fd4\u56de\u8282\u70b9\u5217\u8868 nodes = list ( node_match . match ( 'Student' ) . where ( age = 18 )) # print(nodes)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # [Node('Student', age=18, name='jack')] # \u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 node = node_match . match ( 'Student' ) . where ( age = 18 ) . first () # print(node)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_10:Student {age: 18, name: 'jack'}) \u4e0b\u9762\u4ee3\u7801\u6f14\u793a3: where\u6761\u4ef6\u7684\u7b2c\u4e8c\u79cd\u5199\u6cd5: \u6a21\u7cca\u5339\u914d, \u53ef\u4ee5\u628a\u6761\u4ef6\u8868\u8fbe\u5f0f\u5199\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32, \u6574\u4f53\u653e\u5728where\u8bed\u53e5\u4e2d, \u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d, \u53ef\u4ee5\u7528 _ \u6765\u4ee3\u6307\u5339\u914d\u5230\u7684\u8282\u70b9. # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u7528list\u65b9\u5f0f\u8fd4\u56de\u8282\u70b9\u5217\u8868 nodes = list ( node_match . match ( 'Student' ) . where ( age > 18 )) # print(nodes)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # [[Node('Student', age=20, name='lucy')] # \u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 node = node_match . match ( 'Student' ) . where ( age > 18 ) . first () # print(node)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_11:Student {age: 20, name: 'lucy'}) # \u5c06NodeMatcher\u8fd4\u56de\u7684\u7ed3\u679c\u8f6c\u5316\u4e3aNode\u6570\u636e\u7c7b\u578b\u6216\u8005Node\u7684list\u4e4b\u540e, \u53ef\u4ee5\u8f7b\u677e\u8bbf\u95eeNode\u5c5e\u6027, \u5982\u4e0a\u9762\u6700\u540e\u4e00\u4f8b\u7684\u7ed3\u679c, \u8bbf\u95ee\u5176\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684name\u5c5e\u6027: print ( node [ 'name' ]) ----> lucy 5 \u4f7f\u7528RelationshipMatcher\u67e5\u8be2\u5173\u7cfb \u00b6 \u901a\u5e38\u67e5\u8be2\u5173\u7cfb, \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a RelationshipMatcher \u5bf9\u8c61, \u7136\u540e\u8c03\u7528 match \u65b9\u6cd5\u6765\u5339\u914d\u5173\u7cfb, \u67e5\u8be2\u5173\u7cfb\u7684match\u65b9\u6cd5\u6709\u4e09\u4e2a\u53ca\u4ee5\u4e0a\u53c2\u6570: \u7b2c\u4e00\u4e2a\u53c2\u6570: \u8282\u70b9\u7684\u5e8f\u5217\u6216\u5219set, \u53ef\u4ee5\u4e3aNone\u8868\u793a\u4efb\u610f\u8282\u70b9\u5747\u53ef \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u6307\u5b9a\u5173\u7cfb\u7684\u7c7b\u578b, \u53ef\u4ee5\u4e3aNone\u8868\u793a\u4efb\u610f\u7c7b\u578b\u7684\u5173\u7cfb\u5747\u53ef \u7b2c\u4e09\u4e2a\u53c2\u6570: \u8981\u5339\u914d\u7684\u5c5e\u6027, \u5199\u6210key=value\u5f62\u5f0f \u6ce8\u610f: match\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662fRelationshipMatcher\u5bf9\u8c61, \u9700\u8981\u901a\u8fc7first\u8f6c\u5316\u6210Relationship\u6570\u636e\u7ed3\u6784, \u6216\u8005\u8f6c\u5316\u4e3a list . \u4e0b\u9762\u4ee3\u7801\u6f14\u793a1, \u6bd4\u5982\u60f3\u8981\u67e5\u8be2\u201cjack\u201d\u8282\u70b9\u7684\u6240\u6709\u5173\u7cfb. \u5148\u67e5\u8be2\u8282\u70b9, \u518d\u6839\u636e\u8282\u70b9\u67e5\u5173\u7cfb, r_type=None\u8868\u793a\u4efb\u610f\u5173\u7cfb\u7c7b\u578b\u5747\u53ef. #\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf, \u56e0\u4e3a\u4e4b\u524d\u53ea\u6709\u4e00\u79cd\u5173\u7cfb, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u591a\u521b\u5efa\u51e0\u79cd\u5173\u7cfb node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node3 = Node ( \"Location\" , name = \"America\" ) node4 = Node ( \"Sports\" , name = 'football' ) relation3 = Relationship ( node1 , 'Country' , node3 ) graph . create ( relation3 ) relation4 = Relationship ( node1 , 'Hobby' , node4 ) graph . create ( relation4 ) # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () relationship = list ( relation_match . match ([ node1 ], r_type = None )) # print(relationship) ---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b \"[ Hobby ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Sports' , name = 'football' )), Country ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Location' , name = 'America' )), Friend ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Student' , age = 20 , name = 'lucy' )) ] \" \u4e0b\u9762\u4ee3\u7801\u6f14\u793a2: \u6bd4\u5982\u60f3\u8981\u67e5\u8be2\u201cjack\u201d\u548c\u201clucy\u201d\u5173\u7cfb. \u4e24\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\u8868\u793a\u8981\u5339\u914d\u7684\u5173\u7cfb\u65b9\u5411. \u56fe\u4e2d\u201cjack\u201d\u548c\u201clucy\u201d\u8282\u70b9\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u662f\u53cc\u5411\u7684, \u4f46\u662f\u67e5\u8be2\u7ed3\u679c\u53ea\u7ed9\u4e86\u4e00\u6761 # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node2 = node_match . match ( 'Student' ) . where ( name = 'lucy' ) . first () relationship = list ( relation_match . match ([ node1 , node2 ], r_type = None )) # print(relationship) ---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b # [Friend(Node('Student', age=18, name='jack'), Node('Student', age=20, name='lucy'))] \u4e0b\u9762\u4ee3\u7801\u6f14\u793a3: \u8be2\u56fe\u4e2d\u67d0\u4e00\u7c7b\u5173\u7cfb, \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aNone, \u7b2c\u4e8c\u4e2a\u53c2\u6570r_type\u6307\u5b9a\u5173\u7cfb\u7c7b\u578b # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) relationship = list ( relation_match . match ( None , r_type = 'Friend' )) # print(relationship) ---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b \"[ Friend ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Student' , age = 20 , name = 'lucy' )), Friend ( Node ( 'Student' , age = 20 , name = 'lucy' ), Node ( 'Student' , age = 18 , name = 'jack' )) ] \" 6 \u8282\u70b9\u3001\u5173\u7cfb\u5c5e\u6027\u503c\u7684\u66f4\u65b0 \u00b6 \u4ee5 \u201cjack\u201d\u8282\u70b9\u4e3a\u4f8b, \u589e\u52a0\u4e00\u4e2a\u73ed\u7ea7\u5c5e\u6027class, \u66f4\u65b0\u5230\u56fe\u6570\u636e\u5e93\u91cc\u9762, \u4f7f\u7528push\u51fd\u6570\u6765\u8fdb\u884c\u66f4\u65b0\u5373\u53ef \u4e0b\u9762\u4ee3\u7801\u6f14\u793a: node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node1 [ \"class\" ] = \"9\" # \u589e\u52a0\u5c5e\u6027 node1 [ 'age' ] = 21 # \u66f4\u6539\u5c5e\u6027 graph . push ( node1 ) # print(node1)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_10:Student {age: 21, class: '9', name: 'jack'}) \u4ee5\u201cjack\u201d\u548c\u201clucy\u201d\u4e24\u8282\u70b9\u7684\u5173\u7cfb\u4e3a\u4f8b, \u589e\u52a0\u5173\u7cfb\u5c5e\u6027\u5982: \u4eb2\u5bc6\u5ea6, \u66f4\u65b0\u5230\u56fe\u6570\u636e\u5e93\u91cc\u9762, \u4f7f\u7528push\u51fd\u6570\u6765\u8fdb\u884c\u66f4\u7ec6\u5373\u53ef node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node2 = node_match . match ( 'Student' ) . where ( name = 'lucy' ) . first () relationship = relation_match . match ([ node1 , node2 ], r_type = \"Friend\" ) . first () relationship [ 'intimacy' ] = 1 #\u589e\u52a0\u5c5e\u6027 graph . push ( relationship ) # print(relationship)---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b # (jack)-[:Friend {intimacy: 1}]->(lucy) 7 \u8282\u70b9\u3001\u5173\u7cfb\u5220\u9664 \u00b6 \u5f53\u5220\u9664\u8282\u70b9\u6216\u8005\u5173\u7cfb\u65f6, \u4e3b\u8981\u4f7f\u7528\u7684\u51fd\u6570graph.delete() \u6216\u8005\u51fd\u6570graph.separate(), \u53ef\u4ee5\u4f20\u9012\u53c2\u6570: \u8282\u70b9\u3001\u5173\u7cfb\u3001\u56fe\u7b49 \u6e05\u7a7a\u56fe\u6570\u636e\u5e93: graph.delete_all() \u4e0b\u9762\u4ee3\u7801\u6f14\u793a: \u6ce8\u610f, \u5728\u5355\u72ec\u5220\u9664\u8282\u70b9\u524d, \u5982\u679c\u8282\u70b9\u5b58\u5728\u5173\u7cfb, \u5219\u76f4\u63a5\u5220\u9664\u8282\u70b9\u4f1a\u62a5\u9519, \u56e0\u6b64\u9700\u8981\u5148\u5220\u9664\u5173\u7cfb, \u5728\u5220\u9664\u8282\u70b9 # \u67e5\u627e\u201cjack\u201d\u8282\u70b9\u3001\"football\"\u8282\u70b9, \u4ee5\u53ca\u5bf9\u5e94\u7684\u5174\u8da3\u5173\u7cfb node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node2 = node_match . match ( 'Sports' ) . where ( name = 'football' ) . first () relationship = relation_match . match ([ node1 , node2 ], r_type = \"Hobby\" ) . first () # \u53ea\u5220\u9664\u5173\u7cfb graph . separate ( relationship ) # \u53ea\u5220\u9664\u67d0\u4e2a\u8282\u70b9 graph . separate ( node1 ) # \u5220\u9664\u5173\u7cfb\u7684\u540c\u65f6\u4e5f\u5220\u9664\u8282\u70b9 graph . delete ( relationship ) # \u5220\u9664\u8282\u70b9\u5c5e\u6027 node1 = node_match . match ( 'Student' ) . where ( name = 'lucy' ) . first () # print(node1) ---> (_11:Student {age: 20, name: 'lucy'}) del node1 [ 'age' ] # print(node1) ---> (_11:Student {name: 'lucy'}) graph . push ( node1 ) # \u6e05\u7a7a\u56fe\u6570\u636e\u5e93 graph . delete_all () 8 \u76f4\u63a5\u6267\u884cCypher\u8bed\u53e5\uff08run\uff09 \u00b6 NodeMatcher \u548cRelationshipMatcher \u80fd\u591f\u8868\u8fbe\u7684\u5339\u914d\u6761\u4ef6\u76f8\u5bf9\u7b80\u5355, \u66f4\u52a0\u590d\u6742\u7684\u67e5\u8be2\u8fd8\u662f\u9700\u8981\u7528Cypher\u8bed\u53e5\u6765\u8868\u8fbe. Py2neo\u672c\u8eab\u652f\u6301\u6267\u884cCypher\u8bed\u53e5\u7684\u6267\u884c, \u53ef\u4ee5\u5c06\u590d\u6742\u7684\u67e5\u8be2\u5199\u6210Cypher\u8bed\u53e5, \u901a\u8fc7graph.run\u65b9\u6cd5\u67e5\u8be2, \u8fd4\u56de\u7684\u7ed3\u679c\u53ef\u4ee5\u8f6c\u5316\u4e3a pandas.DataFrame \u6216\u8005 pandas.Series \u5bf9\u8c61, \u4ece\u800c\u548c\u5176\u4ed6\u6570\u636e\u5206\u6790\u5de5\u5177\u65e0\u7f1d\u8854\u63a5. cypher_ = \"MATCH (n: Student) WHERE n.age > 16 RETURN n.name AS Name, n.age AS Age\" df = graph . run ( cypher_ ) . to_data_frame () # pythonprint(df)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: Name Age 0 jack 18 1 lucy 20 9 \u4f7f\u7528schema\u67e5\u8be2\u56fe\u4e2d\u8282\u70b9\u548c\u5173\u7cfb\u7c7b\u578b\u6709\u54ea\u4e9b \u00b6 \u67e5\u770b\u8282\u70b9\u7684\u7c7b\u578b\u7528graph.schema.node_labels. \u67e5\u770b\u5173\u7cfb\u7684\u7c7b\u578b\u7528graph.schema.relationship_types, \u5b83\u4eec\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u90fd\u662f frozenset , \u662f\u4e0d\u80fd\u589e\u5220\u5143\u7d20\u7684\u96c6\u5408. # \u67e5\u770b\u6240\u6709\u8282\u70b9\u7c7b\u578b labels = graph . schema . node_labels # print(labels)---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b: # frozenset({'Sports', 'Student', 'Location'}) # \u67e5\u770b\u6240\u6709\u5173\u7cfb\u7c7b\u578b relation_types = graph . schema . relationship_types # print(relation_types)---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b: # frozenset({'Country', 'Friend', 'Hobby'}) \u5c0f\u8282\u603b\u7ed3 \u00b6 \u5b66\u4e60\u4e86 Neo4j \u56fe\u6570\u636e\u5e93\u7684\u76f8\u5173\u6982\u5ff5\u548c\u4ea7\u54c1\u4ecb\u7ecd, \u4ee5\u53ca Neo4j \u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u548c\u4f7f\u7528 \u5b66\u4e60\u4e86Cypher\u8bed\u53e5\u7684\u57fa\u672c\u7528\u6cd5 (\u4e00\u79cd\u7528\u4e8eneo4j\u56fe\u6570\u636e\u5e93\u7684\u67e5\u8be2\u8bed\u8a00) \u5b66\u4e60\u4e86\u5728python\u4e2d\u4f7f\u7528Neo4j\u56fe\u6570\u636e\u5e93\u7684\u65b9\u6cd5: \u57fa\u4e8epy2neo\u7b2c\u4e09\u65b9\u5e93, \u5b9e\u73b0\u56fe\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5","title":"5.2 Neo4j\u56fe\u6570\u636e\u5e93\u7684\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#neo4j","text":"","title":"Neo4j \u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#_1","text":"\u4e86\u89e3Neo4j\u56fe\u6570\u636e\u5e93\u7684\u7b80\u4ecb\u3001\u7248\u672c\u8bf4\u660e \u4e86\u89e3\u8282\u70b9, \u5173\u7cfb, \u5c5e\u6027, \u6807\u7b7e\u7684\u6709\u5173\u6982\u5ff5 \u638c\u63e1Cypher\u8bed\u53e5\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5 \u638c\u63e1py2neo\u5de5\u5177\u5bf9Neo4j\u56fe\u6570\u636e\u5e93\u7684\u64cd\u4f5c","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#neo4j_1","text":"Neo4j\u662f\u7531Java\u5b9e\u73b0\u7684\u5f00\u6e90NoSQL\u56fe\u6570\u636e\u5e93. \u81ea\u4ece2003\u5e74\u5f00\u59cb\u7814\u53d1, \u52302007\u5e74\u53d1\u5e03\u7b2c\u4e00\u7248. neo4j\u73b0\u5982\u4eca\u5df2\u7ecf\u88ab\u5404\u884c\u5404\u4e1a\u7684\u6570\u5341\u4e07\u5bb6\u516c\u53f8\u548c\u7ec4\u7ec7\u91c7\u7528. Neo4j\u5b9e\u73b0\u4e86\u4e13\u4e1a\u6570\u636e\u5e93\u7ea7\u522b\u7684\u56fe\u6570\u636e\u6a21\u578b\u7684\u5b58\u50a8. \u4e0e\u666e\u901a\u7684\u56fe\u5904\u7406\u6216\u5185\u5b58\u7ea7\u6570\u636e\u5e93\u4e0d\u540c, neo4j\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u6570\u636e\u5e93\u7279\u6027, \u5305\u62ecACID\u4e8b\u7269\u7684\u652f\u6301, \u96c6\u7fa4\u652f\u6301, \u5907\u4efd\u4e0e\u6545\u969c\u8f6c\u79fb\u7b49. \u8fd9\u4f7f\u5176\u9002\u5408\u4e8e\u4f01\u4e1a\u7ea7\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u5404\u79cd\u5e94\u7528. Neo4j\u7684\u7248\u672c\u8bf4\u660e: \u4f01\u4e1a\u7248: \u9700\u8981\u9ad8\u989d\u7684\u4ed8\u8d39\u83b7\u5f97\u6388\u6743, \u63d0\u4f9b\u9ad8\u53ef\u7528, \u70ed\u5907\u4efd\u7b49\u6027\u80fd. \u793e\u533a\u5f00\u6e90\u7248: \u514d\u8d39\u4f7f\u7528, \u4f46\u53ea\u80fd\u5355\u70b9\u8fd0\u884c.","title":"Neo4j \u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#neo4j_2","text":"\u8282\u70b9 \u8282\u70b9\u662f\u4e3b\u8981\u7684\u6570\u636e\u5143\u7d20, \u8282\u70b9\u901a\u8fc7\u5173\u7cfb\u8fde\u63a5\u5230\u5176\u4ed6\u8282\u70b9, \u8282\u70b9\u53ef\u4ee5\u5177\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027 (\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684\u5c5e\u6027), \u8282\u70b9\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u7b7e, \u7528\u4e8e\u63cf\u8ff0\u5176\u5728\u56fe\u8868\u4e2d\u7684\u4f5c\u7528. \u793a\u4f8b: Person>\u8282\u70b9. \u53ef\u4ee5\u5c06\u8282\u70b9\u7c7b\u6bd4\u4e3a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u8868, \u5bf9\u5e94\u7684\u6807\u7b7e\u53ef\u4ee5\u7c7b\u6bd4\u4e3a\u4e0d\u540c\u7684\u8868\u540d, \u5c5e\u6027\u5c31\u662f\u8868\u4e2d\u7684\u5217. \u5173\u7cfb \u5173\u7cfb\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9, \u5173\u7cfb\u662f\u65b9\u5411\u6027\u7684, \u5173\u7cfb\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027(\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684 \u5c5e\u6027). \u5c5e\u6027 \u5c5e\u6027\u662f\u547d\u540d\u503c, \u5176\u4e2d\u540d\u79f0(\u6216\u952e)\u662f\u5b57\u7b26\u4e32, \u5c5e\u6027\u53ef\u4ee5\u88ab\u7d22\u5f15\u548c\u7ea6\u675f, \u53ef\u4ee5\u4ece\u591a\u4e2a\u5c5e\u6027\u521b \u5efa\u590d\u5408\u7d22\u5f15. \u6807\u7b7e \u6807\u7b7e\u7528\u4e8e\u7ec4\u8282\u70b9\u5230\u96c6, \u8282\u70b9\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u6807\u7b7e, \u5bf9\u6807\u7b7e\u8fdb\u884c\u7d22\u5f15\u4ee5\u52a0\u901f\u5728\u56fe\u4e2d\u67e5\u627e\u8282\u70b9","title":"Neo4j \u56fe\u6570\u636e\u5e93\u6982\u5ff5"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#neo4j_3","text":"\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecdwindows\u4e0bNeo4j\u56fe\u6570\u636e\u5e93\u662f\u5982\u4f55\u5b89\u88c5\u7684 \u7b2c\u4e00\u6b65: \u5b89\u88c5JAVA SE \u7684 JDK \u4e0b\u8f7d\u5730\u5740: https://www.oracle.com/java/technologies/downloads/#java11 (\u6ce8\u610f: \u5728\u70b9\u51fb\u4e0b\u8f7d\u7684\u8fc7\u7a0b\u4e2d, \u53ef\u80fd\u9700\u8981\u9700\u8981oracle\u8d26\u6237, \u76f4\u63a5\u6ce8\u518c\u767b\u5f55\u5373\u53ef\u4e0b\u8f7d) \u4e0b\u8f7d\u5b89\u88c5\u5b8c\u4e4b\u540e, \u6253\u5f00windows\u7ec8\u7aef, \u8f93\u5165java --version\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u597d \u7b2c\u4e8c\u6b65: \u4e0b\u8f7d\u5b89\u88c5Neo4j \u4ece\u5b98\u7f51\u4e0b\u8f7d\u793e\u533a\u7248\u672c, \u4e0b\u8f7d\u5730\u5740: https://neo4j.com/download-center/#community \u8fd9\u91cc\u6ce8\u610f, \u56e0\u4e3aJDK\u4e3a11\u7248\u672c, \u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5bf9\u5e94\u4e0b\u8f7dNeo4j 4.0\u7248\u672c \u4e0b\u8f7d\u597d\u540e, \u89e3\u538b\u5230\u81ea\u5df1\u60f3\u653e\u7684\u76d8\u91cc\uff08\u6ce8\u610f, \u8def\u5f84\u4e0d\u8981\u51fa\u73b0\u4e2d\u6587, \u4ee5\u514d\u62a5\u9519\uff09. \u4f8b\u5982: C:\\Program Files (x86)\\neo4j-community-4.4.18 \u7b2c\u4e09\u6b65: \u5bf9Neo4j\u8fdb\u884c\u73af\u5883\u53d8\u91cf\u914d\u7f6e \u521b\u5efa\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u8fc7\u7a0b: \u7535\u8111--->\u5c5e\u6027--->\u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e--->\u73af\u5883\u53d8\u91cf--->\u65b0\u5efa \u624b\u52a8\u6dfb\u52a0\u53d8\u91cf\u540d\u79f0\u548c\u53d8\u91cf\u503c\uff08\u6ce8\u610f\u53d8\u91cf\u503c\u662f\u4f60\u5b58\u653e\u6587\u4ef6\u7684\u8def\u5f84\uff09 \u5728path\u8def\u5f84\u4e2d\u5c06\u53d8\u91cf\u6dfb\u52a0\u8fdb\u53bb \u7b2c\u56db\u6b65: \u542f\u52a8neo4j\u6570\u636e\u5e93 \u6253\u5f00cmd, \u8f93\u5165: neo4j console \u6d4f\u89c8\u5668\u9875\u9762\u5c55\u793a \u6ce8\u610f: \u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5\u767b\u5f55\u6210\u529f, \u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\uff08\u9ed8\u8ba4\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e00\u81f4\u90fd\u662f: neo4j\uff09. \u7b2c\u4e00\u6b21\u767b\u5f55\u9700\u8981\u66f4\u6539\u5bc6\u7801.","title":"Neo4j \u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#cypher","text":"","title":"Cypher\u4ecb\u7ecd\u4e0e\u4f7f\u7528"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#1-create","text":"\u521b\u5efa\u56fe\u6570\u636e\u4e2d\u7684\u8282\u70b9 \u6f14\u793a: # \u521b\u5efa\u547d\u4ee4\u683c\u5f0f : # \u6b64\u5904 create\u662f\u5173\u952e\u5b57 , \u521b\u5efa\u8282\u70b9\u540d\u79f0 node_name , \u8282\u70b9\u6807\u7b7e Node_Label , \u653e\u5728\u5c0f\u62ec\u53f7\u91cc\u9762 () # \u540e\u9762\u628a\u6240\u6709\u5c5e\u4e8e\u8282\u70b9\u6807\u7b7e\u7684\u5c5e\u6027\u653e\u5728\u5927\u62ec\u53f7 '{}' \u91cc\u9762 , \u4f9d\u6b21\u5199\u51fa\u5c5e\u6027\u540d\u79f0 : \u5c5e\u6027\u503c , \u4e0d\u540c\u5c5e\u6027\u7528\u9017\u53f7 ',' \u5206\u9694 # \u4f8b\u5982\u4e0b\u9762\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u8282\u70b9 e , \u8282\u70b9\u6807\u7b7e\u662f Employee , \u62e5\u6709 id , name , salary , deptnp\u56db\u4e2a\u5c5e\u6027 : CREATE ( e : Employee { id : 222 , name : 'Bob' , salary : 6000 , deptnp : 12 }\uff09 \u6548\u679c","title":"1 create\u547d\u4ee4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#2-match","text":"\u5339\u914d(\u67e5\u8be2)\u5df2\u6709\u6570\u636e \u6f14\u793a: # match\u547d\u4ee4\u4e13\u95e8\u7528\u6765\u5339\u914d\u67e5\u8be2 , \u8282\u70b9\u540d\u79f0 : \u8282\u70b9\u6807\u7b7e , \u4f9d\u7136\u653e\u5728\u5c0f\u62ec\u53f7\u5185 , \u7136\u540e\u4f7f\u7528 return\u8bed\u53e5\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c , \u548c SQL\u5f88\u76f8\u4f3c . MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno MATCH ( n ) return n # \u67e5\u8be2\u6240\u6709\u7ed3\u70b9 \u6548\u679c","title":"2 match\u547d\u4ee4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#3-merge","text":"\u82e5\u8282\u70b9\u5b58\u5728, \u5219\u7b49\u6548\u4e0ematch\u547d\u4ee4; \u8282\u70b9\u4e0d\u5b58\u5728, \u5219\u7b49\u6548\u4e8ecreate\u547d\u4ee4. \u6f14\u793a: MERGE ( e : Employee { id : 146 , name : 'Lucer' , salary : 3500 , deptno : 16 } ) - \u6548\u679c: \u7136\u540e\u518d\u6b21\u7528merge\u67e5\u8be2, \u53d1\u73b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u589e\u52a0, \u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u76f8\u540c\u7684\u6570\u636e\u4e86, merge\u5339\u914d\u6210\u529f. \u6f14\u793a: MERGE ( e : Employee { id : 146 , name : 'Lucer' , salary : 3500 , deptno : 16 } ) - \u6548\u679c:","title":"3 merge\u547d\u4ee4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#4-create","text":"\u5fc5\u987b\u521b\u5efa\u6709\u65b9\u5411\u6027\u7684\u5173\u7cfb, \u5426\u5219\u62a5\u9519. \u6f14\u793a: # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u6709\u65b9\u5411\u5173\u7cfb , \u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3aBuy , \u4ee3\u8868 p1\u8d2d\u4e70\u4e86p2 , \u65b9\u5411\u4e3a p1\u6307\u5411p2 CREATE ( p1 : Profile1 ) - [ r : Buy ] -> ( p2 : Profile2 ) \u6548\u679c:","title":"4 \u4f7f\u7528create\u521b\u5efa\u5173\u7cfb"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#5-merge","text":"\u53ef\u4ee5\u521b\u5efa\u6709/\u65e0\u65b9\u5411\u6027\u7684\u5173\u7cfb. \u6f14\u793a: # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u65e0\u65b9\u5411\u5173\u7cfb , \u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3amiss , \u4ee3\u8868 p1 - miss - p2 , \u65b9\u5411\u4e3a\u76f8\u4e92\u7684 MERGE ( p1 : Profile1 ) - [ r : miss ] - ( p2 : Profile2 ) - \u6548\u679c:","title":"5 \u4f7f\u7528merge\u521b\u5efa\u5173\u7cfb"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#6-where","text":"\u7c7b\u4f3c\u4e8eSQL\u4e2d\u7684\u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6. \u6f14\u793a: # \u67e5\u8be2\u8282\u70b9 Employee\u4e2d , id\u503c\u7b49\u4e8e123\u7684\u90a3\u4e2a\u8282\u70b9 MATCH ( e : Employee ) WHERE e . id = 123 RETURN e - \u6548\u679c:","title":"6 where\u547d\u4ee4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#7-delete","text":"\u5220\u9664\u8282\u70b9/\u5173\u7cfb\u53ca\u5176\u5173\u8054\u7684\u5c5e\u6027. \u6f14\u793a: # \u6ce8\u610f : \u5220\u9664\u8282\u70b9\u7684\u540c\u65f6 , \u4e5f\u8981\u5220\u9664\u5173\u8054\u7684\u5173\u7cfb\u8fb9 MATCH ( p1 : Profile1 ) - [ r ] - ( p2 : Profile2 ) DELETE p1 , r , p2 - \u6548\u679c:","title":"7 delete\u547d\u4ee4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#8-sort","text":"Cypher\u547d\u4ee4\u4e2d\u7684\u6392\u5e8f\u4f7f\u7528\u7684\u662forder by. \u6f14\u793a: # \u5339\u914d\u67e5\u8be2\u6807\u7b7e Employee , \u5c06\u6240\u6709\u5339\u914d\u7ed3\u679c\u6309\u7167 id\u503c\u5347\u5e8f\u6392\u5217\u540e\u8fd4\u56de\u7ed3\u679c MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . id # \u5982\u679c\u8981\u6309\u7167\u964d\u5e8f\u6392\u5e8f , \u53ea\u9700\u8981\u5c06 ORDER BY e . salary\u6539\u5199\u4e3aORDER BY e . salary DESC MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . salary DESC - \u6548\u679c:","title":"8 sort\u547d\u4ee4"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#9","text":"","title":"9 \u5b57\u7b26\u4e32\u51fd\u6570:"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#1-toupper","text":"\u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd. \u6f14\u793a: MATCH ( e : Employee ) RETURN e . id , toUpper ( e . name ), e . salary , e . deptno \u6548\u679c:","title":"1 toUpper()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#2-tolower","text":"\u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd. \u6f14\u793a: MATCH ( e : Employee ) RETURN e . id , toLower ( e . name ), e . salary , e . deptno - \u6548\u679c:","title":"2 toLower()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#3-substring","text":"\u8fd4\u56de\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32. \u6f14\u793a: # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u8fd4\u56de\u4ece\u7d22\u5f15 start_index\u5f00\u59cb , \u5230 end_index - 1 \u7ed3\u675f\u7684\u5b50\u5b57\u7b26\u4e32 substring ( input_str , start_index , end_index ) # \u793a\u4f8b\u4ee3\u7801 , \u8fd4\u56de\u5458\u5de5\u540d\u5b57\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd MATCH ( e : Employee ) RETURN e . id , substring ( e . name , 0 , 2 ), e . salary , e . deptno - \u6548\u679c:","title":"3 substring()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#4-replace","text":"\u66ff\u6362\u6389\u5b50\u5b57\u7b26\u4e32. \u6f14\u793a: # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7b26\u5408 origin_str\u7684\u90e8\u5206 , \u66ff\u6362\u6210 new_str replace ( input_str , origin_str , new_str ) # \u793a\u4f8b\u4ee3\u7801 , \u5c06\u5458\u5de5\u540d\u5b57\u66ff\u6362\u4e3a\u6dfb\u52a0\u540e\u7f00 _HelloWorld MATCH ( e : Employee ) RETURN e . id , replace ( e . name , e . name , e . name + \"_HelloWorld\" ), e . salary , e . deptno # \u8fd8\u539f MATCH ( e : Employee ) RETURN e . id , replace ( e . name , \"_HelloWorld\" , \"\" ), e . salary , e . deptno - \u6548\u679c:","title":"4 replace()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#10","text":"","title":"10 \u805a\u5408\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#1-count","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u6761\u6570. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2a\u6570 MATCH ( e : Employee ) RETURN count ( * ) - \u6548\u679c:","title":"1 count()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#2-max","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5927\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6700\u9ad8\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN max ( e . salary ) - \u6548\u679c:","title":"2 max()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#3-min","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5c0f\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6700\u4f4e\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN min ( e . salary ) - \u6548\u679c:","title":"3 min()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#4-sum","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5168\u90e8\u52a0\u548c\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u548c MATCH ( e : Employee ) RETURN sum ( e . salary ) - \u6548\u679c:","title":"4 sum()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#5-avg","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5e73\u5747\u503c. \u6f14\u793a: # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d , \u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u5e73\u5747\u503c MATCH ( e : Employee ) RETURN avg ( e . salary ) - \u6548\u679c:","title":"5 avg()\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#11-index","text":"Neo4j\u652f\u6301\u5728\u8282\u70b9\u6216\u5173\u7cfb\u5c5e\u6027\u4e0a\u7684\u7d22\u5f15, \u4ee5\u63d0\u9ad8\u67e5\u8be2\u7684\u6027\u80fd. \u53ef\u4ee5\u4e3a\u5177\u6709\u76f8\u540c\u6807\u7b7e\u540d\u79f0\u7684\u6240\u6709\u8282\u70b9\u7684\u5c5e\u6027\u521b\u5efa\u7d22\u5f15.","title":"11 \u7d22\u5f15index"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#1","text":"\u4f7f\u7528create index on\u6765\u521b\u5efa\u7d22\u5f15. \u6f14\u793a: # \u521b\u5efa\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 CREATE INDEX ON : Employee ( id ) - \u6548\u679c:","title":"1 \u521b\u5efa\u7d22\u5f15"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#2","text":"\u4f7f\u7528drop index on\u6765\u5220\u9664\u7d22\u5f15. \u6f14\u793a: # \u5220\u9664\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 DROP INDEX ON : Employee ( id ) - \u6548\u679c:","title":"2 \u5220\u9664\u7d22\u5f15"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#pythonneo4j","text":"","title":"\u5728Python\u4e2d\u4f7f\u7528Neo4j"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#1-neo4j","text":"\u8981\u901a\u8fc7python\u6765\u64cd\u4f5cNeo4j, \u9996\u5148\u9700\u8981\u5b89\u88c5py2neo, \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528pip\u5b89\u88c5. pip install py2neo \u5728\u5b89\u88c5\u5b8c\u6210\u540e, \u76f4\u63a5\u8c03\u7528py2neo\u5373\u53ef # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 # \u5bfc\u5165\u521b\u5efa\u8282\u70b9\u3001\u5173\u7cfb\u7684\u5de5\u5177\u5305 from py2neo import Graph , Node , Relationship # \u5bfc\u5165\u67e5\u8be2\u8282\u70b9\u3001\u5173\u7cfb\u7684\u5de5\u5177\u5305 from py2neo import NodeMatcher , RelationshipMatcher # \u5b9e\u4f8b\u5316\u56fe\u6570\u636e\u5e93 # \u8fde\u63a5neo4j\u6570\u636e\u5e93, \u8f93\u5165\u5730\u5740\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801 graph = Graph ( 'http://127.0.0.1:7474/' , auth = ( 'neo4j' , '12345' ))","title":"1 \u8fde\u63a5 Neo4j \u6570\u636e\u5e93:"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#2_1","text":"\u4f7f\u7528py2neo\u521b\u5efa\u8282\u70b9, \u6211\u4eec\u4e00\u822c\u76f4\u63a5\u4f7f\u7528 Node \u8282\u70b9\u7c7b\u6765\u521b\u5efa, \u5efa\u7acb\u8282\u70b9\u7684\u65f6\u5019\u9700\u8981\u5b9a\u4e49\u8282\u70b9\u7684\u7c7b\u578b\uff08label\uff09\u4ee5\u53ca\u8282\u70b9\u7684\u5c5e\u6027\uff08property\uff09, \u4e0b\u9762\u662f\u4ee3\u7801\u6f14\u793a: # \u5b9a\u4e49\u8282\u70b91, \u6807\u7b7e\u7c7b\u522b\u4e3aStudent, \u5c5e\u6027: name:jack, age:18 node1 = Node ( \"Student\" , name = \"jack\" , age = 18 ) # \u6ce8\u610f: \u8fd9\u91cc\u4e0d\u8981\u52a0\u201clabel=\u201d, \u5426\u5219label\u4f1a\u4ee5\u5c5e\u6027\u7684\u5f62\u5f0f\u5c55\u793a, \u800c\u975e\u6807\u7b7e # \u5b9a\u4e49\u8282\u70b92, \u6807\u7b7e\u7c7b\u522b\u4e3aStudent, \u5c5e\u6027: name:lucy, age:20 node2 = Node ( \"Student\" , name = \"lucy\" , age = 20 ) # \u8c03\u7528graph\u5bf9\u8c61\u7684create\u65b9\u6cd5\u5b8c\u6210\u8282\u70b9\u7684\u521b\u5efa graph . create ( node1 ) graph . create ( node2 )","title":"2 \u5efa\u7acb\u8282\u70b9"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#3","text":"\u4f7f\u7528py2neo\u521b\u5efa\u5173\u7cfb\u65f6, \u6211\u4eec\u4e00\u822c\u4f7f\u7528 Relationship \u5173\u7cfb\u7c7b\u6765\u521b\u5efa, \u5efa\u7acb\u5173\u7cfb\u7684\u65f6\u5019, \u9700\u8981\u8003\u8651\u5173\u7cfb\u7684\u65b9\u5411, \u56e0\u6b64\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u8d77\u59cb\u8282\u70b9\u548c\u4e00\u4e2a\u7ed3\u675f\u8282\u70b9. \uff08\u6ce8\u610f: \u5982\u679c\u8d77\u59cb\u8282\u70b9\u548c\u7ed3\u675f\u8282\u70b9\u76f8\u540c, \u90a3\u4e48\u8fd9\u4e2a\u5173\u7cfb\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u6307\u5411\u81ea\u5df1\uff09. \u5728\u8282\u70b9\u5173\u7cfb\u5efa\u7acb\u7684\u8fc7\u7a0b\u4e2d, \u5982\u679c\u4e4b\u524d\u6ca1\u6709\u521b\u5efa\u8fc7\u8282\u70b9, \u90a3\u4e48\u4f1a\u9ed8\u8ba4\u521b\u5efa\u8282\u70b9 \u4e0b\u9762\u4ee3\u7801\u6f14\u793a: # \u5b9e\u4f8b\u5316\u5173\u7cfb\u7c7b\u5bf9\u8c61 relation1 = Relationship ( node1 , 'Friend' , node2 ) # \u8c03\u7528graph\u5bf9\u8c61\u7684create\u65b9\u6cd5\u5b8c\u6210\u5173\u7cfb\u7684\u521b\u5efa graph . create ( relation1 ) # \u5b9e\u4f8b\u5316\u5173\u7cfb\u7c7b\u5bf9\u8c61 relation2 = Relationship ( node2 , 'Friend' , node1 ) # \u8c03\u7528graph\u5bf9\u8c61\u7684create\u65b9\u6cd5\u5b8c\u6210\u5173\u7cfb\u7684\u521b\u5efa graph . create ( relation2 )","title":"3 \u8282\u70b9\u5173\u7cfb\u7684\u5efa\u7acb"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#4-nodematcher","text":"\u901a\u5e38\u67e5\u8be2\u8282\u70b9, \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a NodeMatcher \u5bf9\u8c61, \u7136\u540e\u8c03\u7528 match \u65b9\u6cd5\u6765\u6307\u660e\u8981\u5339\u914d\u54ea\u79cdlabel\u7684\u8282\u70b9, \u8fd8\u53ef\u4ee5\u4f7f\u7528where\u6765\u8fdb\u884c\u6761\u4ef6\u7b5b\u9009\uff08\u6709\u4e24\u79cd\u65b9\u6cd5\uff09. \u6ce8\u610f: \u5982\u679c\u8282\u70b9\u5b58\u5728, \u8fd4\u56de\u7684\u7ed3\u679c\u662f NodeMatcher \u7684\u5bf9\u8c61, \u9700\u8981\u8f6c\u5316\u6210Node\u5bf9\u8c61, \u53ef\u4ee5\u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9, \u6216\u8005\u8f6c\u5316\u6210\u8282\u70b9\u7684list. \u4e0b\u9762\u4ee3\u7801\u6f14\u793a1: \u4e0d\u5e26where\u6761\u4ef6, \u8fd4\u56de\u6240\u6709\u6ee1\u8db3\u6807\u7b7e\u7684\u8282\u70b9: # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u7528list\u65b9\u5f0f\u8fd4\u56de\u8282\u70b9\u5217\u8868 nodes = list ( node_match . match ( 'Student' )) # print(nodes)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # [Node('Student', age=18, name='jack'), Node('Student', age=20, name='lucy')] # \u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 node = node_match . match ( 'Student' ) . first () # print(node)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_10:Student {age: 18, name: 'jack'}) \u4e0b\u9762\u4ee3\u7801\u6f14\u793a2: where\u6761\u4ef6\u7684\u7b2c\u4e00\u79cd\u5199\u6cd5: \u628a\u5339\u914d\u7684\u5c5e\u6027\u548c\u503c\u5199\u6210key=value\u7684\u5f62\u5f0f, \u4f8b\u5982\u4e0a\u9762where(age='18'), \u8fd9\u79cd\u5199\u6cd5\u53ea\u80fd\u6309\u7167\u503c\u662f\u5426\u5b8c\u5168\u4e00\u81f4\u6765\u5339\u914d, \u4e0d\u80fd\u6309\u7167\u503c\u7684\u5927\u5c0f\u6765\u7b5b\u9009, \u5982\u679c\u5199\u6210where(age>'18'), \u4f1a\u62a5\u9519. # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u7528list\u65b9\u5f0f\u8fd4\u56de\u8282\u70b9\u5217\u8868 nodes = list ( node_match . match ( 'Student' ) . where ( age = 18 )) # print(nodes)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # [Node('Student', age=18, name='jack')] # \u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 node = node_match . match ( 'Student' ) . where ( age = 18 ) . first () # print(node)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_10:Student {age: 18, name: 'jack'}) \u4e0b\u9762\u4ee3\u7801\u6f14\u793a3: where\u6761\u4ef6\u7684\u7b2c\u4e8c\u79cd\u5199\u6cd5: \u6a21\u7cca\u5339\u914d, \u53ef\u4ee5\u628a\u6761\u4ef6\u8868\u8fbe\u5f0f\u5199\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32, \u6574\u4f53\u653e\u5728where\u8bed\u53e5\u4e2d, \u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d, \u53ef\u4ee5\u7528 _ \u6765\u4ee3\u6307\u5339\u914d\u5230\u7684\u8282\u70b9. # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u7528list\u65b9\u5f0f\u8fd4\u56de\u8282\u70b9\u5217\u8868 nodes = list ( node_match . match ( 'Student' ) . where ( age > 18 )) # print(nodes)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # [[Node('Student', age=20, name='lucy')] # \u7528first\u65b9\u6cd5\u53d6\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 node = node_match . match ( 'Student' ) . where ( age > 18 ) . first () # print(node)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_11:Student {age: 20, name: 'lucy'}) # \u5c06NodeMatcher\u8fd4\u56de\u7684\u7ed3\u679c\u8f6c\u5316\u4e3aNode\u6570\u636e\u7c7b\u578b\u6216\u8005Node\u7684list\u4e4b\u540e, \u53ef\u4ee5\u8f7b\u677e\u8bbf\u95eeNode\u5c5e\u6027, \u5982\u4e0a\u9762\u6700\u540e\u4e00\u4f8b\u7684\u7ed3\u679c, \u8bbf\u95ee\u5176\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684name\u5c5e\u6027: print ( node [ 'name' ]) ----> lucy","title":"4 \u4f7f\u7528 NodeMatcher \u67e5\u8be2\u8282\u70b9"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#5-relationshipmatcher","text":"\u901a\u5e38\u67e5\u8be2\u5173\u7cfb, \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a RelationshipMatcher \u5bf9\u8c61, \u7136\u540e\u8c03\u7528 match \u65b9\u6cd5\u6765\u5339\u914d\u5173\u7cfb, \u67e5\u8be2\u5173\u7cfb\u7684match\u65b9\u6cd5\u6709\u4e09\u4e2a\u53ca\u4ee5\u4e0a\u53c2\u6570: \u7b2c\u4e00\u4e2a\u53c2\u6570: \u8282\u70b9\u7684\u5e8f\u5217\u6216\u5219set, \u53ef\u4ee5\u4e3aNone\u8868\u793a\u4efb\u610f\u8282\u70b9\u5747\u53ef \u7b2c\u4e8c\u4e2a\u53c2\u6570: \u6307\u5b9a\u5173\u7cfb\u7684\u7c7b\u578b, \u53ef\u4ee5\u4e3aNone\u8868\u793a\u4efb\u610f\u7c7b\u578b\u7684\u5173\u7cfb\u5747\u53ef \u7b2c\u4e09\u4e2a\u53c2\u6570: \u8981\u5339\u914d\u7684\u5c5e\u6027, \u5199\u6210key=value\u5f62\u5f0f \u6ce8\u610f: match\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662fRelationshipMatcher\u5bf9\u8c61, \u9700\u8981\u901a\u8fc7first\u8f6c\u5316\u6210Relationship\u6570\u636e\u7ed3\u6784, \u6216\u8005\u8f6c\u5316\u4e3a list . \u4e0b\u9762\u4ee3\u7801\u6f14\u793a1, \u6bd4\u5982\u60f3\u8981\u67e5\u8be2\u201cjack\u201d\u8282\u70b9\u7684\u6240\u6709\u5173\u7cfb. \u5148\u67e5\u8be2\u8282\u70b9, \u518d\u6839\u636e\u8282\u70b9\u67e5\u5173\u7cfb, r_type=None\u8868\u793a\u4efb\u610f\u5173\u7cfb\u7c7b\u578b\u5747\u53ef. #\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf, \u56e0\u4e3a\u4e4b\u524d\u53ea\u6709\u4e00\u79cd\u5173\u7cfb, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u591a\u521b\u5efa\u51e0\u79cd\u5173\u7cfb node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node3 = Node ( \"Location\" , name = \"America\" ) node4 = Node ( \"Sports\" , name = 'football' ) relation3 = Relationship ( node1 , 'Country' , node3 ) graph . create ( relation3 ) relation4 = Relationship ( node1 , 'Hobby' , node4 ) graph . create ( relation4 ) # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () relationship = list ( relation_match . match ([ node1 ], r_type = None )) # print(relationship) ---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b \"[ Hobby ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Sports' , name = 'football' )), Country ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Location' , name = 'America' )), Friend ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Student' , age = 20 , name = 'lucy' )) ] \" \u4e0b\u9762\u4ee3\u7801\u6f14\u793a2: \u6bd4\u5982\u60f3\u8981\u67e5\u8be2\u201cjack\u201d\u548c\u201clucy\u201d\u5173\u7cfb. \u4e24\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\u8868\u793a\u8981\u5339\u914d\u7684\u5173\u7cfb\u65b9\u5411. \u56fe\u4e2d\u201cjack\u201d\u548c\u201clucy\u201d\u8282\u70b9\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u662f\u53cc\u5411\u7684, \u4f46\u662f\u67e5\u8be2\u7ed3\u679c\u53ea\u7ed9\u4e86\u4e00\u6761 # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node2 = node_match . match ( 'Student' ) . where ( name = 'lucy' ) . first () relationship = list ( relation_match . match ([ node1 , node2 ], r_type = None )) # print(relationship) ---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b # [Friend(Node('Student', age=18, name='jack'), Node('Student', age=20, name='lucy'))] \u4e0b\u9762\u4ee3\u7801\u6f14\u793a3: \u8be2\u56fe\u4e2d\u67d0\u4e00\u7c7b\u5173\u7cfb, \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aNone, \u7b2c\u4e8c\u4e2a\u53c2\u6570r_type\u6307\u5b9a\u5173\u7cfb\u7c7b\u578b # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) relationship = list ( relation_match . match ( None , r_type = 'Friend' )) # print(relationship) ---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b \"[ Friend ( Node ( 'Student' , age = 18 , name = 'jack' ), Node ( 'Student' , age = 20 , name = 'lucy' )), Friend ( Node ( 'Student' , age = 20 , name = 'lucy' ), Node ( 'Student' , age = 18 , name = 'jack' )) ] \"","title":"5 \u4f7f\u7528RelationshipMatcher\u67e5\u8be2\u5173\u7cfb"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#6","text":"\u4ee5 \u201cjack\u201d\u8282\u70b9\u4e3a\u4f8b, \u589e\u52a0\u4e00\u4e2a\u73ed\u7ea7\u5c5e\u6027class, \u66f4\u65b0\u5230\u56fe\u6570\u636e\u5e93\u91cc\u9762, \u4f7f\u7528push\u51fd\u6570\u6765\u8fdb\u884c\u66f4\u65b0\u5373\u53ef \u4e0b\u9762\u4ee3\u7801\u6f14\u793a: node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node1 [ \"class\" ] = \"9\" # \u589e\u52a0\u5c5e\u6027 node1 [ 'age' ] = 21 # \u66f4\u6539\u5c5e\u6027 graph . push ( node1 ) # print(node1)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: # (_10:Student {age: 21, class: '9', name: 'jack'}) \u4ee5\u201cjack\u201d\u548c\u201clucy\u201d\u4e24\u8282\u70b9\u7684\u5173\u7cfb\u4e3a\u4f8b, \u589e\u52a0\u5173\u7cfb\u5c5e\u6027\u5982: \u4eb2\u5bc6\u5ea6, \u66f4\u65b0\u5230\u56fe\u6570\u636e\u5e93\u91cc\u9762, \u4f7f\u7528push\u51fd\u6570\u6765\u8fdb\u884c\u66f4\u7ec6\u5373\u53ef node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node2 = node_match . match ( 'Student' ) . where ( name = 'lucy' ) . first () relationship = relation_match . match ([ node1 , node2 ], r_type = \"Friend\" ) . first () relationship [ 'intimacy' ] = 1 #\u589e\u52a0\u5c5e\u6027 graph . push ( relationship ) # print(relationship)---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b # (jack)-[:Friend {intimacy: 1}]->(lucy)","title":"6 \u8282\u70b9\u3001\u5173\u7cfb\u5c5e\u6027\u503c\u7684\u66f4\u65b0"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#7","text":"\u5f53\u5220\u9664\u8282\u70b9\u6216\u8005\u5173\u7cfb\u65f6, \u4e3b\u8981\u4f7f\u7528\u7684\u51fd\u6570graph.delete() \u6216\u8005\u51fd\u6570graph.separate(), \u53ef\u4ee5\u4f20\u9012\u53c2\u6570: \u8282\u70b9\u3001\u5173\u7cfb\u3001\u56fe\u7b49 \u6e05\u7a7a\u56fe\u6570\u636e\u5e93: graph.delete_all() \u4e0b\u9762\u4ee3\u7801\u6f14\u793a: \u6ce8\u610f, \u5728\u5355\u72ec\u5220\u9664\u8282\u70b9\u524d, \u5982\u679c\u8282\u70b9\u5b58\u5728\u5173\u7cfb, \u5219\u76f4\u63a5\u5220\u9664\u8282\u70b9\u4f1a\u62a5\u9519, \u56e0\u6b64\u9700\u8981\u5148\u5220\u9664\u5173\u7cfb, \u5728\u5220\u9664\u8282\u70b9 # \u67e5\u627e\u201cjack\u201d\u8282\u70b9\u3001\"football\"\u8282\u70b9, \u4ee5\u53ca\u5bf9\u5e94\u7684\u5174\u8da3\u5173\u7cfb node1 = node_match . match ( 'Student' ) . where ( name = 'jack' ) . first () node2 = node_match . match ( 'Sports' ) . where ( name = 'football' ) . first () relationship = relation_match . match ([ node1 , node2 ], r_type = \"Hobby\" ) . first () # \u53ea\u5220\u9664\u5173\u7cfb graph . separate ( relationship ) # \u53ea\u5220\u9664\u67d0\u4e2a\u8282\u70b9 graph . separate ( node1 ) # \u5220\u9664\u5173\u7cfb\u7684\u540c\u65f6\u4e5f\u5220\u9664\u8282\u70b9 graph . delete ( relationship ) # \u5220\u9664\u8282\u70b9\u5c5e\u6027 node1 = node_match . match ( 'Student' ) . where ( name = 'lucy' ) . first () # print(node1) ---> (_11:Student {age: 20, name: 'lucy'}) del node1 [ 'age' ] # print(node1) ---> (_11:Student {name: 'lucy'}) graph . push ( node1 ) # \u6e05\u7a7a\u56fe\u6570\u636e\u5e93 graph . delete_all ()","title":"7 \u8282\u70b9\u3001\u5173\u7cfb\u5220\u9664"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#8-cypherrun","text":"NodeMatcher \u548cRelationshipMatcher \u80fd\u591f\u8868\u8fbe\u7684\u5339\u914d\u6761\u4ef6\u76f8\u5bf9\u7b80\u5355, \u66f4\u52a0\u590d\u6742\u7684\u67e5\u8be2\u8fd8\u662f\u9700\u8981\u7528Cypher\u8bed\u53e5\u6765\u8868\u8fbe. Py2neo\u672c\u8eab\u652f\u6301\u6267\u884cCypher\u8bed\u53e5\u7684\u6267\u884c, \u53ef\u4ee5\u5c06\u590d\u6742\u7684\u67e5\u8be2\u5199\u6210Cypher\u8bed\u53e5, \u901a\u8fc7graph.run\u65b9\u6cd5\u67e5\u8be2, \u8fd4\u56de\u7684\u7ed3\u679c\u53ef\u4ee5\u8f6c\u5316\u4e3a pandas.DataFrame \u6216\u8005 pandas.Series \u5bf9\u8c61, \u4ece\u800c\u548c\u5176\u4ed6\u6570\u636e\u5206\u6790\u5de5\u5177\u65e0\u7f1d\u8854\u63a5. cypher_ = \"MATCH (n: Student) WHERE n.age > 16 RETURN n.name AS Name, n.age AS Age\" df = graph . run ( cypher_ ) . to_data_frame () # pythonprint(df)--->\u6253\u5370\u7ed3\u679c\u5982\u4e0b: Name Age 0 jack 18 1 lucy 20","title":"8 \u76f4\u63a5\u6267\u884cCypher\u8bed\u53e5\uff08run\uff09"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#9-schema","text":"\u67e5\u770b\u8282\u70b9\u7684\u7c7b\u578b\u7528graph.schema.node_labels. \u67e5\u770b\u5173\u7cfb\u7684\u7c7b\u578b\u7528graph.schema.relationship_types, \u5b83\u4eec\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u90fd\u662f frozenset , \u662f\u4e0d\u80fd\u589e\u5220\u5143\u7d20\u7684\u96c6\u5408. # \u67e5\u770b\u6240\u6709\u8282\u70b9\u7c7b\u578b labels = graph . schema . node_labels # print(labels)---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b: # frozenset({'Sports', 'Student', 'Location'}) # \u67e5\u770b\u6240\u6709\u5173\u7cfb\u7c7b\u578b relation_types = graph . schema . relationship_types # print(relation_types)---> \u6253\u5370\u7ed3\u679c\u5982\u4e0b: # frozenset({'Country', 'Friend', 'Hobby'})","title":"9 \u4f7f\u7528schema\u67e5\u8be2\u56fe\u4e2d\u8282\u70b9\u548c\u5173\u7cfb\u7c7b\u578b\u6709\u54ea\u4e9b"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/02-Neo4j%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D.html#_2","text":"\u5b66\u4e60\u4e86 Neo4j \u56fe\u6570\u636e\u5e93\u7684\u76f8\u5173\u6982\u5ff5\u548c\u4ea7\u54c1\u4ecb\u7ecd, \u4ee5\u53ca Neo4j \u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u548c\u4f7f\u7528 \u5b66\u4e60\u4e86Cypher\u8bed\u53e5\u7684\u57fa\u672c\u7528\u6cd5 (\u4e00\u79cd\u7528\u4e8eneo4j\u56fe\u6570\u636e\u5e93\u7684\u67e5\u8be2\u8bed\u8a00) \u5b66\u4e60\u4e86\u5728python\u4e2d\u4f7f\u7528Neo4j\u56fe\u6570\u636e\u5e93\u7684\u65b9\u6cd5: \u57fa\u4e8epy2neo\u7b2c\u4e09\u65b9\u5e93, \u5b9e\u73b0\u56fe\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html","text":"\u57fa\u4e8eNeo4j\u56fe\u6570\u636e\u5e93\u6784\u5efa\u77e5\u8bc6\u56fe\u8c31 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1\u4f7f\u7528py2neo\u5b9e\u73b0Neo4j\u56fe\u8c31\u6784\u5efa\u7684\u65b9\u6cd5 \u638c\u63e1\u4f7f\u7528Neo4j\u56fe\u6570\u636e\u5e93\u8fdb\u884c\u5173\u7cfb\u903b\u8f91\u67e5\u8be2\u7684\u65b9\u6cd5 \u672c\u9879\u76ee\u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u5c55\u73b0 \u00b6 \u5b9e\u73b0\u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u642d\u5efa\u7684\u57fa\u672c\u6d41\u7a0b \u00b6 \u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u6570\u636e \u7b2c\u4e8c\u6b65\uff1a\u7f16\u5199\u521b\u5efa\u8282\u70b9\u7684\u51fd\u6570 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u521b\u5efa\u5173\u7cfb\u7684\u51fd\u6570 \u7b2c\u56db\u6b65\uff1a\u5c06SPO\u6570\u636e\u5168\u90e8\u5bfc\u5165Neo4j\u6570\u636e\u5e93\u4e2d \u7b2c\u4e94\u6b65\uff1aNeo4j\u56fe\u6570\u636e\u5e93\u7684\u5e94\u7528 \u7b2c\u4e00\u6b65 \u51c6\u5907\u6570\u636e \u00b6 \u6587\u4ef6\u4ee3\u7801\u8def\u5f84\uff1a/home/ec2-user/Casrel_RE/relationship_extract/codes/map_display.py \u9996\u5148\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u5305 # \u5bfc\u5165\u5e93 from py2neo import Graph , Node , Relationship from py2neo import NodeMatcher , RelationshipMatcher # \u5bfc\u5165\u6a21\u578b\u9884\u6d4b\u65b9\u6cd5 from predict import * from config import * from tqdm import tqdm import json conf = Config () # \u5b9e\u4f8b\u5316\u56fe\u6570\u636e\u5e93 # \u8fde\u63a5neo4j\u6570\u636e\u5e93\uff0c\u8f93\u5165\u5730\u5740\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801 graph = Graph ( 'http://127.0.0.1:7474/' , auth = ( 'neo4j' , '12345' )) # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) \u6784\u5efa\u7b2c\u4e00\u4e2a\u51fd\u6570get_spo()\uff1a\u83b7\u53d6\u5b9e\u4f53\u7c7b\u578b\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b # \u83b7\u53d6\u5b9e\u4f53\u7c7b\u578b\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b def get_spo (): '''' \u51fd\u6570\u529f\u80fd\u63cf\u8ff0\uff1a 1\u3001\u5728\u6b63\u5e38\u4f7f\u7528\u6a21\u578b\u9884\u6d4bspo\u65f6\uff0c\u56e0\u4e3a\u6a21\u578b\u4e0d\u80fd\u7b2c\u4e00\u65f6\u95f4\u7ed9\u51fasubject\u548cobject\u7684\u7c7b\u578b\uff0c \u56e0\u6b64\uff0c\u8fd9\u91cc\u6211\u4eec\u501f\u52a9\u8bad\u7ec3\u96c6\u4e2d\u7684\u7c7b\u578b\u5373\u53ef 2\u3001\u5982\u679c\u8bad\u7ec3\u96c6\u4e5f\u6ca1\u6709\uff0c\u53ef\u4ee5\u6839\u636e\u9884\u6d4b\u5173\u7cfb\u7684\u7c7b\u522b\u81ea\u5df1\u5b9a\u4e49\u6bd4\u5982\uff1a\u51fa\u751f\u65e5\u671f\uff0csubject\u4e00\u822c\u4e3a\u4eba\u540d\uff0cobject\u4e00\u822c\u4e3a\u65e5\u671f\u6216\u65f6\u95f4 ''' dict1 = {} with open ( conf . train_data_path , 'r' , encoding = 'utf-8' ) as fr : for line in fr . readlines (): line = json . loads ( line ) spo_list = line [ 'spo_list' ] for spo in spo_list : if spo [ 'predicate' ] not in dict1 : dict1 [ spo [ 'predicate' ]] = spo if len ( dict1 ) == 18 : break # with open('rel_type.json', 'a', encoding='utf-8') as fw: # fw.write(json.dumps(dict1, ensure_ascii=False, indent=4)) return dict1 \u6784\u5efa\u7b2c\u4e8c\u4e2a\u51fd\u6570ready_data()\uff1a\u51c6\u5907SPO\u6570\u636e\uff08\u9644\u5e26\u4e3b\u3001\u5ba2\u5b9e\u4f53\u7c7b\u578b\u3001\u5173\u7cfb\u7c7b\u578b\uff09 # \u6839\u636e\u6a21\u578b\u9884\u6d4bspo,\u51c6\u5907\u6570\u636e def ready_data (): ''' \u901a\u8fc7\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5bf9\u9700\u8981\u5f85\u9884\u6d4b\u5173\u7cfb\u7684\u6587\u672c\u5b9e\u73b0\u9884\u6d4b\uff0c\u5e76\u5c06\u9884\u6d4b\u7ed3\u679c\u5b58\u50a8\u5230\u6587\u4ef6\u4e2d :return: ''' # \u83b7\u53d6\u5305\u542b\u5b9e\u4f53\u548c\u5173\u7cfb\u7c7b\u578b\u7684\u5b57\u5178 type_dict = get_spo () # \u5bfc\u5165\u8bad\u7ec3\u597d\u7684\u6a21\u578b model_path = '../save_model/last_model.pth' mymodel = load_model ( model_path ) # \u8bfb\u53d6\u6d4b\u8bd5\u96c6\u6587\u6863\u8fdb\u884c\u9884\u6d4b with open ( conf . test_data_path , 'r' , encoding = 'utf-8' ) as fr : lines = fr . readlines () for line in tqdm ( lines ): line = json . loads ( line ) # print(line) sample = line [ 'text' ] outputs = model2predict ( sample , mymodel ) if len ( outputs ) == 0 : continue spo_list = outputs [ 'spo_list' ] # print(spo_list) for spo in spo_list : if spo [ 'predicate' ] in type_dict : spo [ 'subject_type' ] = type_dict [ spo [ 'predicate' ]][ 'subject_type' ] spo [ 'object_type' ] = type_dict [ spo [ 'predicate' ]][ 'object_type' ] with open ( '../data/predict_spo.json' , 'a' , encoding = 'utf-8' ) as fw : fw . write ( json . dumps ( spo , ensure_ascii = False ) + ' \\n ' ) \u7b2c\u4e8c\u6b65 \u7f16\u5199\u521b\u5efa\u8282\u70b9\u7684\u51fd\u6570 \u00b6 \u6784\u5efa\u7b2c\u4e09\u4e2a\u51fd\u6570create_node() \uff1a\u521b\u5efa\u8282\u70b9 # \u521b\u5efa\u8282\u70b9 def create_node ( graph , label , attrs ): #\u7b2c\u4e00\u6b21\uff1a\u5982\u679c\u4f60\u7684\u56fe\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6570\u636e\u662f\u6ca1\u6709\u7528\u7684\u53ef\u4ee5\u76f4\u63a5\u6e05\u7a7a # graph.delete_all() # \u6784\u5efa\u8282\u70b9\u7684\u5c5e\u6027\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u591a\u4e2a\u5c5e\u6027\u8981\u540c\u65f6\u5224\u65ad\uff0c\u6240\u4ee5\u52a0\u4e0aand condition = \"\" for key , value in attrs . items (): condition += '_. %s =' % key + ' \\\" ' + value + ' \\\" ' + \" and \" # \u5c06condition\u6700\u540e\u7684and\u5b57\u7b26\u53bb\u6389 condition = condition [: - 5 ] # \u6839\u636e\u5c5e\u6027\u6761\u4ef6\u67e5\u8be2\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u82e5\u5b58\u5728\u5219\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56deNone value = node_match . match ( label ) . where ( condition ) . first () # \u5982\u679c\u8981\u521b\u5efa\u7684\u8282\u70b9\u4e0d\u5b58\u5728\u5219\u518d\u521b\u5efa if value is None : node = Node ( label , ** attrs ) node = graph . create ( node ) return node return None \u7b2c\u4e09\u6b65 \u7f16\u5199\u521b\u5efa\u5173\u7cfb\u7684\u51fd\u6570 \u00b6 \u6784\u5efa\u7b2c\u56db\u4e2a\u51fd\u6570 match_node() \uff1a\u5224\u65ad\u8282\u70b9\u662f\u5426\u5b58\u5728 # \u4f7f\u7528NodeMatcher\u67e5\u8be2\u8282\u70b9 def match_node ( label , attrs ): condition = \"\" for key , value in attrs . items (): condition += '_. %s =' % key + ' \\\" ' + value + ' \\\" ' + \" and \" # \u5c06condition\u6700\u540e\u7684 and \u5b57\u7b26\u53bb\u6389(\u6ce8\u610fand\u524d\u540e\u6709\u4e24\u4e2a\u7a7a\u683c) condition = condition [: - 5 ] # \u6839\u636e\u5c5e\u6027\u6761\u4ef6\u67e5\u8be2\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u82e5\u5b58\u5728\u5219\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 # \u6ce8\u610f\u52a0\u4e0a.first()\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9\u7ed3\u679c\uff0c\u4e0d\u52a0.first()\u8fd4\u56de\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u7ed3\u679c value = node_match . match ( label ) . where ( condition ) . first () return value \u6784\u5efa\u7b2c\u4e94\u4e2a\u51fd\u6570 create_relationship() \uff1a\u521b\u5efa\u4e24\u8282\u70b9\u7684\u5173\u7cfb # \u5efa\u7acb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb def create_relationship ( graph , label1 , attrs1 , label2 , attrs2 , r_name ): value1 = match_node ( label1 , attrs1 ) value2 = match_node ( label2 , attrs2 ) # \u5224\u65ad\u5b9e\u4f53\u662f\u5426\u5747\u5b58\u5728\uff0c\u5426\u5219\u65e0\u6cd5\u521b\u5efa\u5173\u7cfb if value1 is None or value2 is None : return False # \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u5b8c\u5173\u7cfb\uff0c\u5982\u679c\u5df2\u7ecf\u521b\u5efa\u5c31\u4e0d\u7528\u518d\u91cd\u590d\u5b9a\u4e49\u4e86\u3002\u5f53\u7136\u8fd9\u4e00\u6b65\u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3a\u76f8\u540c\u5b9e\u4f53\u5bf9\u521b\u5efa\u76f8\u540c\u5173\u7cfb\u65f6\uff0c\u7ed3\u679c\u4f1a\u8986\u76d6 # rel_value = match_relation(node1=value1, node2=value2, r_type=r_name) # print(\"rel_value:{}\".format(rel_value)) # if rel_value: # return False r = Relationship ( value1 , r_name , value2 ) graph . create ( r ) \u7b2c\u56db\u6b65 \u5c06SPO\u6570\u636e\u5168\u90e8\u5bfc\u5165Neo4j\u6570\u636e\u5e93\u4e2d \u00b6 \u6784\u5efa\u7b2c\u516d\u4e2a\u51fd\u6570 load_file_create_map(): \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6spo\u6570\u636e\u5bfc\u5165\u5230Neo4j\u6570\u636e\u5e93\u4e2d def load_file_create_map (): # \u9996\u5148\u9700\u8981\u8fd0\u884cready_data\u51fd\u6570\u83b7\u53d6\u6a21\u578b\u9884\u6d4b\u7684spo\u4e09\u5143\u7ec4\u6570\u636e\uff0c\u8fd9\u91cc\u662f\u901a\u8fc7\u6587\u4ef6\u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff08\u65b9\u4fbf\u53cd\u590d\u4f7f\u7528\uff09 # \u7b2c\u4e00\u6b21\u8fd0\u884c\u53ef\u4ee5\u6e05\u7a7a\u6240\u6709\u56fe\u6570\u636e graph . delete_all () # \u7b2c\u4e00\u6b65\u83b7\u53d6\u6570\u636e with open ( '../data/predict_spo.json' , 'r' , encoding = 'utf-8' ) as fr : for line in tqdm ( fr . readlines ()): line = json . loads ( line ) # todo: \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9 # \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9\u7684\u6807\u7b7e subject_label = line [ \"subject_type\" ] # \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9\u7684\u5c5e\u6027 sub_attrs = { 'name' : line [ \"subject\" ]} create_node ( graph , subject_label , sub_attrs ) # todo: \u5b9a\u4e49\u5ba2\u5b9e\u4f53\u8282\u70b9 # \u5b9a\u4e49\u5ba2\u5b9e\u4f53\u8282\u70b9\u7684\u6807\u7b7e object_label = line [ \"object_type\" ] # \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9\u7684\u5c5e\u6027 if \"\u65e5\u671f\" in line [ 'predicate' ]: obj_attrs = { 'date' : line [ \"object\" ]} else : obj_attrs = { 'name' : line [ \"object\" ]} create_node ( graph , object_label , obj_attrs ) # todo: \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u548c\u5ba2\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb r_name = line [ \"predicate\" ] create_relationship ( graph , subject_label , sub_attrs , object_label , obj_attrs , r_name ) \u7b2c\u4e94\u6b65 Neo4j\u56fe\u6570\u636e\u5e93\u7684\u5e94\u7528 \u00b6 \u6784\u5efa\u7b2c\u4e03\u4e2a\u51fd\u6570 use_neo4j2search(): \u4f7f\u7528Neo4j\u6570\u636e\u5e93\u67e5\u8be2 # \u67e5\u8be2Neo4j\u56fe\u6570\u636e\u5e93\u6570\u636e def use_neo4j2search (): # \u67e5\u8be2\u56fe\u4e2d\u8282\u70b9\u548c\u5173\u7cfb\u7c7b\u578b\u6709\u54ea\u4e9b node_labels = graph . schema . node_labels # \u67e5\u8be2\u4e00\u5171\u6709\u591a\u5c11\u79cd\u8282\u70b9\u7c7b\u578b print ( F \"Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u8282\u70b9\u7c7b\u578b\u4e3a\uff1a { node_labels } \" ) relation_types = graph . schema . relationship_types # \u67e5\u8be2\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5173\u7cfb\u7c7b\u578b print ( F \"Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u5173\u7cfb\u7c7b\u578b\u4e3a\uff1a { relation_types } \" ) # \u67e5\u8be2\u8282\u70b9\uff0c\u8fd9\u91cc\u4ee5label=\"\u4eba\u7269\", attrs = {\"name\": \"\u674e\u6668\"}\u4e3a\u4f8b node1 = match_node ( label = '\u4eba\u7269' , attrs = { \"name\" : '\u674e\u6668' }) print ( node1 ) # \u67e5\u8be2\u5173\u7cfb\uff0c\u4ee5\u4e0a\u8ff0\u7684\u540d\u5b57\u4e3a\u201c\u674e\u6668\u201d\u7684\u8282\u70b9\u4e3a\u51fa\u53d1\u70b9\uff0c\u8fdb\u884c\u5173\u7cfb\u7684\u67e5\u8be2 #eg1\uff1a\u67e5\u8be2\u201c\u674e\u6668\u201d\u8282\u70b9\u7684\u6240\u6709\u5173\u7cfb\uff1a\u5148\u67e5\u8282\u70b9\uff0c\u518d\u67e5\u5173\u7cfb\uff0cr_type=None\u8868\u793a\u4efb\u610f\u7684\u5173\u7cfb\u7c7b\u578b\u90fd\u53ef\u4ee5 ship_list1 = list ( relation_match . match ([ node1 ], r_type = None )) for reship in ship_list1 : print ( reship ) print ( '*' * 80 ) #eg2\uff1a\u67e5\u8be2\u201c\u674e\u6668\u201d\u548c\u201c\u4e2d\u56fd\u201d\u7684\u5173\u7cfb\uff1a\u4e24\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\u8868\u793a\u8981\u5339\u914d\u7684\u5173\u7cfb\u65b9\u5411\uff0cr_type=None\u8868\u793a\u4efb\u610f\u7684\u5173\u7cfb\u7c7b\u578b\u90fd\u53ef\u4ee5 node2 = match_node ( label = '\u56fd\u5bb6' , attrs = { \"name\" : '\u4e2d\u56fd' }) ship_list12 = list ( relation_match . match ([ node1 , node2 ], r_type = None )) for reship in ship_list12 : print ( reship ) print ( '*' * 80 ) #eg3\uff1a\u67e5\u8be2\u67d0\u4e00\u7c7b\u5173\u7cfb\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aNone\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570r_type=\u6307\u5b9a\u5173\u7cfb\u7c7b\u578b ship_list3 = list ( relation_match . match ( None , r_type = \"\u51fa\u751f\u65e5\u671f\" )) for reship in ship_list3 : print ( reship ) break \u8fd4\u56de\u7ed3\u679c Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u8282\u70b9\u7c7b\u578b\u4e3a \uff1a frozenset ({ '\u7f51\u7edc\u5c0f\u8bf4' , '\u4eba\u7269' , '\u6b4c\u66f2' , '\u5f71\u89c6\u4f5c\u54c1' , '\u65e5\u671f' , '\u5730\u70b9' , '\u4f01\u4e1a' , '\u56fe\u4e66\u4f5c\u54c1' , '\u56fd\u5bb6' , '\u7f51\u7ad9' , '\u6587\u672c' , '\u51fa\u7248\u793e' , '\u97f3\u4e50\u4e13\u8f91' , '\u5b66\u6821' }) Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u5173\u7cfb\u7c7b\u578b\u4e3a \uff1a frozenset ({ '\u6b4c\u624b' , '\u6c11\u65cf' , '\u6210\u7acb\u65e5\u671f' , '\u6bd5\u4e1a\u9662\u6821' , '\u56fd\u7c4d' , '\u5bfc\u6f14' , '\u4e0a\u6620\u65f6\u95f4' , '\u51fa\u54c1\u516c\u53f8' , '\u4f5c\u66f2' , '\u6240\u5c5e\u4e13\u8f91' , '\u4e3b\u6f14' , '\u51fa\u7248\u793e' , '\u4f5c\u8005' , '\u51fa\u751f\u65e5\u671f' , '\u4f5c\u8bcd' , '\u8fde\u8f7d\u7f51\u7ad9' , '\u51fa\u751f\u5730' }) ( _268 : \u4eba\u7269 { name : ' \\u674e\\u6668 ' }) ( \u674e\u6668 ) - [: \u51fa\u751f\u65e5\u671f {}] -> ( _19268 ) ( \u674e\u6668 ) - [: \u51fa\u751f\u5730 {}] -> ( \u5317\u4eac ) ( \u674e\u6668 ) - [: \u51fa\u751f\u5730 {}] -> ( \u6e56\u5357\u6e58\u4e61 ) ( \u674e\u6668 ) - [: \u6bd5\u4e1a\u9662\u6821 {}] -> ( \u9c81\u8fc5\u7f8e\u672f\u5b66\u9662 ) ( \u674e\u6668 ) - [: \u56fd\u7c4d {}] -> ( \u4e2d\u56fd ) ******************************************************************************** ( \u674e\u6668 ) - [: \u56fd\u7c4d {}] -> ( \u4e2d\u56fd ) ******************************************************************************** ( \u5434\u4e9a\u6c5d ) - [: \u51fa\u751f\u65e5\u671f {}] -> ( _4271 ) \u5c0f\u8282\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u57fa\u4e8e Neo4j \u56fe\u6570\u636e\u5e93\u5b9e\u73b0\u4e86\u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u7684\u642d\u5efa\u548c\u5e94\u7528","title":"5.3 \u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u642d\u5efa"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#neo4j","text":"","title":"\u57fa\u4e8eNeo4j\u56fe\u6570\u636e\u5e93\u6784\u5efa\u77e5\u8bc6\u56fe\u8c31"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_1","text":"\u638c\u63e1\u4f7f\u7528py2neo\u5b9e\u73b0Neo4j\u56fe\u8c31\u6784\u5efa\u7684\u65b9\u6cd5 \u638c\u63e1\u4f7f\u7528Neo4j\u56fe\u6570\u636e\u5e93\u8fdb\u884c\u5173\u7cfb\u903b\u8f91\u67e5\u8be2\u7684\u65b9\u6cd5","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_2","text":"","title":"\u672c\u9879\u76ee\u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u5c55\u73b0"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_3","text":"\u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u6570\u636e \u7b2c\u4e8c\u6b65\uff1a\u7f16\u5199\u521b\u5efa\u8282\u70b9\u7684\u51fd\u6570 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u521b\u5efa\u5173\u7cfb\u7684\u51fd\u6570 \u7b2c\u56db\u6b65\uff1a\u5c06SPO\u6570\u636e\u5168\u90e8\u5bfc\u5165Neo4j\u6570\u636e\u5e93\u4e2d \u7b2c\u4e94\u6b65\uff1aNeo4j\u56fe\u6570\u636e\u5e93\u7684\u5e94\u7528","title":"\u5b9e\u73b0\u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u642d\u5efa\u7684\u57fa\u672c\u6d41\u7a0b"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_4","text":"\u6587\u4ef6\u4ee3\u7801\u8def\u5f84\uff1a/home/ec2-user/Casrel_RE/relationship_extract/codes/map_display.py \u9996\u5148\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u5305 # \u5bfc\u5165\u5e93 from py2neo import Graph , Node , Relationship from py2neo import NodeMatcher , RelationshipMatcher # \u5bfc\u5165\u6a21\u578b\u9884\u6d4b\u65b9\u6cd5 from predict import * from config import * from tqdm import tqdm import json conf = Config () # \u5b9e\u4f8b\u5316\u56fe\u6570\u636e\u5e93 # \u8fde\u63a5neo4j\u6570\u636e\u5e93\uff0c\u8f93\u5165\u5730\u5740\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801 graph = Graph ( 'http://127.0.0.1:7474/' , auth = ( 'neo4j' , '12345' )) # \u5b9e\u4f8b\u5316\u8282\u70b9\u67e5\u8be2\u5bf9\u8c61 node_match = NodeMatcher ( graph ) # \u5b9e\u4f8b\u5316\u5173\u7cfb\u67e5\u8be2\u5bf9\u8c61 relation_match = RelationshipMatcher ( graph ) \u6784\u5efa\u7b2c\u4e00\u4e2a\u51fd\u6570get_spo()\uff1a\u83b7\u53d6\u5b9e\u4f53\u7c7b\u578b\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b # \u83b7\u53d6\u5b9e\u4f53\u7c7b\u578b\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b def get_spo (): '''' \u51fd\u6570\u529f\u80fd\u63cf\u8ff0\uff1a 1\u3001\u5728\u6b63\u5e38\u4f7f\u7528\u6a21\u578b\u9884\u6d4bspo\u65f6\uff0c\u56e0\u4e3a\u6a21\u578b\u4e0d\u80fd\u7b2c\u4e00\u65f6\u95f4\u7ed9\u51fasubject\u548cobject\u7684\u7c7b\u578b\uff0c \u56e0\u6b64\uff0c\u8fd9\u91cc\u6211\u4eec\u501f\u52a9\u8bad\u7ec3\u96c6\u4e2d\u7684\u7c7b\u578b\u5373\u53ef 2\u3001\u5982\u679c\u8bad\u7ec3\u96c6\u4e5f\u6ca1\u6709\uff0c\u53ef\u4ee5\u6839\u636e\u9884\u6d4b\u5173\u7cfb\u7684\u7c7b\u522b\u81ea\u5df1\u5b9a\u4e49\u6bd4\u5982\uff1a\u51fa\u751f\u65e5\u671f\uff0csubject\u4e00\u822c\u4e3a\u4eba\u540d\uff0cobject\u4e00\u822c\u4e3a\u65e5\u671f\u6216\u65f6\u95f4 ''' dict1 = {} with open ( conf . train_data_path , 'r' , encoding = 'utf-8' ) as fr : for line in fr . readlines (): line = json . loads ( line ) spo_list = line [ 'spo_list' ] for spo in spo_list : if spo [ 'predicate' ] not in dict1 : dict1 [ spo [ 'predicate' ]] = spo if len ( dict1 ) == 18 : break # with open('rel_type.json', 'a', encoding='utf-8') as fw: # fw.write(json.dumps(dict1, ensure_ascii=False, indent=4)) return dict1 \u6784\u5efa\u7b2c\u4e8c\u4e2a\u51fd\u6570ready_data()\uff1a\u51c6\u5907SPO\u6570\u636e\uff08\u9644\u5e26\u4e3b\u3001\u5ba2\u5b9e\u4f53\u7c7b\u578b\u3001\u5173\u7cfb\u7c7b\u578b\uff09 # \u6839\u636e\u6a21\u578b\u9884\u6d4bspo,\u51c6\u5907\u6570\u636e def ready_data (): ''' \u901a\u8fc7\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5bf9\u9700\u8981\u5f85\u9884\u6d4b\u5173\u7cfb\u7684\u6587\u672c\u5b9e\u73b0\u9884\u6d4b\uff0c\u5e76\u5c06\u9884\u6d4b\u7ed3\u679c\u5b58\u50a8\u5230\u6587\u4ef6\u4e2d :return: ''' # \u83b7\u53d6\u5305\u542b\u5b9e\u4f53\u548c\u5173\u7cfb\u7c7b\u578b\u7684\u5b57\u5178 type_dict = get_spo () # \u5bfc\u5165\u8bad\u7ec3\u597d\u7684\u6a21\u578b model_path = '../save_model/last_model.pth' mymodel = load_model ( model_path ) # \u8bfb\u53d6\u6d4b\u8bd5\u96c6\u6587\u6863\u8fdb\u884c\u9884\u6d4b with open ( conf . test_data_path , 'r' , encoding = 'utf-8' ) as fr : lines = fr . readlines () for line in tqdm ( lines ): line = json . loads ( line ) # print(line) sample = line [ 'text' ] outputs = model2predict ( sample , mymodel ) if len ( outputs ) == 0 : continue spo_list = outputs [ 'spo_list' ] # print(spo_list) for spo in spo_list : if spo [ 'predicate' ] in type_dict : spo [ 'subject_type' ] = type_dict [ spo [ 'predicate' ]][ 'subject_type' ] spo [ 'object_type' ] = type_dict [ spo [ 'predicate' ]][ 'object_type' ] with open ( '../data/predict_spo.json' , 'a' , encoding = 'utf-8' ) as fw : fw . write ( json . dumps ( spo , ensure_ascii = False ) + ' \\n ' )","title":"\u7b2c\u4e00\u6b65 \u51c6\u5907\u6570\u636e"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_5","text":"\u6784\u5efa\u7b2c\u4e09\u4e2a\u51fd\u6570create_node() \uff1a\u521b\u5efa\u8282\u70b9 # \u521b\u5efa\u8282\u70b9 def create_node ( graph , label , attrs ): #\u7b2c\u4e00\u6b21\uff1a\u5982\u679c\u4f60\u7684\u56fe\u6570\u636e\u5e93\u4e4b\u524d\u7684\u6570\u636e\u662f\u6ca1\u6709\u7528\u7684\u53ef\u4ee5\u76f4\u63a5\u6e05\u7a7a # graph.delete_all() # \u6784\u5efa\u8282\u70b9\u7684\u5c5e\u6027\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u591a\u4e2a\u5c5e\u6027\u8981\u540c\u65f6\u5224\u65ad\uff0c\u6240\u4ee5\u52a0\u4e0aand condition = \"\" for key , value in attrs . items (): condition += '_. %s =' % key + ' \\\" ' + value + ' \\\" ' + \" and \" # \u5c06condition\u6700\u540e\u7684and\u5b57\u7b26\u53bb\u6389 condition = condition [: - 5 ] # \u6839\u636e\u5c5e\u6027\u6761\u4ef6\u67e5\u8be2\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u82e5\u5b58\u5728\u5219\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56deNone value = node_match . match ( label ) . where ( condition ) . first () # \u5982\u679c\u8981\u521b\u5efa\u7684\u8282\u70b9\u4e0d\u5b58\u5728\u5219\u518d\u521b\u5efa if value is None : node = Node ( label , ** attrs ) node = graph . create ( node ) return node return None","title":"\u7b2c\u4e8c\u6b65 \u7f16\u5199\u521b\u5efa\u8282\u70b9\u7684\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_6","text":"\u6784\u5efa\u7b2c\u56db\u4e2a\u51fd\u6570 match_node() \uff1a\u5224\u65ad\u8282\u70b9\u662f\u5426\u5b58\u5728 # \u4f7f\u7528NodeMatcher\u67e5\u8be2\u8282\u70b9 def match_node ( label , attrs ): condition = \"\" for key , value in attrs . items (): condition += '_. %s =' % key + ' \\\" ' + value + ' \\\" ' + \" and \" # \u5c06condition\u6700\u540e\u7684 and \u5b57\u7b26\u53bb\u6389(\u6ce8\u610fand\u524d\u540e\u6709\u4e24\u4e2a\u7a7a\u683c) condition = condition [: - 5 ] # \u6839\u636e\u5c5e\u6027\u6761\u4ef6\u67e5\u8be2\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u82e5\u5b58\u5728\u5219\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 # \u6ce8\u610f\u52a0\u4e0a.first()\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9\u7ed3\u679c\uff0c\u4e0d\u52a0.first()\u8fd4\u56de\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8282\u70b9\u7ed3\u679c value = node_match . match ( label ) . where ( condition ) . first () return value \u6784\u5efa\u7b2c\u4e94\u4e2a\u51fd\u6570 create_relationship() \uff1a\u521b\u5efa\u4e24\u8282\u70b9\u7684\u5173\u7cfb # \u5efa\u7acb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb def create_relationship ( graph , label1 , attrs1 , label2 , attrs2 , r_name ): value1 = match_node ( label1 , attrs1 ) value2 = match_node ( label2 , attrs2 ) # \u5224\u65ad\u5b9e\u4f53\u662f\u5426\u5747\u5b58\u5728\uff0c\u5426\u5219\u65e0\u6cd5\u521b\u5efa\u5173\u7cfb if value1 is None or value2 is None : return False # \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u5b8c\u5173\u7cfb\uff0c\u5982\u679c\u5df2\u7ecf\u521b\u5efa\u5c31\u4e0d\u7528\u518d\u91cd\u590d\u5b9a\u4e49\u4e86\u3002\u5f53\u7136\u8fd9\u4e00\u6b65\u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3a\u76f8\u540c\u5b9e\u4f53\u5bf9\u521b\u5efa\u76f8\u540c\u5173\u7cfb\u65f6\uff0c\u7ed3\u679c\u4f1a\u8986\u76d6 # rel_value = match_relation(node1=value1, node2=value2, r_type=r_name) # print(\"rel_value:{}\".format(rel_value)) # if rel_value: # return False r = Relationship ( value1 , r_name , value2 ) graph . create ( r )","title":"\u7b2c\u4e09\u6b65 \u7f16\u5199\u521b\u5efa\u5173\u7cfb\u7684\u51fd\u6570"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#sponeo4j","text":"\u6784\u5efa\u7b2c\u516d\u4e2a\u51fd\u6570 load_file_create_map(): \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6spo\u6570\u636e\u5bfc\u5165\u5230Neo4j\u6570\u636e\u5e93\u4e2d def load_file_create_map (): # \u9996\u5148\u9700\u8981\u8fd0\u884cready_data\u51fd\u6570\u83b7\u53d6\u6a21\u578b\u9884\u6d4b\u7684spo\u4e09\u5143\u7ec4\u6570\u636e\uff0c\u8fd9\u91cc\u662f\u901a\u8fc7\u6587\u4ef6\u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff08\u65b9\u4fbf\u53cd\u590d\u4f7f\u7528\uff09 # \u7b2c\u4e00\u6b21\u8fd0\u884c\u53ef\u4ee5\u6e05\u7a7a\u6240\u6709\u56fe\u6570\u636e graph . delete_all () # \u7b2c\u4e00\u6b65\u83b7\u53d6\u6570\u636e with open ( '../data/predict_spo.json' , 'r' , encoding = 'utf-8' ) as fr : for line in tqdm ( fr . readlines ()): line = json . loads ( line ) # todo: \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9 # \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9\u7684\u6807\u7b7e subject_label = line [ \"subject_type\" ] # \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9\u7684\u5c5e\u6027 sub_attrs = { 'name' : line [ \"subject\" ]} create_node ( graph , subject_label , sub_attrs ) # todo: \u5b9a\u4e49\u5ba2\u5b9e\u4f53\u8282\u70b9 # \u5b9a\u4e49\u5ba2\u5b9e\u4f53\u8282\u70b9\u7684\u6807\u7b7e object_label = line [ \"object_type\" ] # \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u8282\u70b9\u7684\u5c5e\u6027 if \"\u65e5\u671f\" in line [ 'predicate' ]: obj_attrs = { 'date' : line [ \"object\" ]} else : obj_attrs = { 'name' : line [ \"object\" ]} create_node ( graph , object_label , obj_attrs ) # todo: \u5b9a\u4e49\u4e3b\u5b9e\u4f53\u548c\u5ba2\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb r_name = line [ \"predicate\" ] create_relationship ( graph , subject_label , sub_attrs , object_label , obj_attrs , r_name )","title":"\u7b2c\u56db\u6b65 \u5c06SPO\u6570\u636e\u5168\u90e8\u5bfc\u5165Neo4j\u6570\u636e\u5e93\u4e2d"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#neo4j_1","text":"\u6784\u5efa\u7b2c\u4e03\u4e2a\u51fd\u6570 use_neo4j2search(): \u4f7f\u7528Neo4j\u6570\u636e\u5e93\u67e5\u8be2 # \u67e5\u8be2Neo4j\u56fe\u6570\u636e\u5e93\u6570\u636e def use_neo4j2search (): # \u67e5\u8be2\u56fe\u4e2d\u8282\u70b9\u548c\u5173\u7cfb\u7c7b\u578b\u6709\u54ea\u4e9b node_labels = graph . schema . node_labels # \u67e5\u8be2\u4e00\u5171\u6709\u591a\u5c11\u79cd\u8282\u70b9\u7c7b\u578b print ( F \"Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u8282\u70b9\u7c7b\u578b\u4e3a\uff1a { node_labels } \" ) relation_types = graph . schema . relationship_types # \u67e5\u8be2\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5173\u7cfb\u7c7b\u578b print ( F \"Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u5173\u7cfb\u7c7b\u578b\u4e3a\uff1a { relation_types } \" ) # \u67e5\u8be2\u8282\u70b9\uff0c\u8fd9\u91cc\u4ee5label=\"\u4eba\u7269\", attrs = {\"name\": \"\u674e\u6668\"}\u4e3a\u4f8b node1 = match_node ( label = '\u4eba\u7269' , attrs = { \"name\" : '\u674e\u6668' }) print ( node1 ) # \u67e5\u8be2\u5173\u7cfb\uff0c\u4ee5\u4e0a\u8ff0\u7684\u540d\u5b57\u4e3a\u201c\u674e\u6668\u201d\u7684\u8282\u70b9\u4e3a\u51fa\u53d1\u70b9\uff0c\u8fdb\u884c\u5173\u7cfb\u7684\u67e5\u8be2 #eg1\uff1a\u67e5\u8be2\u201c\u674e\u6668\u201d\u8282\u70b9\u7684\u6240\u6709\u5173\u7cfb\uff1a\u5148\u67e5\u8282\u70b9\uff0c\u518d\u67e5\u5173\u7cfb\uff0cr_type=None\u8868\u793a\u4efb\u610f\u7684\u5173\u7cfb\u7c7b\u578b\u90fd\u53ef\u4ee5 ship_list1 = list ( relation_match . match ([ node1 ], r_type = None )) for reship in ship_list1 : print ( reship ) print ( '*' * 80 ) #eg2\uff1a\u67e5\u8be2\u201c\u674e\u6668\u201d\u548c\u201c\u4e2d\u56fd\u201d\u7684\u5173\u7cfb\uff1a\u4e24\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\u8868\u793a\u8981\u5339\u914d\u7684\u5173\u7cfb\u65b9\u5411\uff0cr_type=None\u8868\u793a\u4efb\u610f\u7684\u5173\u7cfb\u7c7b\u578b\u90fd\u53ef\u4ee5 node2 = match_node ( label = '\u56fd\u5bb6' , attrs = { \"name\" : '\u4e2d\u56fd' }) ship_list12 = list ( relation_match . match ([ node1 , node2 ], r_type = None )) for reship in ship_list12 : print ( reship ) print ( '*' * 80 ) #eg3\uff1a\u67e5\u8be2\u67d0\u4e00\u7c7b\u5173\u7cfb\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aNone\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570r_type=\u6307\u5b9a\u5173\u7cfb\u7c7b\u578b ship_list3 = list ( relation_match . match ( None , r_type = \"\u51fa\u751f\u65e5\u671f\" )) for reship in ship_list3 : print ( reship ) break \u8fd4\u56de\u7ed3\u679c Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u8282\u70b9\u7c7b\u578b\u4e3a \uff1a frozenset ({ '\u7f51\u7edc\u5c0f\u8bf4' , '\u4eba\u7269' , '\u6b4c\u66f2' , '\u5f71\u89c6\u4f5c\u54c1' , '\u65e5\u671f' , '\u5730\u70b9' , '\u4f01\u4e1a' , '\u56fe\u4e66\u4f5c\u54c1' , '\u56fd\u5bb6' , '\u7f51\u7ad9' , '\u6587\u672c' , '\u51fa\u7248\u793e' , '\u97f3\u4e50\u4e13\u8f91' , '\u5b66\u6821' }) Neo4j\u56fe\u6570\u636e\u5e93\u4e2d\u5b58\u5728\u7684\u5173\u7cfb\u7c7b\u578b\u4e3a \uff1a frozenset ({ '\u6b4c\u624b' , '\u6c11\u65cf' , '\u6210\u7acb\u65e5\u671f' , '\u6bd5\u4e1a\u9662\u6821' , '\u56fd\u7c4d' , '\u5bfc\u6f14' , '\u4e0a\u6620\u65f6\u95f4' , '\u51fa\u54c1\u516c\u53f8' , '\u4f5c\u66f2' , '\u6240\u5c5e\u4e13\u8f91' , '\u4e3b\u6f14' , '\u51fa\u7248\u793e' , '\u4f5c\u8005' , '\u51fa\u751f\u65e5\u671f' , '\u4f5c\u8bcd' , '\u8fde\u8f7d\u7f51\u7ad9' , '\u51fa\u751f\u5730' }) ( _268 : \u4eba\u7269 { name : ' \\u674e\\u6668 ' }) ( \u674e\u6668 ) - [: \u51fa\u751f\u65e5\u671f {}] -> ( _19268 ) ( \u674e\u6668 ) - [: \u51fa\u751f\u5730 {}] -> ( \u5317\u4eac ) ( \u674e\u6668 ) - [: \u51fa\u751f\u5730 {}] -> ( \u6e56\u5357\u6e58\u4e61 ) ( \u674e\u6668 ) - [: \u6bd5\u4e1a\u9662\u6821 {}] -> ( \u9c81\u8fc5\u7f8e\u672f\u5b66\u9662 ) ( \u674e\u6668 ) - [: \u56fd\u7c4d {}] -> ( \u4e2d\u56fd ) ******************************************************************************** ( \u674e\u6668 ) - [: \u56fd\u7c4d {}] -> ( \u4e2d\u56fd ) ******************************************************************************** ( \u5434\u4e9a\u6c5d ) - [: \u51fa\u751f\u65e5\u671f {}] -> ( _4271 )","title":"\u7b2c\u4e94\u6b65 Neo4j\u56fe\u6570\u636e\u5e93\u7684\u5e94\u7528"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%80%BB%E7%BB%93/03-%E5%9F%BA%E4%BA%8ENeo4j%E5%AE%9E%E7%8E%B0%E5%A8%B1%E4%B9%90%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA.html#_7","text":"\u672c\u5c0f\u8282\u57fa\u4e8e Neo4j \u56fe\u6570\u636e\u5e93\u5b9e\u73b0\u4e86\u5a31\u4e50\u6570\u636e\u77e5\u8bc6\u56fe\u8c31\u7684\u642d\u5efa\u548c\u5e94\u7528","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html","text":"joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3Joint\u65b9\u6cd5\u7684\u539f\u7406 \u638c\u63e1Joint\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9 joint\u65b9\u6cd5\u7684\u539f\u7406 \u00b6 joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u662f\u901a\u8fc7\u4fee\u6539\u6807\u6ce8\u65b9\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u76f4\u63a5\u8f93\u51fa\u6587\u672c\u4e2d\u5305\u542b\u7684(ei,rk,ej)\u4e09\u5143\u7ec4. Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u53c8\u5206\u4e3a: \"\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b\" \u548c \"\u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b\": \u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b: \u4e3b\u4f53\u3001\u5ba2\u4f53\u548c\u5173\u7cfb\u7684\u62bd\u53d6\u4e0d\u662f\u540c\u6b65\u7684 (\u4e00\u822c\u60c5\u51b5\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5176\u4e2d\u4e24\u4e2a\u4efb\u52a1\u4e00\u8d77\u8fdb\u884c) \uff0c\u5404\u4e2a\u8fc7\u7a0b\u90fd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2aloss\u503c\uff0c\u6574\u4e2a\u6a21\u578b\u7684loss\u662f\u5404\u8fc7\u7a0bloss\u503c\u4e4b\u548c. \u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b: \u4e3b\u4f53\u3001\u5ba2\u4f53\u548c\u5173\u7cfb\u7684\u62bd\u53d6\u662f\u540c\u6b65\u7684\uff0c\u901a\u8fc7\u4e00\u4e2a\u6a21\u578b\u76f4\u63a5\u5f97\u5230SPO\u4e09\u5143\u7ec4. \u5982: \u91c7\u7528\u5e8f\u5217\u6807\u6ce8\u5f62\u5f0f\u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3\uff0c\u5982\u679c\u6709N\u79cd\u5173\u7cfb\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u5173\u7cfb\uff0c\u5c06\u5176\u4e0eBIOS\u4ee5\u53ca\u4e3b\u5b9e\u4f53\u548c\u5ba2\u5b9e\u4f53\u7684\u5e8f\u53f7 (1\uff0c2) \u7ec4\u5408\u8d77\u6765\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\uff0c\u5e76\u6839\u636e\u6700\u540e\u7684\u6807\u6ce8\u7ed3\u679c\u8fdb\u884c\u89e3\u7801\uff0c\u4e00\u5171\u6d89\u53ca 2\u00d73\u00d7N+1\u200b\u4e2a\u6807\u7b7e (\u5176\u4e2d1\u4ee3\u8868\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u79cd\u5173\u7cfb) . joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9: \u00b6 \u4f18\u70b9: \u4e24\u4e2a\u4efb\u52a1\u7684\u8868\u5f81\u6709\u4ea4\u4e92\u4f5c\u7528\u53ef\u80fd\u8f85\u52a9\u4efb\u52a1\u7684\u5b66\u4e60. \u4e0d\u7528\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b\uff0c\u4e00\u4e2a\u6a21\u578b\u89e3\u51b3\u95ee\u9898\uff0c\u51cf\u5c11\u8bad\u7ec3\u4e0e\u9884\u6d4b\u7684gap. \u7f3a\u70b9: \u66f4\u590d\u6742\u7684\u6a21\u578b\u7ed3\u6784. Joint\u65b9\u6cd5\u63d0\u53d6\u7684\u7279\u5f81\u53ef\u80fd\u4e00\u81f4\uff0c\u4e5f\u53ef\u80fd\u51b2\u7a81\u4f1a\u4f7f\u6a21\u578b\u5b66\u4e60\u53d8\u5f97\u6df7\u4e71. \u57fa\u4e8ejoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6 \u00b6 \u4e0b\u4e00\u7ae0\u8282\u8fdb\u884c\u5177\u4f53\u4ecb\u7ecd \u5c0f\u7ed3\u603b\u7ed3: \u00b6 \u672c\u5c0f\u7ed3\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662fjoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\uff0c\u4ee5\u53ca\u8be5\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9.","title":"4.1 \u5173\u7cfb\u62bd\u53d6\u7684joint\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#joint","text":"","title":"joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_1","text":"\u7406\u89e3Joint\u65b9\u6cd5\u7684\u539f\u7406 \u638c\u63e1Joint\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#joint_1","text":"joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u662f\u901a\u8fc7\u4fee\u6539\u6807\u6ce8\u65b9\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u76f4\u63a5\u8f93\u51fa\u6587\u672c\u4e2d\u5305\u542b\u7684(ei,rk,ej)\u4e09\u5143\u7ec4. Joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u53c8\u5206\u4e3a: \"\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b\" \u548c \"\u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b\": \u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u6a21\u578b: \u4e3b\u4f53\u3001\u5ba2\u4f53\u548c\u5173\u7cfb\u7684\u62bd\u53d6\u4e0d\u662f\u540c\u6b65\u7684 (\u4e00\u822c\u60c5\u51b5\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5176\u4e2d\u4e24\u4e2a\u4efb\u52a1\u4e00\u8d77\u8fdb\u884c) \uff0c\u5404\u4e2a\u8fc7\u7a0b\u90fd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2aloss\u503c\uff0c\u6574\u4e2a\u6a21\u578b\u7684loss\u662f\u5404\u8fc7\u7a0bloss\u503c\u4e4b\u548c. \u8054\u5408\u89e3\u7801\u7684\u8054\u5408\u6a21\u578b: \u4e3b\u4f53\u3001\u5ba2\u4f53\u548c\u5173\u7cfb\u7684\u62bd\u53d6\u662f\u540c\u6b65\u7684\uff0c\u901a\u8fc7\u4e00\u4e2a\u6a21\u578b\u76f4\u63a5\u5f97\u5230SPO\u4e09\u5143\u7ec4. \u5982: \u91c7\u7528\u5e8f\u5217\u6807\u6ce8\u5f62\u5f0f\u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3\uff0c\u5982\u679c\u6709N\u79cd\u5173\u7cfb\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u5173\u7cfb\uff0c\u5c06\u5176\u4e0eBIOS\u4ee5\u53ca\u4e3b\u5b9e\u4f53\u548c\u5ba2\u5b9e\u4f53\u7684\u5e8f\u53f7 (1\uff0c2) \u7ec4\u5408\u8d77\u6765\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6\uff0c\u5e76\u6839\u636e\u6700\u540e\u7684\u6807\u6ce8\u7ed3\u679c\u8fdb\u884c\u89e3\u7801\uff0c\u4e00\u5171\u6d89\u53ca 2\u00d73\u00d7N+1\u200b\u4e2a\u6807\u7b7e (\u5176\u4e2d1\u4ee3\u8868\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u79cd\u5173\u7cfb) .","title":"joint\u65b9\u6cd5\u7684\u539f\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#joint_2","text":"\u4f18\u70b9: \u4e24\u4e2a\u4efb\u52a1\u7684\u8868\u5f81\u6709\u4ea4\u4e92\u4f5c\u7528\u53ef\u80fd\u8f85\u52a9\u4efb\u52a1\u7684\u5b66\u4e60. \u4e0d\u7528\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b\uff0c\u4e00\u4e2a\u6a21\u578b\u89e3\u51b3\u95ee\u9898\uff0c\u51cf\u5c11\u8bad\u7ec3\u4e0e\u9884\u6d4b\u7684gap. \u7f3a\u70b9: \u66f4\u590d\u6742\u7684\u6a21\u578b\u7ed3\u6784. Joint\u65b9\u6cd5\u63d0\u53d6\u7684\u7279\u5f81\u53ef\u80fd\u4e00\u81f4\uff0c\u4e5f\u53ef\u80fd\u51b2\u7a81\u4f1a\u4f7f\u6a21\u578b\u5b66\u4e60\u53d8\u5f97\u6df7\u4e71.","title":"joint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9:"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#joint_3","text":"\u4e0b\u4e00\u7ae0\u8282\u8fdb\u884c\u5177\u4f53\u4ecb\u7ecd","title":"\u57fa\u4e8ejoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/01-joint%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.html#_2","text":"\u672c\u5c0f\u7ed3\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662fjoint\u8054\u5408\u62bd\u53d6\u65b9\u6cd5\uff0c\u4ee5\u53ca\u8be5\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9.","title":"\u5c0f\u7ed3\u603b\u7ed3:"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html","text":"Casrel\u6a21\u578b\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3Casrel\u7b97\u6cd5\u601d\u60f3 \u638c\u63e1Casrel\u6a21\u578b\u67b6\u6784 \u638c\u63e1Casrel\u6a21\u578b\u89e3\u51b3\u7684\u95ee\u9898 Casrel\u7b97\u6cd5\u601d\u60f3 \u00b6 Casrel\u662f2020 ACL \u4e0a\u7684\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u8be5\u8bba\u6587\u7684\u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e3a\u5173\u7cfb\u4e09\u5143\u7ec4\u91cd\u53e0\u95ee\u9898. CasRel \u672c\u8d28\u4e0a\u662f\u57fa\u4e8e\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u65b9\u6cd5. Casrel\u6a21\u578b\u67b6\u6784 \u00b6 CASREL\u6846\u67b6\u62bd\u53d6\u4e09\u5143\u7ec4(subject, relation, object)\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u6b65\u9aa4\uff0c\u4e09\u4e2a\u90e8\u5206 \u4e24\u4e2a\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\u8981\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject . \u7b2c\u4e8c\u90e8\u8981\u6839\u636e\u8bc6\u522b\u51fa\u7684 subject, \u8bc6\u522b\u51fa\u6240\u6709\u6709\u53ef\u80fd\u7684 relation \u4ee5\u53ca\u5bf9\u5e94\u7684 object. \u4e09\u4e2a\u90e8\u5206\uff1a \u7f16\u7801\u5668\u90e8\u5206: \u53ef\u4ee5\u66ff\u6362\u4e3a\u4e0d\u540c\u7684\u7f16\u7801\u6846\u67b6\uff0c\u4e3b\u8981\u5bf9\u53e5\u5b50\u4e2d\u7684\u8bcd\u8fdb\u884c\u7f16\u7801\uff0c\u8bba\u6587\u6700\u7ec8\u4ee5BERT\u4e3a\u4e3b\uff0c\u6548\u679c\u4e0d\u9519. \u89e3\u7801\u5668\u2014-\u5934\u5b9e\u4f53\u8bc6\u522b\u90e8\u5206\uff1a\u76ee\u7684\u662f\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject. \u89e3\u7801\u5668\u2014-\u5173\u7cfb\u4e0e\u5c3e\u5b9e\u4f53\u8054\u5408\u8bc6\u522b\u90e8\u5206\uff1a\u6839\u636e subject\uff0c\u5bfb\u627e\u53ef\u80fd\u7684 relation \u548c object. \u6a21\u578b\u7ec6\u8282 \u00b6 \u5934\u5b9e\u4f53\u8bc6\u522b\u90e8\u5206 \u00b6 CasRel\u7684\u5934\u5b9e\u4f53\u8bc6\u522b\u5c42\u76f4\u63a5\u5bf9\u7f16\u7801\u5c42\u7684\u7ed3\u679c\u8fdb\u884c\u89e3\u7801\uff0c\u53bb\u8bc6\u522b\u6240\u6709\u53ef\u80fd\u7684\u5934\u5b9e\u4f53. \u8fd9\u91ccCasRel\u662f\u8bc6\u522b\u5934\u5b9e\u4f53span\uff0c\u4e5f\u5c31\u662fstart\u548cend\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5b83\u91c7\u7528\u7684\u662f\u4e8c\u5206\u7c7b. \u56e0\u6b64\uff0c\u6a21\u578b\u672c\u8eab\u5f88\u7b80\u5355\uff1a \u9996\u5148\uff0c\u5229\u7528\u4e00\u4e2a\u7ebf\u6027\u5c42\u2795\u4e00\u4e2asigmoid\u6fc0\u6d3b\u51fd\u6570\u5224\u65ad\u6bcf\u4e2atoken\u662f\u4e0d\u662f\u5934\u5b9e\u4f53\u7684\u5f00\u59cbtoken\u6216\u7ed3\u675ftoken \u7136\u540e\uff0c\u5229\u7528\u6700\u8fd1\u5339\u914d\u539f\u5219\u5c06\u8bc6\u522b\u5230\u7684start\u548cend\u914d\u5bf9\u83b7\u5f97\u5019\u9009\u5934\u5b9e\u4f53\u96c6\u5408. \u5173\u7cfb\u3001\u5c3e\u5b9e\u4f53\u8054\u5408\u8bc6\u522b\u90e8\u5206 \u00b6 \u8bc6\u522b\u5934\u5b9e\u4f53\u540e\u5c31\u8981\u8fdb\u884c\u5173\u7cfb\u548c\u5c3e\u5b9e\u4f53\u7684\u8054\u5408\u8bc6\u522b\u4e86. \u8fd9\u91cc\u6bcf\u4e00\u5c42\u5c3e\u5b9e\u4f53\u8bc6\u522b\u5c42\u7684\u7ed3\u6784\u5176\u5b9e\u4e0e\u5934\u5b9e\u4f53\u8bc6\u522b\u5c42\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u540c\u4e3b\u8981\u5728\u4e8e\u8f93\u5165\uff1a \u89e3\u7801\u7684\u65f6\u5019\u6bd4subject\u4e0d\u4ec5\u4ec5\u8003\u8651\u4e86BERT\u7f16\u7801\u7684\u9690\u5c42\u5411\u91cf\uff0c \u8fd8\u8003\u8651\u4e86\u8bc6\u522b\u51fa\u6765\u7684subject\u7279\u5f81\uff0c\u5373\u4e0b\u56fe. vsub \u4ee3\u8868 subject \u7279\u5f81\u5411\u91cf\uff0c\u82e5\u5b58\u5728\u591a\u4e2a\u8bcd\uff0c\u5c06\u5176\u53d6\u5411\u91cf\u5e73\u5747\uff0chn\u4ee3\u8868 BERT \u7f16\u7801\u5411\u91cf. \u5bf9\u4e8e\u8bc6\u522b\u51fa\u6765\u7684\u6bcf\u4e00\u4e2asubject, \u5bf9\u5e94\u7684\u6bcf\u4e00\u79cd\u5173\u7cfb\u4f1a\u89e3\u7801\u51fa\u5176 object \u7684 start \u548c end \u7d22\u5f15\u4f4d\u7f6e\uff0c\u4e0e Subject \u7c7b\u4f3c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a \u6a21\u578b\u7ed3\u679c\uff1a \u00b6 \u4ee5\u56fe\u4e2d\u7684\u4f8b\u5b50\u89e3\u6790\u4e0b\u6a21\u578b\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u56fe\u4e2d\u7684\u7b2c\u4e00\u4e2a subject \u7684\u8fc7\u7a0b\uff0c\u5373 Jackie R. Brown\uff0c\u5bf9\u4e8e\u8fd9\u4e2asubject\uff0c\u5728\u5173\u7cfb Birth_place \u4e2d\u8bc6\u522b\u51fa\u4e86\u4e24\u4e2a object\uff0c\u5373 Washington \u548c United States Of America\uff0c\u800c\u5728\u5176\u4ed6\u7684\u5173\u7cfb\u4e2d\u672a\u66fe\u8bc6\u522b\u51fa\u76f8\u5e94\u7684 object. \u5f53\u5bf9 Washington \u8fd9\u4e2a subject \u89e3\u7801\u65f6\uff0c\u4ec5\u4ec5\u5728 Capital_of \u7684\u5173\u7cfb\u4e2d\u8bc6\u522b\u51fa\u5bf9\u5e94\u7684 object: United States Of America. Casrel\u6a21\u578b\u89e3\u51b3\u7684\u95ee\u9898 \u00b6 \u7531\u4e0a\u8ff0\u6a21\u578b\u7ed3\u679c\u5f97\u51fa\u7ed3\u8bba\uff1aCasrel\u6a21\u578b\u53ef\u4ee5\u89e3\u51b3\u6700\u5f00\u59cb\u63d0\u5230\u5173\u7cfb\u62bd\u53d6\u4e2d\u7684 SEO \u548c EPO \u7684\u91cd\u53e0\u95ee\u9898. \u8fd9\u4e5f\u662f\u6211\u4eec\u672c\u6b21\u9879\u76ee\u7814\u7a76\u95ee\u9898\u7684\u91cd\u70b9\uff0c\u89e3\u51b3\u6587\u672c\u4e2d\u591a\u5143\u5173\u7cfb\u95ee\u9898. \u5c0f\u7ed3\u603b\u7ed3\uff1a \u00b6 Casrel\u7b97\u6cd5\u601d\u60f3 Casrel\u662f2020ACL \u4e0a\u7684\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u8be5\u8bba\u6587\u7684\u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e3a\u5173\u7cfb\u4e09\u5143\u7ec4\u91cd\u53e0\u95ee\u9898. CasRel \u672c\u8d28\u4e0a\u662f\u57fa\u4e8e\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u65b9\u6cd5\uff0c\u5b83\u901a\u5e38\u88ab\u5927\u5bb6\u79f0\u4f5c\u5c42\u53e0\u6307\u9488\u7f51\u7edc. Casrel\u6a21\u578b\u67b6\u6784 CASREL\u6846\u67b6\u62bd\u53d6\u4e09\u5143\u7ec4(subject, relation, object)\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u6b65\u9aa4\uff0c\u4e09\u4e2a\u90e8\u5206 \u4e24\u4e2a\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\u8981\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject . \u7b2c\u4e8c\u90e8\u8981\u6839\u636e\u8bc6\u522b\u51fa\u7684 subject, \u8bc6\u522b\u51fa\u6240\u6709\u6709\u53ef\u80fd\u7684 relation \u4ee5\u53ca\u5bf9\u5e94\u7684 object. \u4e09\u4e2a\u90e8\u5206\uff1a \u7f16\u7801\u5668\u90e8\u5206: \u53ef\u4ee5\u66ff\u6362\u4e3a\u4e0d\u540c\u7684\u7f16\u7801\u6846\u67b6\uff0c\u4e3b\u8981\u5bf9\u53e5\u5b50\u4e2d\u7684\u8bcd\u8fdb\u884c\u7f16\u7801\uff0c\u8bba\u6587\u6700\u7ec8\u4ee5BERT\u4e3a\u4e3b\uff0c\u6548\u679c\u5f88\u5f3a. \u89e3\u7801\u5668\u2014-\u5934\u5b9e\u4f53\u8bc6\u522b\u90e8\u5206\uff1a\u76ee\u7684\u662f\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject. \u89e3\u7801\u5668\u2014-\u5173\u7cfb\u4e0e\u5c3e\u5b9e\u4f53\u8054\u5408\u8bc6\u522b\u90e8\u5206\uff1a\u6839\u636e subject\uff0c\u5bfb\u627e\u53ef\u80fd\u7684 relation \u548c object. Casrel\u6a21\u578b\u89e3\u51b3\u7684\u95ee\u9898 Casrel\u6a21\u578b\u53ef\u4ee5\u89e3\u51b3\u5173\u7cfb\u62bd\u53d6\u4e2d\u7684 SEO \u548c EPO \u7684\u91cd\u53e0\u95ee\u9898.","title":"4.2 Casrel\u6a21\u578b\u67b6\u6784\u89e3\u6790"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#casrel","text":"","title":"Casrel\u6a21\u578b\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#_1","text":"\u7406\u89e3Casrel\u7b97\u6cd5\u601d\u60f3 \u638c\u63e1Casrel\u6a21\u578b\u67b6\u6784 \u638c\u63e1Casrel\u6a21\u578b\u89e3\u51b3\u7684\u95ee\u9898","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#casrel_1","text":"Casrel\u662f2020 ACL \u4e0a\u7684\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u8be5\u8bba\u6587\u7684\u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e3a\u5173\u7cfb\u4e09\u5143\u7ec4\u91cd\u53e0\u95ee\u9898. CasRel \u672c\u8d28\u4e0a\u662f\u57fa\u4e8e\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u65b9\u6cd5.","title":"Casrel\u7b97\u6cd5\u601d\u60f3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#casrel_2","text":"CASREL\u6846\u67b6\u62bd\u53d6\u4e09\u5143\u7ec4(subject, relation, object)\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u6b65\u9aa4\uff0c\u4e09\u4e2a\u90e8\u5206 \u4e24\u4e2a\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\u8981\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject . \u7b2c\u4e8c\u90e8\u8981\u6839\u636e\u8bc6\u522b\u51fa\u7684 subject, \u8bc6\u522b\u51fa\u6240\u6709\u6709\u53ef\u80fd\u7684 relation \u4ee5\u53ca\u5bf9\u5e94\u7684 object. \u4e09\u4e2a\u90e8\u5206\uff1a \u7f16\u7801\u5668\u90e8\u5206: \u53ef\u4ee5\u66ff\u6362\u4e3a\u4e0d\u540c\u7684\u7f16\u7801\u6846\u67b6\uff0c\u4e3b\u8981\u5bf9\u53e5\u5b50\u4e2d\u7684\u8bcd\u8fdb\u884c\u7f16\u7801\uff0c\u8bba\u6587\u6700\u7ec8\u4ee5BERT\u4e3a\u4e3b\uff0c\u6548\u679c\u4e0d\u9519. \u89e3\u7801\u5668\u2014-\u5934\u5b9e\u4f53\u8bc6\u522b\u90e8\u5206\uff1a\u76ee\u7684\u662f\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject. \u89e3\u7801\u5668\u2014-\u5173\u7cfb\u4e0e\u5c3e\u5b9e\u4f53\u8054\u5408\u8bc6\u522b\u90e8\u5206\uff1a\u6839\u636e subject\uff0c\u5bfb\u627e\u53ef\u80fd\u7684 relation \u548c object.","title":"Casrel\u6a21\u578b\u67b6\u6784"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#_2","text":"","title":"\u6a21\u578b\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#_3","text":"CasRel\u7684\u5934\u5b9e\u4f53\u8bc6\u522b\u5c42\u76f4\u63a5\u5bf9\u7f16\u7801\u5c42\u7684\u7ed3\u679c\u8fdb\u884c\u89e3\u7801\uff0c\u53bb\u8bc6\u522b\u6240\u6709\u53ef\u80fd\u7684\u5934\u5b9e\u4f53. \u8fd9\u91ccCasRel\u662f\u8bc6\u522b\u5934\u5b9e\u4f53span\uff0c\u4e5f\u5c31\u662fstart\u548cend\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5b83\u91c7\u7528\u7684\u662f\u4e8c\u5206\u7c7b. \u56e0\u6b64\uff0c\u6a21\u578b\u672c\u8eab\u5f88\u7b80\u5355\uff1a \u9996\u5148\uff0c\u5229\u7528\u4e00\u4e2a\u7ebf\u6027\u5c42\u2795\u4e00\u4e2asigmoid\u6fc0\u6d3b\u51fd\u6570\u5224\u65ad\u6bcf\u4e2atoken\u662f\u4e0d\u662f\u5934\u5b9e\u4f53\u7684\u5f00\u59cbtoken\u6216\u7ed3\u675ftoken \u7136\u540e\uff0c\u5229\u7528\u6700\u8fd1\u5339\u914d\u539f\u5219\u5c06\u8bc6\u522b\u5230\u7684start\u548cend\u914d\u5bf9\u83b7\u5f97\u5019\u9009\u5934\u5b9e\u4f53\u96c6\u5408.","title":"\u5934\u5b9e\u4f53\u8bc6\u522b\u90e8\u5206"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#_4","text":"\u8bc6\u522b\u5934\u5b9e\u4f53\u540e\u5c31\u8981\u8fdb\u884c\u5173\u7cfb\u548c\u5c3e\u5b9e\u4f53\u7684\u8054\u5408\u8bc6\u522b\u4e86. \u8fd9\u91cc\u6bcf\u4e00\u5c42\u5c3e\u5b9e\u4f53\u8bc6\u522b\u5c42\u7684\u7ed3\u6784\u5176\u5b9e\u4e0e\u5934\u5b9e\u4f53\u8bc6\u522b\u5c42\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u540c\u4e3b\u8981\u5728\u4e8e\u8f93\u5165\uff1a \u89e3\u7801\u7684\u65f6\u5019\u6bd4subject\u4e0d\u4ec5\u4ec5\u8003\u8651\u4e86BERT\u7f16\u7801\u7684\u9690\u5c42\u5411\u91cf\uff0c \u8fd8\u8003\u8651\u4e86\u8bc6\u522b\u51fa\u6765\u7684subject\u7279\u5f81\uff0c\u5373\u4e0b\u56fe. vsub \u4ee3\u8868 subject \u7279\u5f81\u5411\u91cf\uff0c\u82e5\u5b58\u5728\u591a\u4e2a\u8bcd\uff0c\u5c06\u5176\u53d6\u5411\u91cf\u5e73\u5747\uff0chn\u4ee3\u8868 BERT \u7f16\u7801\u5411\u91cf. \u5bf9\u4e8e\u8bc6\u522b\u51fa\u6765\u7684\u6bcf\u4e00\u4e2asubject, \u5bf9\u5e94\u7684\u6bcf\u4e00\u79cd\u5173\u7cfb\u4f1a\u89e3\u7801\u51fa\u5176 object \u7684 start \u548c end \u7d22\u5f15\u4f4d\u7f6e\uff0c\u4e0e Subject \u7c7b\u4f3c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a","title":"\u5173\u7cfb\u3001\u5c3e\u5b9e\u4f53\u8054\u5408\u8bc6\u522b\u90e8\u5206"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#_5","text":"\u4ee5\u56fe\u4e2d\u7684\u4f8b\u5b50\u89e3\u6790\u4e0b\u6a21\u578b\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u56fe\u4e2d\u7684\u7b2c\u4e00\u4e2a subject \u7684\u8fc7\u7a0b\uff0c\u5373 Jackie R. Brown\uff0c\u5bf9\u4e8e\u8fd9\u4e2asubject\uff0c\u5728\u5173\u7cfb Birth_place \u4e2d\u8bc6\u522b\u51fa\u4e86\u4e24\u4e2a object\uff0c\u5373 Washington \u548c United States Of America\uff0c\u800c\u5728\u5176\u4ed6\u7684\u5173\u7cfb\u4e2d\u672a\u66fe\u8bc6\u522b\u51fa\u76f8\u5e94\u7684 object. \u5f53\u5bf9 Washington \u8fd9\u4e2a subject \u89e3\u7801\u65f6\uff0c\u4ec5\u4ec5\u5728 Capital_of \u7684\u5173\u7cfb\u4e2d\u8bc6\u522b\u51fa\u5bf9\u5e94\u7684 object: United States Of America.","title":"\u6a21\u578b\u7ed3\u679c\uff1a"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#casrel_3","text":"\u7531\u4e0a\u8ff0\u6a21\u578b\u7ed3\u679c\u5f97\u51fa\u7ed3\u8bba\uff1aCasrel\u6a21\u578b\u53ef\u4ee5\u89e3\u51b3\u6700\u5f00\u59cb\u63d0\u5230\u5173\u7cfb\u62bd\u53d6\u4e2d\u7684 SEO \u548c EPO \u7684\u91cd\u53e0\u95ee\u9898. \u8fd9\u4e5f\u662f\u6211\u4eec\u672c\u6b21\u9879\u76ee\u7814\u7a76\u95ee\u9898\u7684\u91cd\u70b9\uff0c\u89e3\u51b3\u6587\u672c\u4e2d\u591a\u5143\u5173\u7cfb\u95ee\u9898.","title":"Casrel\u6a21\u578b\u89e3\u51b3\u7684\u95ee\u9898"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/02-Casrel%E6%A8%A1%E5%9E%8B%E6%9E%B6%E6%9E%84.html#_6","text":"Casrel\u7b97\u6cd5\u601d\u60f3 Casrel\u662f2020ACL \u4e0a\u7684\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u8be5\u8bba\u6587\u7684\u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e3a\u5173\u7cfb\u4e09\u5143\u7ec4\u91cd\u53e0\u95ee\u9898. CasRel \u672c\u8d28\u4e0a\u662f\u57fa\u4e8e\u53c2\u6570\u5171\u4eab\u7684\u8054\u5408\u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\u65b9\u6cd5\uff0c\u5b83\u901a\u5e38\u88ab\u5927\u5bb6\u79f0\u4f5c\u5c42\u53e0\u6307\u9488\u7f51\u7edc. Casrel\u6a21\u578b\u67b6\u6784 CASREL\u6846\u67b6\u62bd\u53d6\u4e09\u5143\u7ec4(subject, relation, object)\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u6b65\u9aa4\uff0c\u4e09\u4e2a\u90e8\u5206 \u4e24\u4e2a\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\u8981\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject . \u7b2c\u4e8c\u90e8\u8981\u6839\u636e\u8bc6\u522b\u51fa\u7684 subject, \u8bc6\u522b\u51fa\u6240\u6709\u6709\u53ef\u80fd\u7684 relation \u4ee5\u53ca\u5bf9\u5e94\u7684 object. \u4e09\u4e2a\u90e8\u5206\uff1a \u7f16\u7801\u5668\u90e8\u5206: \u53ef\u4ee5\u66ff\u6362\u4e3a\u4e0d\u540c\u7684\u7f16\u7801\u6846\u67b6\uff0c\u4e3b\u8981\u5bf9\u53e5\u5b50\u4e2d\u7684\u8bcd\u8fdb\u884c\u7f16\u7801\uff0c\u8bba\u6587\u6700\u7ec8\u4ee5BERT\u4e3a\u4e3b\uff0c\u6548\u679c\u5f88\u5f3a. \u89e3\u7801\u5668\u2014-\u5934\u5b9e\u4f53\u8bc6\u522b\u90e8\u5206\uff1a\u76ee\u7684\u662f\u8bc6\u522b\u51fa\u53e5\u5b50\u4e2d\u7684 subject. \u89e3\u7801\u5668\u2014-\u5173\u7cfb\u4e0e\u5c3e\u5b9e\u4f53\u8054\u5408\u8bc6\u522b\u90e8\u5206\uff1a\u6839\u636e subject\uff0c\u5bfb\u627e\u53ef\u80fd\u7684 relation \u548c object. Casrel\u6a21\u578b\u89e3\u51b3\u7684\u95ee\u9898 Casrel\u6a21\u578b\u53ef\u4ee5\u89e3\u51b3\u5173\u7cfb\u62bd\u53d6\u4e2d\u7684 SEO \u548c EPO \u7684\u91cd\u53e0\u95ee\u9898.","title":"\u5c0f\u7ed3\u603b\u7ed3\uff1a"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html","text":"\u6570\u636e\u5904\u7406 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u4e86\u89e3\u672c\u9879\u76ee\u6570\u636e\u6765\u6e90\u3001\u660e\u786e\u6570\u636e\u683c\u5f0f \u638c\u63e1\u6570\u636e\u5904\u7406\u7684\u5de5\u5177\u51fd\u6570\u4ee3\u7801\u5b9e\u73b0. \u9879\u76ee\u6574\u4f53\u4ee3\u7801\u67b6\u6784\u56fe \u00b6 \u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u6570\u636e\u9884\u5904\u7406 \u00b6 \u672c\u9879\u76ee\u4e2d\u5bf9\u6570\u636e\u90e8\u5206\u7684\u9884\u5904\u7406\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6 \u7b2c\u4e8c\u6b65: \u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801 \u7b2c\u4e09\u6b65: \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570 \u7b2c\u56db\u6b65: \u6784\u5efaDataSet\u7c7b\u4e0edataloader\u51fd\u6570 \u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6 \u00b6 \u672c\u6b21\u9879\u76ee\u6570\u636e\u6765\u6e90\u4e3a\u516c\u5f00\u7684\u5343\u8a00\u6570\u636e\u96c6https:// www.luge.ai/#/ \uff0c\u4f7f\u7528\u5f00\u6e90\u6570\u636e\u7684\u597d\u5904\uff0c\u6211\u4eec\u65e0\u9700\u6807\u6ce8\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\uff0c\u672c\u6b21\u9879\u76ee\u7684\u4e3b\u8981\u76ee\u7684, \u9700\u8981\u5927\u5bb6\u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u601d\u60f3. \u6ce8\u610f\uff1a\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u6570\u636e\u4e00\u822c\u9700\u8981\u4eba\u5de5\u624b\u52a8\u6807\u6ce8. \u9879\u76ee\u6570\u636e\u7684\u8def\u5f84\u4e3a\uff1a/home/ec2-user/Casrel_RE/relationship_extract/data \u9879\u76ee\u7684\u6570\u636e\u96c6\u5305\u62ec6\u4e2ajson\u6587\u4ef6\uff08\u5176\u4e2dpredict_spo.json\u662f\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\uff0crel_type.json\u662f\u5e26\u6709\u5b9e\u4f53\u7c7b\u578b\u7684\u5173\u7cfb\u6587\u4ef6\uff09, \u6211\u4eec\u8fd9\u91cc\u53ea\u5148\u9488\u5bf9train.json\u3001dev.json\u3001test.json\u3001relation.json\u8fdb\u884c\u4ecb\u7ecd: \u5173\u7cfb\u7c7b\u578b\u6587\u4ef6: /home/ec2-user/Casrel_RE/relationship_extract/data/relation.json { \"0\" : \"\u51fa\u54c1\u516c\u53f8\" , \"1\" : \"\u56fd\u7c4d\" , \"2\" : \"\u51fa\u751f\u5730\" , \"3\" : \"\u6c11\u65cf\" , \"4\" : \"\u51fa\u751f\u65e5\u671f\" , \"5\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"6\" : \"\u6b4c\u624b\" , \"7\" : \"\u6240\u5c5e\u4e13\u8f91\" , \"8\" : \"\u4f5c\u8bcd\" , \"9\" : \"\u4f5c\u66f2\" , \"10\" : \"\u8fde\u8f7d\u7f51\u7ad9\" , \"11\" : \"\u4f5c\u8005\" , \"12\" : \"\u51fa\u7248\u793e\" , \"13\" : \"\u4e3b\u6f14\" , \"14\" : \"\u5bfc\u6f14\" , \"15\" : \"\u7f16\u5267\" , \"16\" : \"\u4e0a\u6620\u65f6\u95f4\" , \"17\" : \"\u6210\u7acb\u65e5\u671f\" } rel.json\u4e2d\u5305\u542b18\u4e2a\u7c7b\u522b\u6807\u7b7e, json\u6587\u4ef6\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5b57\u5178\uff0ckey\u5bf9\u5e94\u5173\u7cfb\u7684id\uff0cvalue\u5bf9\u5e94\u5173\u7cfb\u7c7b\u578b. \u8bad\u7ec3\u6570\u636e\u96c6: /home/ec2-user/Casrel_RE/relationship_extract/data/train.json { \"text\" : \"\u7b14 \u540d\uff1a\u6728\u65a7\u539f \u540d\uff1a\u6768\u8386\u66fe \u7528 \u540d\uff1a\u7a46\u65b0\u6587\u3001\u7267\u7f8a\u3001\u5bd2\u767d\u3001\u6d0b\u6f3e\u51fa\u751f\u65e5\u671f\uff1a1931\u2014\u804c \u4e1a\uff1a\u4f5c\u5bb6\u3001\u8bd7\u4eba\u6027 \u522b\uff1a \u7537\u6c11 \u65cf\uff1a \u56de\u65cf\u653f\u6cbb\u9762\u8c8c\uff1a\u4e2d\u5171\u515a\u5458 \u7956 \u7c4d\uff1a\u56fa\u539f\u53bf\u51fa \u751f \u5730\uff1a\u6210\u90fd\" , \"spo_list\" : [{ \"predicate\" : \"\u6c11\u65cf\" , \"object_type\" : \"\u6587\u672c\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u56de\u65cf\" , \"subject\" : \"\u6728\u65a7\" }, { \"predicate\" : \"\u51fa\u751f\u65e5\u671f\" , \"object_type\" : \"\u65e5\u671f\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"1931\" , \"subject\" : \"\u6728\u65a7\" }, { \"predicate\" : \"\u51fa\u751f\u5730\" , \"object_type\" : \"\u5730\u70b9\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u6210\u90fd\" , \"subject\" : \"\u6728\u65a7\" }]} { \"text\" : \"\u300a\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\u300b\u662f\u9ec4\u5bb6\u5f3a\u7684\u4e00\u9996\u7ca4\u8bed\u6b4c\u66f2\uff0c\u7531\u4f55\u542f\u5f18\u4f5c\u8bcd\uff0c\u9ec4\u5bb6\u5f3a\u4f5c\u66f2\u7f16\u66f2\u5e76\u6f14\u5531\uff0c\u6536\u5f55\u4e8e2007\u5e7408\u670801\u65e5\u53d1\u884c\u7684\u4e13\u8f91\u300a\u5979\u4ed6\u300b\u4e2d\" , \"spo_list\" : [{ \"predicate\" : \"\u4f5c\u66f2\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u9ec4\u5bb6\u5f3a\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }, { \"predicate\" : \"\u6240\u5c5e\u4e13\u8f91\" , \"object_type\" : \"\u97f3\u4e50\u4e13\u8f91\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u5979\u4ed6\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }, { \"predicate\" : \"\u6b4c\u624b\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u9ec4\u5bb6\u5f3a\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }, { \"predicate\" : \"\u4f5c\u8bcd\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u4f55\u542f\u5f18\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }]} { \"text\" : \"2003\u5e7412\u670826\u65e5\uff0c\u516c\u53f82003\u5e74\u7b2c\u56db\u6b21\u4e34\u65f6\u80a1\u4e1c\u5927\u4f1a\u6279\u51c6\uff0c\u516c\u53f8\u540d\u79f0\u53d8\u66f4\u4e3a\u201c\u534e\u590f\u5efa\u901a\u79d1\u6280\u5f00\u53d1\u80a1\u4efd\u6709\u9650\u516c\u53f8\u201d\uff0c\u5e76\u4e8e2004\u5e746\u67083\u65e5\u53d6\u5f97\u6cb3\u5317\u7701\u5de5\u5546\u884c\u653f\u7ba1\u7406\u5c40\u6362\u53d1\u7684\u300a\u4f01\u4e1a\u6cd5\u4eba\u8425\u4e1a\u6267\u7167\u300b\uff0c\u6cd5\u5b9a\u4ee3\u8868\u4eba\uff1a\u4f55\u5f3a\" , \"spo_list\" : [{ \"predicate\" : \"\u6210\u7acb\u65e5\u671f\" , \"object_type\" : \"\u65e5\u671f\" , \"subject_type\" : \"\u4f01\u4e1a\" , \"object\" : \"2004\u5e746\u67083\u65e5\" , \"subject\" : \"\u534e\u590f\u5efa\u901a\u79d1\u6280\u5f00\u53d1\u80a1\u4efd\u6709\u9650\u516c\u53f8\" }]} { \"text\" : \"\u6f58\u60df\u5357\uff0c\u9655\u897f\u5927\u8354\u53bf\u6ea2\u6e21\u6751\u4eba\" , \"spo_list\" : [{ \"predicate\" : \"\u51fa\u751f\u5730\" , \"object_type\" : \"\u5730\u70b9\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u9655\u897f\u5927\u8354\" , \"subject\" : \"\u6f58\u60df\u5357\" }]} train.json\u4e2d\u5305\u542b55433\u884c\u6837\u672c, \u6bcf\u884c\u4e3a\u4e00\u4e2a\u5b57\u5178\u6837\u5f0f, \u7b2c\u4e00\u4e2akey\u4e3a\"text\", \u5bf9\u5e94\u7684value\u4e3a\u5f85\u62bd\u53d6\u5173\u7cfb\u7684\u4e2d\u6587\u6587\u672c, \u7b2c\u4e8c\u4e2akey\u4e3a\"spo_list\", \u5bf9\u5e94\u7684value\u4e3a\u53e5\u5b50\u4e2d\u771f\u5b9e\u7684spo\u5173\u7cfb\u4e09\u5143\u7ec4\u5217\u8868 (\u5217\u8868\u4e2d\u542b\u6709\u591a\u4e2aspo\u4e09\u5143\u7ec4) \u4ee5spo_list\u7684\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f8b\uff1a\u5143\u7d20\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5176\u4e2d\"predictate\"\u4ee3\u8868\u4e3a\u5173\u7cfb\u7c7b\u578b; \"object_type\"\u4ee3\u8868\u5c3e\u5b9e\u4f53\u7684\u7c7b\u578b; \"subject_type\"\u4ee3\u8868\u4e3b\u5b9e\u4f53\u7684\u7c7b\u578b; \"object\"\u4ee3\u8868\u5c3e\u5b9e\u4f53; \"subject\" \u4ee3\u8868\u4e3b\u5b9e\u4f53. \u9a8c\u8bc1\u6570\u636e\u96c6: /home/ec2-user/Casrel_RE/relationship_extract/data/dev.json { \"text\" : \"\u8521\u5fd7\u575a\u5728\u5357\u4eac\u827a\u672f\u5b66\u9662\u6c42\u5b66\u65f6\u53d7\u8fc7\u7cfb\u7edf\u3001\u6b63\u89c4\u7684\u827a\u672f\u6559\u80b2\u548c\u4e13\u4e1a\u8bad\u7ec3\uff0c\u6df1\u5f97\u5218\u6d77\u7c9f\u3001\u7f57\u53d4\u5b50\u3001\u9648\u4e4b\u4f5b\u3001\u8c22\u6d77\u71d5\u3001\u9648\u5927\u7fbd\u7b49\u8457\u540d\u4e2d\u56fd\u753b\u5927\u5e08\u7684\u6307\u6388\uff0c\u57fa\u672c\u529f\u624e\u5b9e\uff0c\u52a0\u4e0a\u4ed6\u575a\u6301\u4ece\u751f\u6d3b\u4e2d\u6c72\u53d6\u521b\u4f5c\u6e90\u6cc9\uff0c\u7528\u5fc3\u6355\u6349\u751f\u6d3b\u4e2d\u6700\u7f8e\u6700\u611f\u4eba\u7684\u77ac\u95f4\u5f62\u8c61\uff0c\u56e0\u800c\u4ed6\u7684\u4f5c\u54c1\uff0c\u4e0d\u8bba\u662f\u5c71\u6c34\u3001\u82b1\u9e1f\u3001\u98de\u79bd\u3001\u8d70\u517d\uff0c\u65e0\u4e0d\u5145\u6ee1\u4e86\u751f\u547d\u7684\u7075\u6c14\uff0c\u5bc4\u6258\u7740\u753b\u5bb6\u7684\u60c5\u6000\uff0c\u9887\u5f97\u81ea\u7136\u4e4b\u771f\u8da3\" , \"spo_list\" : [{ \"predicate\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"object_type\" : \"\u5b66\u6821\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u5357\u4eac\u827a\u672f\u5b66\u9662\" , \"subject\" : \"\u8521\u5fd7\u575a\" }]} { \"text\" : \"\u4eba\u7269\u7b80\u4ecb1974\u5e741\u6708\u51fa\u751f\uff0c\u526f\u6559\u6388 \uff0c\u5b66\u5386\u7855\u58eb \u8d75\u660e\uff0c\u51fa\u751f\u4e8e1974\u5e741\u6708\uff0c\u6bd5\u4e1a\u4e8e\u6b66\u6c49\u97f3\u4e50\u5b66\u9662\u7ba1\u5f26\u7cfb\uff0c\u662f\u6d1b\u9633\u5e08\u8303\u5b66\u9662\u97f3\u4e50\u5b66\u9662\u6559\u6388\" , \"spo_list\" : [{ \"predicate\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"object_type\" : \"\u5b66\u6821\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u6b66\u6c49\u97f3\u4e50\u5b66\u9662\" , \"subject\" : \"\u8d75\u660e\" }]} { \"text\" : \"\u97e9\u56fd\u7535\u89c6\u5267\u300a\u4e00\u679d\u6885\u5f52\u6765\u300b\uff08\u53c8\u540d\u300a\u7f8e\u8d3c\u4e00\u679d\u6885\u4f20\u300b\uff09\uff0c\u6539\u7f16\u81ea\u97e9\u56fd\u6f2b\u753b\u4f5c\u5bb6\u9ad8\u7fbd\u8363\u7684\u6f2b\u753b\uff0c\u7531\u9ec4\u4ec1\u96f7\u6267\u5bfc\uff0c\u4e01\u4e00\u5b87\u548c\u5c39\u73cd\u5e8f\u7b49\u8054\u8882\u51fa\u6f14\" , \"spo_list\" : [{ \"predicate\" : \"\u4e3b\u6f14\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u5f71\u89c6\u4f5c\u54c1\" , \"object\" : \"\u4e01\u4e00\u5b87\" , \"subject\" : \"\u4e00\u679d\u6885\u5f52\u6765\" }, { \"predicate\" : \"\u5bfc\u6f14\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u5f71\u89c6\u4f5c\u54c1\" , \"object\" : \"\u9ec4\u4ec1\u96f7\" , \"subject\" : \"\u4e00\u679d\u6885\u5f52\u6765\" }]} { \"text\" : \"\u300a\u7ed3\u4e86\u300b\u662f\u4e00\u9996\u7531\u90dd\u4e91\u6f14\u5531\u7684\u6b4c\u66f2\uff0c\u7531\u90dd\u4e91\u586b\u8bcd\uff0c\u66f2\u6539\u7f16\u81ea\u534e\u76db\u987f\u5e7f\u573a\uff0c\u6536\u5f55\u4e8e\u4e13\u8f91\u300a\u7a81\u7136\u60f3\u5230\u7406\u60f3\u8fd9\u4e2a\u8bcd\u300b\u4e2d\" , \"spo_list\" : [{ \"predicate\" : \"\u4f5c\u66f2\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u6539\u7f16\u81ea\u534e\u76db\u987f\u5e7f\u573a\" , \"subject\" : \"\u7ed3\u4e86\" }]} dev.json\u4e2d\u5305\u542b11191\u884c\u6837\u672c, \u6bcf\u884c\u4e3a\u4e00\u4e2a\u5b57\u5178\u6837\u5f0f, \u7b2c\u4e00\u4e2akey\u4e3a\"text\", \u5bf9\u5e94\u7684value\u4e3a\u5f85\u62bd\u53d6\u5173\u7cfb\u7684\u4e2d\u6587\u6587\u672c, \u7b2c\u4e8c\u4e2akey\u4e3a\"spo_list\", \u5bf9\u5e94\u7684value\u4e3a\u53e5\u5b50\u4e2d\u771f\u5b9e\u7684spo\u5173\u7cfb\u4e09\u5143\u7ec4\u5217\u8868 (\u5217\u8868\u4e2d\u542b\u6709\u591a\u4e2aspo\u4e09\u5143\u7ec4) \u4ee5spo_list\u7684\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f8b\uff1a\u5143\u7d20\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5176\u4e2d\"predictate\"\u4ee3\u8868\u4e3a\u5173\u7cfb\u7c7b\u578b; \"object_type\"\u4ee3\u8868\u5c3e\u5b9e\u4f53\u7684\u7c7b\u578b; \"subject_type\"\u4ee3\u8868\u4e3b\u5b9e\u4f53\u7684\u7c7b\u578b; \"object\"\u4ee3\u8868\u5c3e\u5b9e\u4f53; \"subject\" \u4ee3\u8868\u4e3b\u5b9e\u4f53. \u6d4b\u8bd5\u6570\u636e\u96c6: /home/ec2-user/Casrel_RE/relationship_extract/data/test.json { \"text\" : \"1997\u5e74\uff0c\u674e\u67cf\u5149\u4ece\u5317\u4eac\u5927\u5b66\u6cd5\u5f8b\u7cfb\u535a\u58eb\u6bd5\u4e1a\" , \"spo_list\" : [{ \"predicate\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"object_type\" : \"\u5b66\u6821\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u5317\u4eac\u5927\u5b66\" , \"subject\" : \"\u674e\u67cf\u5149\" }]} { \"text\" : \"\u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5\uff1a\u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7\" , \"spo_list\" : [{ \"predicate\" : \"\u4e3b\u6f14\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u5f71\u89c6\u4f5c\u54c1\" , \"object\" : \"\u5b89\u60a6\u6eaa\" , \"subject\" : \"\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\" }]} { \"text\" : \"\u5c71\u4e1c\u6d77\u76ca\u5b9d\u6c34\u4ea7\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e2002\u5e74\uff0c\u5750\u843d\u5728\u98ce\u666f\u79c0\u4e3d\u7684\u4e2d\u56fd\u80f6\u4e1c\u534a\u5c9b\uff0c\u662f\u4e00\u5bb6\u4ee5\u9ad8\u79d1\u6280\u6d77\u4ea7\u54c1\u7684\u80b2\u82d7\u3001\u517b\u6b96\u3001\u7814\u53d1\u3001\u52a0\u5de5\u3001\u9500\u552e\u4e3a\u4e00\u4f53\u7684\u7efc\u5408\u6027\u65b0\u578b\u4ea7\u4e1a\u5316\u6c34\u4ea7\u4f01\u4e1a\uff0c\u62e5\u6709\u6807\u51c6\u5316\u6df1\u6d77\u56f4\u5830\u57fa\u5730\uff0c\u662f\u5c71\u4e1c\u7701\u6c34\u4ea7\u517b\u6b96\u884c\u4e1a\u7684\u9f99\u5934\u4f01\u4e1a\u4e4b\u4e00\uff0c\u540c\u65f6\u4e5f\u662f\u56fd\u5185\u65e5\u672c\u7ea2\u53c2\u4e0e\u80f6\u4e1c\u53c2\u6742\u4ea4\u53c2\u79cd\u4ea7\u4e1a\u5316\u751f\u4ea7\u57fa\u5730\" , \"spo_list\" : [{ \"predicate\" : \"\u6210\u7acb\u65e5\u671f\" , \"object_type\" : \"\u65e5\u671f\" , \"subject_type\" : \"\u673a\u6784\" , \"object\" : \"2002\u5e74\" , \"subject\" : \"\u5c71\u4e1c\u6d77\u76ca\u5b9d\u6c34\u4ea7\u80a1\u4efd\u6709\u9650\u516c\u53f8\" }]} { \"text\" : \"\u300a\u9a91\u58eb\u4e4b\u7231\u4e0e\u6e38\u541f\u8bd7\u4eba\u300b\u662f\u4e0a\u6d77\u793e\u4f1a\u79d1\u5b66\u9662\u51fa\u7248\u793e2012\u5e74\u51fa\u7248\u7684\u56fe\u4e66\uff0c\u4f5c\u8005\u662f\u82f1\u56fd\u7684 \u83f2\u5965\u5a1c\u00b7\u65af\u6c83\u6bd4\" , \"spo_list\" : [{ \"predicate\" : \"\u51fa\u7248\u793e\" , \"object_type\" : \"\u51fa\u7248\u793e\" , \"subject_type\" : \"\u56fe\u4e66\u4f5c\u54c1\" , \"object\" : \"\u4e0a\u6d77\u793e\u4f1a\u79d1\u5b66\u9662\u51fa\u7248\u793e\" , \"subject\" : \"\u9a91\u58eb\u4e4b\u7231\u4e0e\u6e38\u541f\u8bd7\u4eba\" }, { \"predicate\" : \"\u4f5c\u8005\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u56fe\u4e66\u4f5c\u54c1\" , \"object\" : \"\u83f2\u5965\u5a1c\u00b7\u65af\u6c83\u6bd4\" , \"subject\" : \"\u9a91\u58eb\u4e4b\u7231\u4e0e\u6e38\u541f\u8bd7\u4eba\" }]} test.json\u4e2d\u5305\u542b13417\u884c\u6837\u672c, \u6bcf\u884c\u4e3a\u4e00\u4e2a\u5b57\u5178\u6837\u5f0f, \u7b2c\u4e00\u4e2akey\u4e3a\"text\", \u5bf9\u5e94\u7684value\u4e3a\u5f85\u62bd\u53d6\u5173\u7cfb\u7684\u4e2d\u6587\u6587\u672c, \u7b2c\u4e8c\u4e2akey\u4e3a\"spo_list\", \u5bf9\u5e94\u7684value\u4e3a\u53e5\u5b50\u4e2d\u771f\u5b9e\u7684spo\u5173\u7cfb\u4e09\u5143\u7ec4\u5217\u8868 (\u5217\u8868\u4e2d\u542b\u6709\u591a\u4e2aspo\u4e09\u5143\u7ec4) \u4ee5spo_list\u7684\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f8b\uff1a\u5143\u7d20\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5176\u4e2d\"predictate\"\u4ee3\u8868\u4e3a\u5173\u7cfb\u7c7b\u578b; \"object_type\"\u4ee3\u8868\u5c3e\u5b9e\u4f53\u7684\u7c7b\u578b; \"subject_type\"\u4ee3\u8868\u4e3b\u5b9e\u4f53\u7684\u7c7b\u578b; \"object\"\u4ee3\u8868\u5c3e\u5b9e\u4f53; \"subject\" \u4ee3\u8868\u4e3b\u5b9e\u4f53. \u7b2c\u4e8c\u6b65:\u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801 \u00b6 Config\u7c7b\u6587\u4ef6\u8def\u5f84\u4e3a: /home/ec2-user/Casrel_RE/relationship_extract/codes/config.py config\u6587\u4ef6\u76ee\u7684\uff1a\u914d\u7f6e\u9879\u76ee\u5e38\u7528\u53d8\u91cf\uff0c\u4e00\u822c\u8fd9\u4e9b\u53d8\u91cf\u5c5e\u4e8e\u4e0d\u7ecf\u5e38\u6539\u53d8\u7684\uff0c\u6bd4\u5982\uff1a\u8bad\u7ec3\u6587\u4ef6\u8def\u5f84\u3001\u6a21\u578b\u8bad\u7ec3\u6b21\u6570\u3001\u6a21\u578b\u8d85\u53c2\u6570\u7b49\u7b49 # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import torch # \u5bfc\u5165Vocabulary\uff0c\u76ee\u7684\uff1a\u7528\u4e8e\u6784\u5efa, \u5b58\u50a8\u548c\u4f7f\u7528 `str` \u5230 `int` \u7684\u4e00\u4e00\u6620\u5c04 from fastNLP import Vocabulary from transformers import BertTokenizer , AdamW import json # \u6784\u5efa\u914d\u7f6e\u6587\u4ef6Config\u7c7b class Config ( object ): def __init__ ( self ): # \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528GPU\u6765\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 self . device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) self . bert_path = \"\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7edd\u5bf9\u8def\u5f84\" self . num_rel = 18 # \u5173\u7cfb\u7684\u79cd\u7c7b\u6570 self . batch_size = 8 self . train_data_path = \"\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84\" self . dev_data_path = \"\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84\" self . test_data_path = \"\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84\" self . rel_dict_path = \"\u5173\u7cfb\u6570\u636e\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\" id2rel = json . load ( open ( self . rel_dict_path , encoding = 'utf8' )) self . rel_vocab = Vocabulary ( padding = None , unknown = None ) # vocab\u66f4\u65b0\u81ea\u5df1\u7684\u5b57\u5178\uff0c\u8f93\u5165\u4e3alist\u5217\u8868 self . rel_vocab . add_word_lst ( list ( id2rel . values ())) self . tokenizer = BertTokenizer . from_pretrained ( self . bert_path ) self . learning_rate = 1e-5 self . bert_dim = 768 self . epochs = 10 \u7b2c\u4e09\u6b65\uff1a \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570 \u00b6 \u51fd\u6570\u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/utils/process.py \u9996\u9009\u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 # coding:utf-8 from codes.config import * import torch from random import choice from collections import defaultdict conf = Config () \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570find_head_idx, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def find_head_idx ( source , target ): # # \u83b7\u53d6\u5b9e\u4f53\u7684\u5f00\u59cb\u7d22\u5f15\u4f4d\u7f6e target_len = len ( target ) for i in range ( len ( source )): if source [ i : i + target_len ] == target : return i return - 1 \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570create_label, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def create_label ( inner_triples , inner_input_ids , seq_len ): # \u83b7\u53d6\u6bcf\u4e2a\u6837\u672c\u7684\uff1a\u4e3b\u5b9e\u4f53\u957f\u5ea6\u3001\u4e3b\u5b9e\u4f53\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u5f20\u91cf\u8868\u793a\u3001\u5ba2\u5b9e\u4f53\u4ee5\u53ca\u5bf9\u5e94\u5173\u7cfb\u5b9e\u73b0\u5f20\u91cf\u8868\u793a inner_sub_heads , inner_sub_tails = torch . zeros ( seq_len ), torch . zeros ( seq_len ) inner_obj_heads = torch . zeros (( seq_len , conf . num_rel )) inner_obj_tails = torch . zeros (( seq_len , conf . num_rel )) inner_sub_head2tail = torch . zeros ( seq_len ) # \u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4ece\u5f00\u5934\u4e00\u4e2a\u8bcd\u5230\u672b\u5c3e\u8bcd\u7684\u7d22\u5f15 # \u56e0\u4e3a\u6570\u636e\u9884\u5904\u7406\u4ee3\u7801\u8fd8\u5f85\u4f18\u5316,\u4f1a\u6709\u4e0d\u5b58\u5728\u5173\u7cfb\u4e09\u5143\u7ec4\u7684\u60c5\u51b5\uff0c # \u521d\u59cb\u5316\u4e00\u4e2a\u4e3b\u8bcd\u7684\u957f\u5ea6\u4e3a1\uff0c\u5373\u6ca1\u6709\u4e3b\u8bcd\u9ed8\u8ba4\u4e3b\u8bcd\u957f\u5ea6\u4e3a1\uff0c # \u9632\u6b62\u96f6\u9664\u62a5\u9519,\u521d\u59cb\u5316\u4efb\u4f55\u975e\u96f6\u6570\u5b57\u90fd\u53ef\u4ee5\uff0c\u6ca1\u6709\u4e3b\u8bcd\u5206\u5b50\u662f\u5168\u96f6\u77e9\u9635 inner_sub_len = torch . tensor ([ 1 ], dtype = torch . float ) # \u4e3b\u8bcd\u5230\u8c13\u8bcd\u7684\u6620\u5c04 s2ro_map = defaultdict ( list ) # print(s2ro_map) for inner_triple in inner_triples : # print(inner_triple) inner_triple = ( conf . tokenizer ( inner_triple [ 'subject' ], add_special_tokens = False )[ 'input_ids' ], conf . rel_vocab . to_index ( inner_triple [ 'predicate' ]), conf . tokenizer ( inner_triple [ 'object' ], add_special_tokens = False )[ 'input_ids' ] ) sub_head_idx = find_head_idx ( inner_input_ids , inner_triple [ 0 ]) obj_head_idx = find_head_idx ( inner_input_ids , inner_triple [ 2 ]) if sub_head_idx != - 1 and obj_head_idx != - 1 : sub = ( sub_head_idx , sub_head_idx + len ( inner_triple [ 0 ]) - 1 ) # s2ro_map\u4fdd\u5b58\u4e3b\u8bed\u5230\u8c13\u8bed\u7684\u6620\u5c04 s2ro_map [ sub ] . append ( ( obj_head_idx , obj_head_idx + len ( inner_triple [ 2 ]) - 1 , inner_triple [ 1 ])) # {(3,5):[(7,8,0)]} 0\u662f\u5173\u7cfb if s2ro_map : for s in s2ro_map : inner_sub_heads [ s [ 0 ]] = 1 inner_sub_tails [ s [ 1 ]] = 1 sub_head_idx , sub_tail_idx = choice ( list ( s2ro_map . keys ())) inner_sub_head2tail [ sub_head_idx : sub_tail_idx + 1 ] = 1 inner_sub_len = torch . tensor ([ sub_tail_idx + 1 - sub_head_idx ], dtype = torch . float ) for ro in s2ro_map . get (( sub_head_idx , sub_tail_idx ), []): inner_obj_heads [ ro [ 0 ]][ ro [ 2 ]] = 1 inner_obj_tails [ ro [ 1 ]][ ro [ 2 ]] = 1 return inner_sub_len , inner_sub_head2tail , inner_sub_heads , inner_sub_tails , inner_obj_heads , inner_obj_tails \u6784\u5efa\u7b2c\u4e09\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570collate_fn, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def collate_fn ( data ): text_list = [ value [ 0 ] for value in data ] triple = [ value [ 1 ] for value in data ] # \u6309\u7167batch\u4e2d\u6700\u957f\u53e5\u5b50\u8865\u9f50 text = conf . tokenizer . batch_encode_plus ( text_list , padding = True ) batch_size = len ( text [ 'input_ids' ]) seq_len = len ( text [ 'input_ids' ][ 0 ]) sub_heads = [] sub_tails = [] obj_heads = [] obj_tails = [] sub_len = [] sub_head2tail = [] # \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u6837\u672c\uff0c\u5c06\u5b9e\u4f53\u4fe1\u606f\u8fdb\u884c\u5f20\u91cf\u7684\u8f6c\u5316 for batch_index in range ( batch_size ): inner_input_ids = text [ 'input_ids' ][ batch_index ] # \u5355\u4e2a\u53e5\u5b50\u53d8\u6210\u7d22\u5f15\u540e inner_triples = triple [ batch_index ] # \u83b7\u53d6\u6bcf\u4e2a\u6837\u672c\u7684\uff1a\u4e3b\u5b9e\u4f53\u957f\u5ea6\u3001\u4e3b\u5b9e\u4f53\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u5f20\u91cf\u8868\u793a\u3001\u5ba2\u5b9e\u4f53\u4ee5\u53ca\u5bf9\u5e94\u5173\u7cfb\u5b9e\u73b0\u5f20\u91cf\u8868\u793a results = create_label ( inner_triples , inner_input_ids , seq_len ) sub_len . append ( results [ 0 ]) sub_head2tail . append ( results [ 1 ]) sub_heads . append ( results [ 2 ]) sub_tails . append ( results [ 3 ]) obj_heads . append ( results [ 4 ]) obj_tails . append ( results [ 5 ]) input_ids = torch . tensor ( text [ 'input_ids' ]) . to ( conf . device ) mask = torch . tensor ( text [ 'attention_mask' ]) . to ( conf . device ) # \u501f\u52a9torch.stack()\u51fd\u6570\u6cbf\u4e00\u4e2a\u65b0\u7ef4\u5ea6\u5bf9\u8f93\u5165batch_size\u5f20\u91cf\u5e8f\u5217\u8fdb\u884c\u8fde\u63a5\uff0c\u5e8f\u5217\u4e2d\u6240\u6709\u5f20\u91cf\u5e94\u4e3a\u76f8\u540c\u5f62\u72b6\uff1bstack \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u65b0\u589e\u4e00\u4e2a\u7ef4\u5ea6, sub_heads = torch . stack ( sub_heads ) . to ( conf . device ) sub_tails = torch . stack ( sub_tails ) . to ( conf . device ) sub_len = torch . stack ( sub_len ) . to ( conf . device ) sub_head2tail = torch . stack ( sub_head2tail ) . to ( conf . device ) obj_heads = torch . stack ( obj_heads ) . to ( conf . device ) obj_tails = torch . stack ( obj_tails ) . to ( conf . device ) inputs = { 'input_ids' : input_ids , 'mask' : mask , 'sub_head2tail' : sub_head2tail , 'sub_len' : sub_len } labels = { 'sub_heads' : sub_heads , 'sub_tails' : sub_tails , 'obj_heads' : obj_heads , 'obj_tails' : obj_tails } return inputs , labels \u7b2c\u56db\u6b65\uff1a\u6784\u5efaDataSet\u7c7b\u4ee5\u53caDataloader\u51fd\u6570 \u00b6 \u4ee3\u7801\u8def\u5f84\u4e3a: /home/ec2-user/Casrel_RE/relationship_extract/codes/utils/data_loader.py \u9996\u5148\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305 # coding:utf-8 from torch.utils.data import DataLoader , Dataset from utils.process import * conf = Config () \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u7c7bMyDataset, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u7c7b. # \u81ea\u5b9a\u4e49Dataset class MyDataset ( Dataset ): def __init__ ( self , data_path ): super ( MyDataset , self ) . __init__ () self . dataset = [ json . loads ( line ) for line in open ( data_path , encoding = 'utf8' )] def __len__ ( self ): return len ( self . dataset ) def __getitem__ ( self , index ): content = self . dataset [ index ] text = content [ 'text' ] spo_list = content [ 'spo_list' ] return text , spo_list \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_data, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_data (): # \u5b9e\u4f8b\u5316\u8bad\u7ec3\u6570\u636e\u96c6Dataset\u5bf9\u8c61 train_data = MyDataset ( conf . train_data_path ) # \u5b9e\u4f8b\u5316\u9a8c\u8bc1\u6570\u636e\u96c6Dataset\u5bf9\u8c61 dev_data = MyDataset ( conf . dev_data_path ) # \u5b9e\u4f8b\u5316\u6d4b\u8bd5\u6570\u636e\u96c6Dataset\u5bf9\u8c61 test_data = MyDataset ( conf . test_data_path ) # \u5b9e\u4f8b\u5316\u8bad\u7ec3\u6570\u636e\u96c6Dataloader\u5bf9\u8c61 train_dataloader = DataLoader ( dataset = train_data , batch_size = conf . batch_size , shuffle = True , collate_fn = collate_fn , drop_last = True ) # \u5b9e\u4f8b\u5316\u9a8c\u8bc1\u6570\u636e\u96c6Dataloader\u5bf9\u8c61 dev_dataloader = DataLoader ( dataset = dev_data , batch_size = conf . batch_size , shuffle = True , collate_fn = collate_fn , drop_last = True ) # \u5b9e\u4f8b\u5316\u6d4b\u8bd5\u6570\u636e\u96c6Dataloader\u5bf9\u8c61 test_dataloader = DataLoader ( dataset = test_data , batch_size = conf . batch_size , shuffle = True , collate_fn = collate_fn , drop_last = True ) return train_dataloader , dev_dataloader , test_dataloader \u5c0f\u7ed3\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u8bb2\u89e3\u4e86\u5173\u7cfb\u62bd\u53d6\u6570\u636e\u7ed3\u6784\u5f62\u5f0f, \u5e76\u5b9e\u73b0\u4e86\u82e5\u5e72\u6570\u636e\u5904\u7406\u51fd\u6570, \u8fd9\u4e9b\u51fd\u6570\u4f1a\u5728\u672a\u6765\u7684\u9879\u76ee\u4ee3\u7801\u4e2d\u5e94\u7528.","title":"4.3 Casrel\u6a21\u578b\u7684\u6570\u636e\u5904\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_1","text":"","title":"\u6570\u636e\u5904\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_2","text":"\u4e86\u89e3\u672c\u9879\u76ee\u6570\u636e\u6765\u6e90\u3001\u660e\u786e\u6570\u636e\u683c\u5f0f \u638c\u63e1\u6570\u636e\u5904\u7406\u7684\u5de5\u5177\u51fd\u6570\u4ee3\u7801\u5b9e\u73b0.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_3","text":"","title":"\u9879\u76ee\u6574\u4f53\u4ee3\u7801\u67b6\u6784\u56fe"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_4","text":"\u672c\u9879\u76ee\u4e2d\u5bf9\u6570\u636e\u90e8\u5206\u7684\u9884\u5904\u7406\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6 \u7b2c\u4e8c\u6b65: \u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801 \u7b2c\u4e09\u6b65: \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570 \u7b2c\u56db\u6b65: \u6784\u5efaDataSet\u7c7b\u4e0edataloader\u51fd\u6570","title":"\u5173\u7cfb\u62bd\u53d6\u9879\u76ee\u6570\u636e\u9884\u5904\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_5","text":"\u672c\u6b21\u9879\u76ee\u6570\u636e\u6765\u6e90\u4e3a\u516c\u5f00\u7684\u5343\u8a00\u6570\u636e\u96c6https:// www.luge.ai/#/ \uff0c\u4f7f\u7528\u5f00\u6e90\u6570\u636e\u7684\u597d\u5904\uff0c\u6211\u4eec\u65e0\u9700\u6807\u6ce8\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\uff0c\u672c\u6b21\u9879\u76ee\u7684\u4e3b\u8981\u76ee\u7684, \u9700\u8981\u5927\u5bb6\u638c\u63e1\u5b9e\u73b0\u5173\u7cfb\u62bd\u53d6\u7684\u601d\u60f3. \u6ce8\u610f\uff1a\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u6570\u636e\u4e00\u822c\u9700\u8981\u4eba\u5de5\u624b\u52a8\u6807\u6ce8. \u9879\u76ee\u6570\u636e\u7684\u8def\u5f84\u4e3a\uff1a/home/ec2-user/Casrel_RE/relationship_extract/data \u9879\u76ee\u7684\u6570\u636e\u96c6\u5305\u62ec6\u4e2ajson\u6587\u4ef6\uff08\u5176\u4e2dpredict_spo.json\u662f\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\uff0crel_type.json\u662f\u5e26\u6709\u5b9e\u4f53\u7c7b\u578b\u7684\u5173\u7cfb\u6587\u4ef6\uff09, \u6211\u4eec\u8fd9\u91cc\u53ea\u5148\u9488\u5bf9train.json\u3001dev.json\u3001test.json\u3001relation.json\u8fdb\u884c\u4ecb\u7ecd: \u5173\u7cfb\u7c7b\u578b\u6587\u4ef6: /home/ec2-user/Casrel_RE/relationship_extract/data/relation.json { \"0\" : \"\u51fa\u54c1\u516c\u53f8\" , \"1\" : \"\u56fd\u7c4d\" , \"2\" : \"\u51fa\u751f\u5730\" , \"3\" : \"\u6c11\u65cf\" , \"4\" : \"\u51fa\u751f\u65e5\u671f\" , \"5\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"6\" : \"\u6b4c\u624b\" , \"7\" : \"\u6240\u5c5e\u4e13\u8f91\" , \"8\" : \"\u4f5c\u8bcd\" , \"9\" : \"\u4f5c\u66f2\" , \"10\" : \"\u8fde\u8f7d\u7f51\u7ad9\" , \"11\" : \"\u4f5c\u8005\" , \"12\" : \"\u51fa\u7248\u793e\" , \"13\" : \"\u4e3b\u6f14\" , \"14\" : \"\u5bfc\u6f14\" , \"15\" : \"\u7f16\u5267\" , \"16\" : \"\u4e0a\u6620\u65f6\u95f4\" , \"17\" : \"\u6210\u7acb\u65e5\u671f\" } rel.json\u4e2d\u5305\u542b18\u4e2a\u7c7b\u522b\u6807\u7b7e, json\u6587\u4ef6\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5b57\u5178\uff0ckey\u5bf9\u5e94\u5173\u7cfb\u7684id\uff0cvalue\u5bf9\u5e94\u5173\u7cfb\u7c7b\u578b. \u8bad\u7ec3\u6570\u636e\u96c6: /home/ec2-user/Casrel_RE/relationship_extract/data/train.json { \"text\" : \"\u7b14 \u540d\uff1a\u6728\u65a7\u539f \u540d\uff1a\u6768\u8386\u66fe \u7528 \u540d\uff1a\u7a46\u65b0\u6587\u3001\u7267\u7f8a\u3001\u5bd2\u767d\u3001\u6d0b\u6f3e\u51fa\u751f\u65e5\u671f\uff1a1931\u2014\u804c \u4e1a\uff1a\u4f5c\u5bb6\u3001\u8bd7\u4eba\u6027 \u522b\uff1a \u7537\u6c11 \u65cf\uff1a \u56de\u65cf\u653f\u6cbb\u9762\u8c8c\uff1a\u4e2d\u5171\u515a\u5458 \u7956 \u7c4d\uff1a\u56fa\u539f\u53bf\u51fa \u751f \u5730\uff1a\u6210\u90fd\" , \"spo_list\" : [{ \"predicate\" : \"\u6c11\u65cf\" , \"object_type\" : \"\u6587\u672c\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u56de\u65cf\" , \"subject\" : \"\u6728\u65a7\" }, { \"predicate\" : \"\u51fa\u751f\u65e5\u671f\" , \"object_type\" : \"\u65e5\u671f\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"1931\" , \"subject\" : \"\u6728\u65a7\" }, { \"predicate\" : \"\u51fa\u751f\u5730\" , \"object_type\" : \"\u5730\u70b9\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u6210\u90fd\" , \"subject\" : \"\u6728\u65a7\" }]} { \"text\" : \"\u300a\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\u300b\u662f\u9ec4\u5bb6\u5f3a\u7684\u4e00\u9996\u7ca4\u8bed\u6b4c\u66f2\uff0c\u7531\u4f55\u542f\u5f18\u4f5c\u8bcd\uff0c\u9ec4\u5bb6\u5f3a\u4f5c\u66f2\u7f16\u66f2\u5e76\u6f14\u5531\uff0c\u6536\u5f55\u4e8e2007\u5e7408\u670801\u65e5\u53d1\u884c\u7684\u4e13\u8f91\u300a\u5979\u4ed6\u300b\u4e2d\" , \"spo_list\" : [{ \"predicate\" : \"\u4f5c\u66f2\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u9ec4\u5bb6\u5f3a\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }, { \"predicate\" : \"\u6240\u5c5e\u4e13\u8f91\" , \"object_type\" : \"\u97f3\u4e50\u4e13\u8f91\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u5979\u4ed6\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }, { \"predicate\" : \"\u6b4c\u624b\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u9ec4\u5bb6\u5f3a\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }, { \"predicate\" : \"\u4f5c\u8bcd\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u4f55\u542f\u5f18\" , \"subject\" : \"\u4eca\u665a\u4f1a\u5728\u54ea\u91cc\u9192\u6765\" }]} { \"text\" : \"2003\u5e7412\u670826\u65e5\uff0c\u516c\u53f82003\u5e74\u7b2c\u56db\u6b21\u4e34\u65f6\u80a1\u4e1c\u5927\u4f1a\u6279\u51c6\uff0c\u516c\u53f8\u540d\u79f0\u53d8\u66f4\u4e3a\u201c\u534e\u590f\u5efa\u901a\u79d1\u6280\u5f00\u53d1\u80a1\u4efd\u6709\u9650\u516c\u53f8\u201d\uff0c\u5e76\u4e8e2004\u5e746\u67083\u65e5\u53d6\u5f97\u6cb3\u5317\u7701\u5de5\u5546\u884c\u653f\u7ba1\u7406\u5c40\u6362\u53d1\u7684\u300a\u4f01\u4e1a\u6cd5\u4eba\u8425\u4e1a\u6267\u7167\u300b\uff0c\u6cd5\u5b9a\u4ee3\u8868\u4eba\uff1a\u4f55\u5f3a\" , \"spo_list\" : [{ \"predicate\" : \"\u6210\u7acb\u65e5\u671f\" , \"object_type\" : \"\u65e5\u671f\" , \"subject_type\" : \"\u4f01\u4e1a\" , \"object\" : \"2004\u5e746\u67083\u65e5\" , \"subject\" : \"\u534e\u590f\u5efa\u901a\u79d1\u6280\u5f00\u53d1\u80a1\u4efd\u6709\u9650\u516c\u53f8\" }]} { \"text\" : \"\u6f58\u60df\u5357\uff0c\u9655\u897f\u5927\u8354\u53bf\u6ea2\u6e21\u6751\u4eba\" , \"spo_list\" : [{ \"predicate\" : \"\u51fa\u751f\u5730\" , \"object_type\" : \"\u5730\u70b9\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u9655\u897f\u5927\u8354\" , \"subject\" : \"\u6f58\u60df\u5357\" }]} train.json\u4e2d\u5305\u542b55433\u884c\u6837\u672c, \u6bcf\u884c\u4e3a\u4e00\u4e2a\u5b57\u5178\u6837\u5f0f, \u7b2c\u4e00\u4e2akey\u4e3a\"text\", \u5bf9\u5e94\u7684value\u4e3a\u5f85\u62bd\u53d6\u5173\u7cfb\u7684\u4e2d\u6587\u6587\u672c, \u7b2c\u4e8c\u4e2akey\u4e3a\"spo_list\", \u5bf9\u5e94\u7684value\u4e3a\u53e5\u5b50\u4e2d\u771f\u5b9e\u7684spo\u5173\u7cfb\u4e09\u5143\u7ec4\u5217\u8868 (\u5217\u8868\u4e2d\u542b\u6709\u591a\u4e2aspo\u4e09\u5143\u7ec4) \u4ee5spo_list\u7684\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f8b\uff1a\u5143\u7d20\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5176\u4e2d\"predictate\"\u4ee3\u8868\u4e3a\u5173\u7cfb\u7c7b\u578b; \"object_type\"\u4ee3\u8868\u5c3e\u5b9e\u4f53\u7684\u7c7b\u578b; \"subject_type\"\u4ee3\u8868\u4e3b\u5b9e\u4f53\u7684\u7c7b\u578b; \"object\"\u4ee3\u8868\u5c3e\u5b9e\u4f53; \"subject\" \u4ee3\u8868\u4e3b\u5b9e\u4f53. \u9a8c\u8bc1\u6570\u636e\u96c6: /home/ec2-user/Casrel_RE/relationship_extract/data/dev.json { \"text\" : \"\u8521\u5fd7\u575a\u5728\u5357\u4eac\u827a\u672f\u5b66\u9662\u6c42\u5b66\u65f6\u53d7\u8fc7\u7cfb\u7edf\u3001\u6b63\u89c4\u7684\u827a\u672f\u6559\u80b2\u548c\u4e13\u4e1a\u8bad\u7ec3\uff0c\u6df1\u5f97\u5218\u6d77\u7c9f\u3001\u7f57\u53d4\u5b50\u3001\u9648\u4e4b\u4f5b\u3001\u8c22\u6d77\u71d5\u3001\u9648\u5927\u7fbd\u7b49\u8457\u540d\u4e2d\u56fd\u753b\u5927\u5e08\u7684\u6307\u6388\uff0c\u57fa\u672c\u529f\u624e\u5b9e\uff0c\u52a0\u4e0a\u4ed6\u575a\u6301\u4ece\u751f\u6d3b\u4e2d\u6c72\u53d6\u521b\u4f5c\u6e90\u6cc9\uff0c\u7528\u5fc3\u6355\u6349\u751f\u6d3b\u4e2d\u6700\u7f8e\u6700\u611f\u4eba\u7684\u77ac\u95f4\u5f62\u8c61\uff0c\u56e0\u800c\u4ed6\u7684\u4f5c\u54c1\uff0c\u4e0d\u8bba\u662f\u5c71\u6c34\u3001\u82b1\u9e1f\u3001\u98de\u79bd\u3001\u8d70\u517d\uff0c\u65e0\u4e0d\u5145\u6ee1\u4e86\u751f\u547d\u7684\u7075\u6c14\uff0c\u5bc4\u6258\u7740\u753b\u5bb6\u7684\u60c5\u6000\uff0c\u9887\u5f97\u81ea\u7136\u4e4b\u771f\u8da3\" , \"spo_list\" : [{ \"predicate\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"object_type\" : \"\u5b66\u6821\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u5357\u4eac\u827a\u672f\u5b66\u9662\" , \"subject\" : \"\u8521\u5fd7\u575a\" }]} { \"text\" : \"\u4eba\u7269\u7b80\u4ecb1974\u5e741\u6708\u51fa\u751f\uff0c\u526f\u6559\u6388 \uff0c\u5b66\u5386\u7855\u58eb \u8d75\u660e\uff0c\u51fa\u751f\u4e8e1974\u5e741\u6708\uff0c\u6bd5\u4e1a\u4e8e\u6b66\u6c49\u97f3\u4e50\u5b66\u9662\u7ba1\u5f26\u7cfb\uff0c\u662f\u6d1b\u9633\u5e08\u8303\u5b66\u9662\u97f3\u4e50\u5b66\u9662\u6559\u6388\" , \"spo_list\" : [{ \"predicate\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"object_type\" : \"\u5b66\u6821\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u6b66\u6c49\u97f3\u4e50\u5b66\u9662\" , \"subject\" : \"\u8d75\u660e\" }]} { \"text\" : \"\u97e9\u56fd\u7535\u89c6\u5267\u300a\u4e00\u679d\u6885\u5f52\u6765\u300b\uff08\u53c8\u540d\u300a\u7f8e\u8d3c\u4e00\u679d\u6885\u4f20\u300b\uff09\uff0c\u6539\u7f16\u81ea\u97e9\u56fd\u6f2b\u753b\u4f5c\u5bb6\u9ad8\u7fbd\u8363\u7684\u6f2b\u753b\uff0c\u7531\u9ec4\u4ec1\u96f7\u6267\u5bfc\uff0c\u4e01\u4e00\u5b87\u548c\u5c39\u73cd\u5e8f\u7b49\u8054\u8882\u51fa\u6f14\" , \"spo_list\" : [{ \"predicate\" : \"\u4e3b\u6f14\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u5f71\u89c6\u4f5c\u54c1\" , \"object\" : \"\u4e01\u4e00\u5b87\" , \"subject\" : \"\u4e00\u679d\u6885\u5f52\u6765\" }, { \"predicate\" : \"\u5bfc\u6f14\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u5f71\u89c6\u4f5c\u54c1\" , \"object\" : \"\u9ec4\u4ec1\u96f7\" , \"subject\" : \"\u4e00\u679d\u6885\u5f52\u6765\" }]} { \"text\" : \"\u300a\u7ed3\u4e86\u300b\u662f\u4e00\u9996\u7531\u90dd\u4e91\u6f14\u5531\u7684\u6b4c\u66f2\uff0c\u7531\u90dd\u4e91\u586b\u8bcd\uff0c\u66f2\u6539\u7f16\u81ea\u534e\u76db\u987f\u5e7f\u573a\uff0c\u6536\u5f55\u4e8e\u4e13\u8f91\u300a\u7a81\u7136\u60f3\u5230\u7406\u60f3\u8fd9\u4e2a\u8bcd\u300b\u4e2d\" , \"spo_list\" : [{ \"predicate\" : \"\u4f5c\u66f2\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u6b4c\u66f2\" , \"object\" : \"\u6539\u7f16\u81ea\u534e\u76db\u987f\u5e7f\u573a\" , \"subject\" : \"\u7ed3\u4e86\" }]} dev.json\u4e2d\u5305\u542b11191\u884c\u6837\u672c, \u6bcf\u884c\u4e3a\u4e00\u4e2a\u5b57\u5178\u6837\u5f0f, \u7b2c\u4e00\u4e2akey\u4e3a\"text\", \u5bf9\u5e94\u7684value\u4e3a\u5f85\u62bd\u53d6\u5173\u7cfb\u7684\u4e2d\u6587\u6587\u672c, \u7b2c\u4e8c\u4e2akey\u4e3a\"spo_list\", \u5bf9\u5e94\u7684value\u4e3a\u53e5\u5b50\u4e2d\u771f\u5b9e\u7684spo\u5173\u7cfb\u4e09\u5143\u7ec4\u5217\u8868 (\u5217\u8868\u4e2d\u542b\u6709\u591a\u4e2aspo\u4e09\u5143\u7ec4) \u4ee5spo_list\u7684\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f8b\uff1a\u5143\u7d20\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5176\u4e2d\"predictate\"\u4ee3\u8868\u4e3a\u5173\u7cfb\u7c7b\u578b; \"object_type\"\u4ee3\u8868\u5c3e\u5b9e\u4f53\u7684\u7c7b\u578b; \"subject_type\"\u4ee3\u8868\u4e3b\u5b9e\u4f53\u7684\u7c7b\u578b; \"object\"\u4ee3\u8868\u5c3e\u5b9e\u4f53; \"subject\" \u4ee3\u8868\u4e3b\u5b9e\u4f53. \u6d4b\u8bd5\u6570\u636e\u96c6: /home/ec2-user/Casrel_RE/relationship_extract/data/test.json { \"text\" : \"1997\u5e74\uff0c\u674e\u67cf\u5149\u4ece\u5317\u4eac\u5927\u5b66\u6cd5\u5f8b\u7cfb\u535a\u58eb\u6bd5\u4e1a\" , \"spo_list\" : [{ \"predicate\" : \"\u6bd5\u4e1a\u9662\u6821\" , \"object_type\" : \"\u5b66\u6821\" , \"subject_type\" : \"\u4eba\u7269\" , \"object\" : \"\u5317\u4eac\u5927\u5b66\" , \"subject\" : \"\u674e\u67cf\u5149\" }]} { \"text\" : \"\u5f53\u300a\u4e09\u751f\u4e09\u4e16\u300b4\u4f4d\u5973\u661f\u6362\u4e0a\u73b0\u4ee3\u88c5\uff1a\u7b2c\u56db\uff0c\u5b89\u60a6\u6eaa\u5728\u300a\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\u300b\u4e2d\u9970\u6f14\u5c11\u8f9b\uff0c\u5b89\u60a6\u6eaa\u7a7f\u4e0a\u73b0\u4ee3\u88c5\u5341\u5206\u4eae\u773c\uff0c\u6c14\u8d28\u6e05\u65b0\u8131\u4fd7\" , \"spo_list\" : [{ \"predicate\" : \"\u4e3b\u6f14\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u5f71\u89c6\u4f5c\u54c1\" , \"object\" : \"\u5b89\u60a6\u6eaa\" , \"subject\" : \"\u4e09\u751f\u4e09\u4e16\u5341\u91cc\u6843\u82b1\" }]} { \"text\" : \"\u5c71\u4e1c\u6d77\u76ca\u5b9d\u6c34\u4ea7\u80a1\u4efd\u6709\u9650\u516c\u53f8\u6210\u7acb\u4e8e2002\u5e74\uff0c\u5750\u843d\u5728\u98ce\u666f\u79c0\u4e3d\u7684\u4e2d\u56fd\u80f6\u4e1c\u534a\u5c9b\uff0c\u662f\u4e00\u5bb6\u4ee5\u9ad8\u79d1\u6280\u6d77\u4ea7\u54c1\u7684\u80b2\u82d7\u3001\u517b\u6b96\u3001\u7814\u53d1\u3001\u52a0\u5de5\u3001\u9500\u552e\u4e3a\u4e00\u4f53\u7684\u7efc\u5408\u6027\u65b0\u578b\u4ea7\u4e1a\u5316\u6c34\u4ea7\u4f01\u4e1a\uff0c\u62e5\u6709\u6807\u51c6\u5316\u6df1\u6d77\u56f4\u5830\u57fa\u5730\uff0c\u662f\u5c71\u4e1c\u7701\u6c34\u4ea7\u517b\u6b96\u884c\u4e1a\u7684\u9f99\u5934\u4f01\u4e1a\u4e4b\u4e00\uff0c\u540c\u65f6\u4e5f\u662f\u56fd\u5185\u65e5\u672c\u7ea2\u53c2\u4e0e\u80f6\u4e1c\u53c2\u6742\u4ea4\u53c2\u79cd\u4ea7\u4e1a\u5316\u751f\u4ea7\u57fa\u5730\" , \"spo_list\" : [{ \"predicate\" : \"\u6210\u7acb\u65e5\u671f\" , \"object_type\" : \"\u65e5\u671f\" , \"subject_type\" : \"\u673a\u6784\" , \"object\" : \"2002\u5e74\" , \"subject\" : \"\u5c71\u4e1c\u6d77\u76ca\u5b9d\u6c34\u4ea7\u80a1\u4efd\u6709\u9650\u516c\u53f8\" }]} { \"text\" : \"\u300a\u9a91\u58eb\u4e4b\u7231\u4e0e\u6e38\u541f\u8bd7\u4eba\u300b\u662f\u4e0a\u6d77\u793e\u4f1a\u79d1\u5b66\u9662\u51fa\u7248\u793e2012\u5e74\u51fa\u7248\u7684\u56fe\u4e66\uff0c\u4f5c\u8005\u662f\u82f1\u56fd\u7684 \u83f2\u5965\u5a1c\u00b7\u65af\u6c83\u6bd4\" , \"spo_list\" : [{ \"predicate\" : \"\u51fa\u7248\u793e\" , \"object_type\" : \"\u51fa\u7248\u793e\" , \"subject_type\" : \"\u56fe\u4e66\u4f5c\u54c1\" , \"object\" : \"\u4e0a\u6d77\u793e\u4f1a\u79d1\u5b66\u9662\u51fa\u7248\u793e\" , \"subject\" : \"\u9a91\u58eb\u4e4b\u7231\u4e0e\u6e38\u541f\u8bd7\u4eba\" }, { \"predicate\" : \"\u4f5c\u8005\" , \"object_type\" : \"\u4eba\u7269\" , \"subject_type\" : \"\u56fe\u4e66\u4f5c\u54c1\" , \"object\" : \"\u83f2\u5965\u5a1c\u00b7\u65af\u6c83\u6bd4\" , \"subject\" : \"\u9a91\u58eb\u4e4b\u7231\u4e0e\u6e38\u541f\u8bd7\u4eba\" }]} test.json\u4e2d\u5305\u542b13417\u884c\u6837\u672c, \u6bcf\u884c\u4e3a\u4e00\u4e2a\u5b57\u5178\u6837\u5f0f, \u7b2c\u4e00\u4e2akey\u4e3a\"text\", \u5bf9\u5e94\u7684value\u4e3a\u5f85\u62bd\u53d6\u5173\u7cfb\u7684\u4e2d\u6587\u6587\u672c, \u7b2c\u4e8c\u4e2akey\u4e3a\"spo_list\", \u5bf9\u5e94\u7684value\u4e3a\u53e5\u5b50\u4e2d\u771f\u5b9e\u7684spo\u5173\u7cfb\u4e09\u5143\u7ec4\u5217\u8868 (\u5217\u8868\u4e2d\u542b\u6709\u591a\u4e2aspo\u4e09\u5143\u7ec4) \u4ee5spo_list\u7684\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u4e3a\u4f8b\uff1a\u5143\u7d20\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5176\u4e2d\"predictate\"\u4ee3\u8868\u4e3a\u5173\u7cfb\u7c7b\u578b; \"object_type\"\u4ee3\u8868\u5c3e\u5b9e\u4f53\u7684\u7c7b\u578b; \"subject_type\"\u4ee3\u8868\u4e3b\u5b9e\u4f53\u7684\u7c7b\u578b; \"object\"\u4ee3\u8868\u5c3e\u5b9e\u4f53; \"subject\" \u4ee3\u8868\u4e3b\u5b9e\u4f53.","title":"\u7b2c\u4e00\u6b65: \u67e5\u770b\u9879\u76ee\u6570\u636e\u96c6"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#config","text":"Config\u7c7b\u6587\u4ef6\u8def\u5f84\u4e3a: /home/ec2-user/Casrel_RE/relationship_extract/codes/config.py config\u6587\u4ef6\u76ee\u7684\uff1a\u914d\u7f6e\u9879\u76ee\u5e38\u7528\u53d8\u91cf\uff0c\u4e00\u822c\u8fd9\u4e9b\u53d8\u91cf\u5c5e\u4e8e\u4e0d\u7ecf\u5e38\u6539\u53d8\u7684\uff0c\u6bd4\u5982\uff1a\u8bad\u7ec3\u6587\u4ef6\u8def\u5f84\u3001\u6a21\u578b\u8bad\u7ec3\u6b21\u6570\u3001\u6a21\u578b\u8d85\u53c2\u6570\u7b49\u7b49 # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import torch # \u5bfc\u5165Vocabulary\uff0c\u76ee\u7684\uff1a\u7528\u4e8e\u6784\u5efa, \u5b58\u50a8\u548c\u4f7f\u7528 `str` \u5230 `int` \u7684\u4e00\u4e00\u6620\u5c04 from fastNLP import Vocabulary from transformers import BertTokenizer , AdamW import json # \u6784\u5efa\u914d\u7f6e\u6587\u4ef6Config\u7c7b class Config ( object ): def __init__ ( self ): # \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528GPU\u6765\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 self . device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) self . bert_path = \"\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7edd\u5bf9\u8def\u5f84\" self . num_rel = 18 # \u5173\u7cfb\u7684\u79cd\u7c7b\u6570 self . batch_size = 8 self . train_data_path = \"\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84\" self . dev_data_path = \"\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84\" self . test_data_path = \"\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84\" self . rel_dict_path = \"\u5173\u7cfb\u6570\u636e\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\" id2rel = json . load ( open ( self . rel_dict_path , encoding = 'utf8' )) self . rel_vocab = Vocabulary ( padding = None , unknown = None ) # vocab\u66f4\u65b0\u81ea\u5df1\u7684\u5b57\u5178\uff0c\u8f93\u5165\u4e3alist\u5217\u8868 self . rel_vocab . add_word_lst ( list ( id2rel . values ())) self . tokenizer = BertTokenizer . from_pretrained ( self . bert_path ) self . learning_rate = 1e-5 self . bert_dim = 768 self . epochs = 10","title":"\u7b2c\u4e8c\u6b65:\u7f16\u5199Config\u7c7b\u9879\u76ee\u6587\u4ef6\u914d\u7f6e\u4ee3\u7801"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_6","text":"\u51fd\u6570\u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/utils/process.py \u9996\u9009\u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 # coding:utf-8 from codes.config import * import torch from random import choice from collections import defaultdict conf = Config () \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570find_head_idx, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def find_head_idx ( source , target ): # # \u83b7\u53d6\u5b9e\u4f53\u7684\u5f00\u59cb\u7d22\u5f15\u4f4d\u7f6e target_len = len ( target ) for i in range ( len ( source )): if source [ i : i + target_len ] == target : return i return - 1 \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570create_label, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def create_label ( inner_triples , inner_input_ids , seq_len ): # \u83b7\u53d6\u6bcf\u4e2a\u6837\u672c\u7684\uff1a\u4e3b\u5b9e\u4f53\u957f\u5ea6\u3001\u4e3b\u5b9e\u4f53\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u5f20\u91cf\u8868\u793a\u3001\u5ba2\u5b9e\u4f53\u4ee5\u53ca\u5bf9\u5e94\u5173\u7cfb\u5b9e\u73b0\u5f20\u91cf\u8868\u793a inner_sub_heads , inner_sub_tails = torch . zeros ( seq_len ), torch . zeros ( seq_len ) inner_obj_heads = torch . zeros (( seq_len , conf . num_rel )) inner_obj_tails = torch . zeros (( seq_len , conf . num_rel )) inner_sub_head2tail = torch . zeros ( seq_len ) # \u968f\u673a\u62bd\u53d6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4ece\u5f00\u5934\u4e00\u4e2a\u8bcd\u5230\u672b\u5c3e\u8bcd\u7684\u7d22\u5f15 # \u56e0\u4e3a\u6570\u636e\u9884\u5904\u7406\u4ee3\u7801\u8fd8\u5f85\u4f18\u5316,\u4f1a\u6709\u4e0d\u5b58\u5728\u5173\u7cfb\u4e09\u5143\u7ec4\u7684\u60c5\u51b5\uff0c # \u521d\u59cb\u5316\u4e00\u4e2a\u4e3b\u8bcd\u7684\u957f\u5ea6\u4e3a1\uff0c\u5373\u6ca1\u6709\u4e3b\u8bcd\u9ed8\u8ba4\u4e3b\u8bcd\u957f\u5ea6\u4e3a1\uff0c # \u9632\u6b62\u96f6\u9664\u62a5\u9519,\u521d\u59cb\u5316\u4efb\u4f55\u975e\u96f6\u6570\u5b57\u90fd\u53ef\u4ee5\uff0c\u6ca1\u6709\u4e3b\u8bcd\u5206\u5b50\u662f\u5168\u96f6\u77e9\u9635 inner_sub_len = torch . tensor ([ 1 ], dtype = torch . float ) # \u4e3b\u8bcd\u5230\u8c13\u8bcd\u7684\u6620\u5c04 s2ro_map = defaultdict ( list ) # print(s2ro_map) for inner_triple in inner_triples : # print(inner_triple) inner_triple = ( conf . tokenizer ( inner_triple [ 'subject' ], add_special_tokens = False )[ 'input_ids' ], conf . rel_vocab . to_index ( inner_triple [ 'predicate' ]), conf . tokenizer ( inner_triple [ 'object' ], add_special_tokens = False )[ 'input_ids' ] ) sub_head_idx = find_head_idx ( inner_input_ids , inner_triple [ 0 ]) obj_head_idx = find_head_idx ( inner_input_ids , inner_triple [ 2 ]) if sub_head_idx != - 1 and obj_head_idx != - 1 : sub = ( sub_head_idx , sub_head_idx + len ( inner_triple [ 0 ]) - 1 ) # s2ro_map\u4fdd\u5b58\u4e3b\u8bed\u5230\u8c13\u8bed\u7684\u6620\u5c04 s2ro_map [ sub ] . append ( ( obj_head_idx , obj_head_idx + len ( inner_triple [ 2 ]) - 1 , inner_triple [ 1 ])) # {(3,5):[(7,8,0)]} 0\u662f\u5173\u7cfb if s2ro_map : for s in s2ro_map : inner_sub_heads [ s [ 0 ]] = 1 inner_sub_tails [ s [ 1 ]] = 1 sub_head_idx , sub_tail_idx = choice ( list ( s2ro_map . keys ())) inner_sub_head2tail [ sub_head_idx : sub_tail_idx + 1 ] = 1 inner_sub_len = torch . tensor ([ sub_tail_idx + 1 - sub_head_idx ], dtype = torch . float ) for ro in s2ro_map . get (( sub_head_idx , sub_tail_idx ), []): inner_obj_heads [ ro [ 0 ]][ ro [ 2 ]] = 1 inner_obj_tails [ ro [ 1 ]][ ro [ 2 ]] = 1 return inner_sub_len , inner_sub_head2tail , inner_sub_heads , inner_sub_tails , inner_obj_heads , inner_obj_tails \u6784\u5efa\u7b2c\u4e09\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570collate_fn, \u4f4d\u4e8eprocess.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def collate_fn ( data ): text_list = [ value [ 0 ] for value in data ] triple = [ value [ 1 ] for value in data ] # \u6309\u7167batch\u4e2d\u6700\u957f\u53e5\u5b50\u8865\u9f50 text = conf . tokenizer . batch_encode_plus ( text_list , padding = True ) batch_size = len ( text [ 'input_ids' ]) seq_len = len ( text [ 'input_ids' ][ 0 ]) sub_heads = [] sub_tails = [] obj_heads = [] obj_tails = [] sub_len = [] sub_head2tail = [] # \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u6837\u672c\uff0c\u5c06\u5b9e\u4f53\u4fe1\u606f\u8fdb\u884c\u5f20\u91cf\u7684\u8f6c\u5316 for batch_index in range ( batch_size ): inner_input_ids = text [ 'input_ids' ][ batch_index ] # \u5355\u4e2a\u53e5\u5b50\u53d8\u6210\u7d22\u5f15\u540e inner_triples = triple [ batch_index ] # \u83b7\u53d6\u6bcf\u4e2a\u6837\u672c\u7684\uff1a\u4e3b\u5b9e\u4f53\u957f\u5ea6\u3001\u4e3b\u5b9e\u4f53\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u5f20\u91cf\u8868\u793a\u3001\u5ba2\u5b9e\u4f53\u4ee5\u53ca\u5bf9\u5e94\u5173\u7cfb\u5b9e\u73b0\u5f20\u91cf\u8868\u793a results = create_label ( inner_triples , inner_input_ids , seq_len ) sub_len . append ( results [ 0 ]) sub_head2tail . append ( results [ 1 ]) sub_heads . append ( results [ 2 ]) sub_tails . append ( results [ 3 ]) obj_heads . append ( results [ 4 ]) obj_tails . append ( results [ 5 ]) input_ids = torch . tensor ( text [ 'input_ids' ]) . to ( conf . device ) mask = torch . tensor ( text [ 'attention_mask' ]) . to ( conf . device ) # \u501f\u52a9torch.stack()\u51fd\u6570\u6cbf\u4e00\u4e2a\u65b0\u7ef4\u5ea6\u5bf9\u8f93\u5165batch_size\u5f20\u91cf\u5e8f\u5217\u8fdb\u884c\u8fde\u63a5\uff0c\u5e8f\u5217\u4e2d\u6240\u6709\u5f20\u91cf\u5e94\u4e3a\u76f8\u540c\u5f62\u72b6\uff1bstack \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u65b0\u589e\u4e00\u4e2a\u7ef4\u5ea6, sub_heads = torch . stack ( sub_heads ) . to ( conf . device ) sub_tails = torch . stack ( sub_tails ) . to ( conf . device ) sub_len = torch . stack ( sub_len ) . to ( conf . device ) sub_head2tail = torch . stack ( sub_head2tail ) . to ( conf . device ) obj_heads = torch . stack ( obj_heads ) . to ( conf . device ) obj_tails = torch . stack ( obj_tails ) . to ( conf . device ) inputs = { 'input_ids' : input_ids , 'mask' : mask , 'sub_head2tail' : sub_head2tail , 'sub_len' : sub_len } labels = { 'sub_heads' : sub_heads , 'sub_tails' : sub_tails , 'obj_heads' : obj_heads , 'obj_tails' : obj_tails } return inputs , labels","title":"\u7b2c\u4e09\u6b65\uff1a \u7f16\u5199\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#datasetdataloader","text":"\u4ee3\u7801\u8def\u5f84\u4e3a: /home/ec2-user/Casrel_RE/relationship_extract/codes/utils/data_loader.py \u9996\u5148\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305 # coding:utf-8 from torch.utils.data import DataLoader , Dataset from utils.process import * conf = Config () \u6784\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u7c7bMyDataset, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u7c7b. # \u81ea\u5b9a\u4e49Dataset class MyDataset ( Dataset ): def __init__ ( self , data_path ): super ( MyDataset , self ) . __init__ () self . dataset = [ json . loads ( line ) for line in open ( data_path , encoding = 'utf8' )] def __len__ ( self ): return len ( self . dataset ) def __getitem__ ( self , index ): content = self . dataset [ index ] text = content [ 'text' ] spo_list = content [ 'spo_list' ] return text , spo_list \u6784\u5efa\u7b2c\u4e8c\u4e2a\u6570\u636e\u5904\u7406\u76f8\u5173\u51fd\u6570get_data, \u4f4d\u4e8edata_loader.py\u4e2d\u7684\u72ec\u7acb\u51fd\u6570. def get_data (): # \u5b9e\u4f8b\u5316\u8bad\u7ec3\u6570\u636e\u96c6Dataset\u5bf9\u8c61 train_data = MyDataset ( conf . train_data_path ) # \u5b9e\u4f8b\u5316\u9a8c\u8bc1\u6570\u636e\u96c6Dataset\u5bf9\u8c61 dev_data = MyDataset ( conf . dev_data_path ) # \u5b9e\u4f8b\u5316\u6d4b\u8bd5\u6570\u636e\u96c6Dataset\u5bf9\u8c61 test_data = MyDataset ( conf . test_data_path ) # \u5b9e\u4f8b\u5316\u8bad\u7ec3\u6570\u636e\u96c6Dataloader\u5bf9\u8c61 train_dataloader = DataLoader ( dataset = train_data , batch_size = conf . batch_size , shuffle = True , collate_fn = collate_fn , drop_last = True ) # \u5b9e\u4f8b\u5316\u9a8c\u8bc1\u6570\u636e\u96c6Dataloader\u5bf9\u8c61 dev_dataloader = DataLoader ( dataset = dev_data , batch_size = conf . batch_size , shuffle = True , collate_fn = collate_fn , drop_last = True ) # \u5b9e\u4f8b\u5316\u6d4b\u8bd5\u6570\u636e\u96c6Dataloader\u5bf9\u8c61 test_dataloader = DataLoader ( dataset = test_data , batch_size = conf . batch_size , shuffle = True , collate_fn = collate_fn , drop_last = True ) return train_dataloader , dev_dataloader , test_dataloader","title":"\u7b2c\u56db\u6b65\uff1a\u6784\u5efaDataSet\u7c7b\u4ee5\u53caDataloader\u51fd\u6570"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/03-Casrel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%BB%8B%E7%BB%8D.html#_7","text":"\u672c\u5c0f\u8282\u8bb2\u89e3\u4e86\u5173\u7cfb\u62bd\u53d6\u6570\u636e\u7ed3\u6784\u5f62\u5f0f, \u5e76\u5b9e\u73b0\u4e86\u82e5\u5e72\u6570\u636e\u5904\u7406\u51fd\u6570, \u8fd9\u4e9b\u51fd\u6570\u4f1a\u5728\u672a\u6765\u7684\u9879\u76ee\u4ee3\u7801\u4e2d\u5e94\u7528.","title":"\u5c0f\u7ed3\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html","text":"Casrel\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\u642d\u5efa \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1\u57fa\u4e8eCasrel\u6a21\u578b\u642d\u5efa\u7684\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u6a21\u578b\u7684\u8bad\u7ec3,\u9a8c\u8bc1,\u6d4b\u8bd5\u7684\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0. Casrel\u6a21\u578b\u642d\u5efa \u00b6 \u672c\u9879\u76ee\u4e2dCasrel\u6a21\u578b\u642d\u5efa\u7684\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u5de5\u5177\u7c7b\u51fd\u6570,\u8bad\u7ec3\u51fd\u6570,\u9a8c\u8bc1\u51fd\u6570,\u6d4b\u8bd5\u51fd\u6570 \u7b2c\u4e09\u6b65: \u7f16\u5199\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0. \u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u00b6 \u6587\u672c\u7f16\u7801\u91c7\u7528\u7684\u662fBERT\u9884\u8bad\u7ec3\u6a21\u578b \u7b2c\u4e00\u6b65: \u5b9e\u73b0CasRel\u7c7b\u4ee3\u7801. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/model/CasrelModel.py # coding:utf-8 import torch import torch.nn as nn from transformers import BertModel , AdamW from codes.config import * class CasRel ( nn . Module ): def __init__ ( self , conf ): super () . __init__ () self . bert = BertModel . from_pretrained ( conf . bert_path ) # \u5b9a\u4e49\u7b2c\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u4e3b\u5b9e\u4f53\u7684\u5934\u90e8\u4f4d\u7f6e self . sub_heads_linear = nn . Linear ( conf . bert_dim , 1 ) # \u5b9a\u4e49\u7b2c\u4e8c\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u4e3b\u5b9e\u4f53\u7684\u5c3e\u90e8\u4f4d\u7f6e self . sub_tails_linear = nn . Linear ( conf . bert_dim , 1 ) # \u5b9a\u4e49\u7b2c\u4e09\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u5ba2\u5b9e\u4f53\u7684\u5934\u90e8\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b self . obj_heads_linear = nn . Linear ( conf . bert_dim , conf . num_rel ) # \u5b9a\u4e49\u7b2c\u56db\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u5ba2\u5b9e\u4f53\u7684\u5c3e\u90e8\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b self . obj_tails_linear = nn . Linear ( conf . bert_dim , conf . num_rel ) def get_encoded_text ( self , token_ids , mask ): encoded_text = self . bert ( token_ids , attention_mask = mask )[ 0 ] return encoded_text def get_subs ( self , encoded_text ): pre_sub_heads = torch . sigmoid ( self . sub_heads_linear ( encoded_text )) pre_sub_tails = torch . sigmoid ( self . sub_tails_linear ( encoded_text )) return pre_sub_heads , pre_sub_tails def get_objs_for_specific_sub ( self , sub_head2tail , sub_len , encoded_text ): ''' \u5c06subject\u5b9e\u4f53\u4fe1\u606f\u878d\u5408\u539f\u59cb\u53e5\u5b50\u4e2d\uff1a\u5c06\u4e3b\u5b9e\u4f53\u5b57\u5411\u91cf\u5b9e\u73b0\u5e73\u5747\uff0c\u7136\u540e\u52a0\u5728\u5f53\u524d\u53e5\u5b50\u7684\u6bcf\u4e00\u4e2a\u5b57\u5411\u91cf\u4e0a\uff0c\u8fdb\u884c\u8ba1\u7b97 :param sub_head2tail:shape-->\u301016\uff0c1, 200\u3011 :param sub_len:shape--->[16,1] :param encoded_text:.shape[16\uff0c200\uff0c768] :return: pred_obj_heads-->shape [] pre_obj_tails-->shape [] ''' sub = torch . matmul ( sub_head2tail , encoded_text ) # \u5c06\u4e3b\u5b9e\u4f53\u7279\u5f81\u548c\u7f16\u7801\u540e\u7684\u6587\u672c\u8fdb\u884c\u878d\u5408 sub_len = sub_len . unsqueeze ( 1 ) # \u4e3b\u5b9e\u4f53\u957f\u5ea6\uff08\u6269\u7ef4\uff09 sub = sub / sub_len # \u5e73\u5747\u4e3b\u5b9e\u4f53\u4fe1\u606f encoded_text = encoded_text + sub #\u5c06\u5904\u7406\u540e\u7684\u5b9e\u4f53\u7279\u5f81\u548c\u539f\u59cb\u7f16\u7801\u540e\u7684\u6587\u672c\u8fdb\u884c\u878d\u5408 pred_obj_heads = torch . sigmoid ( self . obj_heads_linear ( encoded_text )) pre_obj_tails = torch . sigmoid ( self . obj_tails_linear ( encoded_text )) return pred_obj_heads , pre_obj_tails def forward ( self , input_ids , mask , sub_head2tail , sub_len ): ''' :param input_ids: shape-->[16, 200] :param mask: shape-->[16, 200] :param sub_head2tail: shape-->[16, 200] :param sub_len: shape-->[16, 1] :return: ''' # todo: encode_text.shape--->[16,200,768] encoded_text = self . get_encoded_text ( input_ids , mask ) pred_sub_heads , pre_sub_tails = self . get_subs ( encoded_text ) sub_head2tail = sub_head2tail . unsqueeze ( 1 ) pred_obj_heads , pre_obj_tails = self . get_objs_for_specific_sub ( sub_head2tail , sub_len , encoded_text ) result_dict = { 'pred_sub_heads' : pred_sub_heads , 'pred_sub_tails' : pre_sub_tails , 'pred_obj_heads' : pred_obj_heads , 'pred_obj_tails' : pre_obj_tails , 'mask' : mask } return result_dict def compute_loss ( self , pred_sub_heads , pred_sub_tails , pred_obj_heads , pred_obj_tails , mask , sub_heads , sub_tails , obj_heads , obj_tails ): ''' \u8ba1\u7b97\u635f\u5931 :param pred_sub_heads:[16, 200, 1] :param pred_sub_tails:[16, 200, 1] :param pred_obj_heads:[16, 200, 18] :param pred_obj_tails:[16, 200, 18] :param mask: shape-->[16, 200] :param sub_heads: shape-->[16, 200] :param sub_tails: shape-->[16, 200] :param obj_heads: shape-->[16, 200, 18] :param obj_tails: shape-->[16, 200, 18] :return: ''' # todo:sub_heads.shape,sub_tails.shape, mask-->[16, 200] # todo:obj_heads.shape,obj_tails.shape-->[16, 200, 18] rel_count = obj_heads . shape [ - 1 ] rel_mask = mask . unsqueeze ( - 1 ) . repeat ( 1 , 1 , rel_count ) loss_1 = self . loss ( pred_sub_heads , sub_heads , mask ) loss_2 = self . loss ( pred_sub_tails , sub_tails , mask ) loss_3 = self . loss ( pred_obj_heads , obj_heads , rel_mask ) loss_4 = self . loss ( pred_obj_tails , obj_tails , rel_mask ) return loss_1 + loss_2 + loss_3 + loss_4 def loss ( self , pred , gold , mask ): pred = pred . squeeze ( - 1 ) los = nn . BCELoss ( reduction = 'none' )( pred , gold ) if los . shape != mask . shape : mask = mask . unsqueeze ( - 1 ) los = torch . sum ( los * mask ) / torch . sum ( mask ) return los def load_model ( conf ): device = conf . device model = CasRel ( conf ) model . to ( device ) # \u56e0\u4e3a\u672c\u6b21\u6a21\u578b\u501f\u52a9BERT\u505afine_tuning\uff0c \u56e0\u6b64\u9700\u8981\u5bf9\u6a21\u578b\u4e2d\u7684\u5927\u90e8\u5206\u53c2\u6570\u8fdb\u884cL2\u6b63\u5219\u5904\u7406\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u5305\u62ec\u6743\u91cdw\u548c\u504f\u7f6eb # prepare optimzier # named_parameters()\u83b7\u53d6\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u548c\u53c2\u6570\u540d\u5b57 param_optimizer = list ( model . named_parameters ()) print ( f 'param_optimizer---> { param_optimizer } ' ) no_decay = [ \"bias\" , \"LayerNorm.bias\" , \"LayerNorm.weight\" ] # no_decay\u4e2d\u5b58\u653e\u4e0d\u8fdb\u884c\u6743\u91cd\u8870\u51cf\u7684\u53c2\u6570{\u56e0\u4e3abert\u5b98\u65b9\u4ee3\u7801\u5bf9\u8fd9\u4e09\u9879\u514d\u4e8e\u6b63\u5219\u5316} # any()\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u7ed9\u5b9a\u7684\u53ef\u8fed\u4ee3\u53c2\u6570iterable\u662f\u5426\u5168\u90e8\u4e3aFalse\uff0c\u5219\u8fd4\u56deFalse\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u4e3aTrue\uff0c\u5219\u8fd4\u56deTrue # \u5224\u65adparam_optimizer\u4e2d\u6240\u6709\u7684\u53c2\u6570\u3002\u5982\u679c\u4e0d\u5728no_decay\u4e2d\uff0c\u5219\u8fdb\u884c\u6743\u91cd\u8870\u51cf;\u5982\u679c\u5728no_decay\u4e2d\uff0c\u5219\u4e0d\u8fdb\u884c\u6743\u91cd\u8870\u51cf optimizer_grouped_parameters = [ { \"params\" : [ p for n , p in param_optimizer if not any ( nd in n for nd in no_decay )], \"weight_decay\" : 0.01 }, { \"params\" : [ p for n , p in param_optimizer if any ( nd in n for nd in no_decay )], \"weight_decay\" : 0.0 }] optimizer = AdamW ( optimizer_grouped_parameters , lr = conf . learning_rate , eps = 10e-8 ) # \u662f\u5426\u9700\u8981\u5bf9bert\u8fdb\u884cwarm_up\u3002\u8fd9\u91cc\u9ed8\u8ba4\u4e0d\u8fdb\u884c sheduler = None return model , optimizer , sheduler , device if __name__ == '__main__' : conf = Config () # casrel = CasRel(conf) # print(f'\u6a21\u578b\u7684\u67b6\u6784--->{casrel}') load_model ( conf ) \u7b2c\u4e8c\u6b65: \u7f16\u5199\u5de5\u5177\u7c7b\u51fd\u6570,\u8bad\u7ec3\u51fd\u6570,\u9a8c\u8bc1\u51fd\u6570,\u6d4b\u8bd5\u51fd\u6570 \u00b6 \u6ce8\u610f\uff1a\u5de5\u5177\u7c7b\u51fd\u6570\u9700\u8981\u5728\u8bad\u7ec3\u3001\u6d4b\u8bd5\u3001\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u4f7f\u7528\uff1b\u8bad\u7ec3\u51fd\u6570, \u9a8c\u8bc1\u51fd\u6570\u4e24\u8005\u5728\u4e00\u4e2a\u811a\u672c\uff0c\u6d4b\u8bd5\u51fd\u6570\u5355\u72ec\u4e00\u4e2a\u811a\u672c. \u6b64\u5916, \u56e0\u4e3a\u9a8c\u8bc1\u51fd\u6570\u548c\u6d4b\u8bd5\u51fd\u6570\u4e00\u81f4\uff0c\u56e0\u6b64\u53ea\u5199\u4e00\u4e2a\u5373\u53ef. \u7b2c\u4e00\u6b65: \u5b9e\u73b0utils\u51fd\u6570. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/utils/process.py # coding:utf-8 from codes.config import * import torch from random import choice from collections import defaultdict conf = Config () def extract_sub ( pred_sub_heads , pred_sub_tails ): ''' :param pred_sub_heads: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4e3b\u5b9e\u4f53\u5f00\u5934\u4f4d\u7f6e :param pred_sub_tails: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4e3b\u5b9e\u4f53\u5c3e\u90e8\u4f4d\u7f6e :return: subs\u5217\u8868\u91cc\u9762\u5bf9\u5e94\u7684\u6240\u6709\u5b9e\u4f53\u3010head, tail\u3011 ''' subs = [] # \u7edf\u8ba1\u9884\u6d4b\u51fa\u6240\u6709\u503c\u4e3a1\u7684\u5143\u7d20\u7d22\u5f15\u4f4d\u7f6e heads = torch . arange ( 0 , len ( pred_sub_heads ), device = conf . device )[ pred_sub_heads == 1 ] tails = torch . arange ( 0 , len ( pred_sub_tails ), device = conf . device )[ pred_sub_tails == 1 ] for head , tail in zip ( heads , tails ): if tail >= head : subs . append (( head . item (), tail . item ())) return subs def extract_obj_and_rel ( obj_heads , obj_tails ): ''' :param obj_heads: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4ece\u5b9e\u4f53\u5f00\u5934\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b :param obj_tails: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4ece\u5b9e\u4f53\u5c3e\u90e8\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b :return: obj_and_rels\uff1a\u5143\u7d20\u5f62\u72b6\uff1a(rel_index, start_index, end_index) ''' obj_heads = obj_heads . T obj_tails = obj_tails . T rel_count = obj_heads . shape [ 0 ] obj_and_rels = [] for rel_index in range ( rel_count ): obj_head = obj_heads [ rel_index ] obj_tail = obj_tails [ rel_index ] objs = extract_sub ( obj_head , obj_tail ) if objs : for obj in objs : start_index , end_index = obj obj_and_rels . append (( rel_index , start_index , end_index )) return obj_and_rels def convert_score_to_zero_one ( tensor ): ''' \u4ee50.5\u4e3a\u9608\u503c\uff0c\u5927\u4e8e0.5\u7684\u8bbe\u7f6e\u4e3a1\uff0c\u5c0f\u4e8e0.5\u7684\u8bbe\u7f6e\u4e3a0 ''' tensor [ tensor >= 0.5 ] = 1 tensor [ tensor < 0.5 ] = 0 return tensor \u5bfc\u5165\u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570,\u9a8c\u8bc1\u51fd\u6570,\u6d4b\u8bd5\u51fd\u6570\u7684\u5de5\u5177\u5305 # coding:utf-8 from model.CasrelModel import * from utils.process import * from utils.data_loader import * from config import * import pandas as pd from tqdm import tqdm \u7b2c\u4e8c\u6b65: \u7f16\u5199\u8bad\u7ec3\u4e0e\u9a8c\u8bc1\u51fd\u6570. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/train.py \u6ce8\u610f: \u9a8c\u8bc1\u51fd\u6570\u7684\u76ee\u7684\u662f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u5b58F1\u503c\u6700\u597d\u7684\u6a21\u578b\u72b6\u6001\uff0c\u56e0\u6b64\u5d4c\u5957\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d def model2train ( model , train_iter , dev_iter , optimizer , conf ): epochs = conf . epochs best_triple_f1 = 0 for epoch in range ( epochs ): train_epoch ( model , train_iter , dev_iter , optimizer , best_triple_f1 , epoch ) torch . save ( model . state_dict (), '../save_model/last_model.pth' ) def train_epoch ( model , train_iter , dev_iter , optimizer , best_triple_f1 , epoch ): for step , ( inputs , labels ) in enumerate ( tqdm ( train_iter )): model . train () logist = model ( ** inputs ) loss = model . compute_loss ( ** logist , ** labels ) model . zero_grad () loss . backward () optimizer . step () if step % 1500 == 0 : torch . save ( model . state_dict (), '../save_model/epoch_ %s _model_ %s .pth' % ( epoch , step )) results = model2dev ( model , dev_iter ) print ( results [ - 1 ]) if results [ - 2 ] > best_triple_f1 : best_triple_f1 = results [ - 2 ] torch . save ( model . state_dict (), '../save_model/best_f1.pth' ) print ( 'epoch: {} ,' 'step: {} ,' 'sub_precision: {:.4f} , ' 'sub_recall: {:.4f} , ' 'sub_f1: {:.4f} , ' 'triple_precision: {:.4f} , ' 'triple_recall: {:.4f} , ' 'triple_f1: {:.4f} ,' 'train loss: {:.4f} ' . format ( epoch , step , results [ 0 ], results [ 1 ], results [ 2 ], results [ 3 ], results [ 4 ], results [ 5 ], loss . item ())) return best_triple_f1 \u7b2c\u4e09\u6b65: \u7f16\u5199\u9a8c\u8bc1\u51fd\u6570. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/train.py def model2dev ( model , dev_iter ): ''' \u9a8c\u8bc1\u6a21\u578b\u6548\u679c :param model: :param dev_iter: :return: ''' model . eval () # \u5b9a\u4e49\u4e00\u4e2adf\uff0c\u6765\u5c55\u793a\u6a21\u578b\u7684\u6307\u6807\u3002 df = pd . DataFrame ( columns = [ 'TP' , 'PRED' , \"REAL\" , 'p' , 'r' , 'f1' ], index = [ 'sub' , 'triple' ]) df . fillna ( 0 , inplace = True ) for inputs , labels in tqdm ( dev_iter ): logist = model ( ** inputs ) pred_sub_heads = convert_score_to_zero_one ( logist [ 'pred_sub_heads' ]) pred_sub_tails = convert_score_to_zero_one ( logist [ 'pred_sub_tails' ]) sub_heads = convert_score_to_zero_one ( labels [ 'sub_heads' ]) sub_tails = convert_score_to_zero_one ( labels [ 'sub_tails' ]) batch_size = inputs [ 'input_ids' ] . shape [ 0 ] obj_heads = convert_score_to_zero_one ( labels [ 'obj_heads' ]) obj_tails = convert_score_to_zero_one ( labels [ 'obj_tails' ]) pred_obj_heads = convert_score_to_zero_one ( logist [ 'pred_obj_heads' ]) pred_obj_tails = convert_score_to_zero_one ( logist [ 'pred_obj_tails' ]) for batch_index in range ( batch_size ): pred_subs = extract_sub ( pred_sub_heads [ batch_index ] . squeeze (), pred_sub_tails [ batch_index ] . squeeze ()) true_subs = extract_sub ( sub_heads [ batch_index ] . squeeze (), sub_tails [ batch_index ] . squeeze ()) pred_ojbs = extract_obj_and_rel ( pred_obj_heads [ batch_index ], pred_obj_tails [ batch_index ]) true_objs = extract_obj_and_rel ( obj_heads [ batch_index ], obj_tails [ batch_index ]) df [ 'PRED' ][ 'sub' ] += len ( pred_subs ) df [ 'REAL' ][ 'sub' ] += len ( true_subs ) for true_sub in true_subs : if true_sub in pred_subs : df [ 'TP' ][ 'sub' ] += 1 df [ 'PRED' ][ 'triple' ] += len ( pred_ojbs ) df [ 'REAL' ][ 'triple' ] += len ( true_objs ) for true_obj in true_objs : if true_obj in pred_ojbs : df [ 'TP' ][ 'triple' ] += 1 df . loc [ 'sub' , 'p' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'PRED' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'r' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'REAL' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'f1' ] = 2 * df [ 'p' ][ 'sub' ] * df [ 'r' ][ 'sub' ] / ( df [ 'p' ][ 'sub' ] + df [ 'r' ][ 'sub' ] + 1e-9 ) sub_precision = df [ 'TP' ][ 'sub' ] / ( df [ 'PRED' ][ 'sub' ] + 1e-9 ) sub_recall = df [ 'TP' ][ 'sub' ] / ( df [ 'REAL' ][ 'sub' ] + 1e-9 ) sub_f1 = 2 * sub_precision * sub_recall / ( sub_precision + sub_recall + 1e-9 ) df . loc [ 'triple' , 'p' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'PRED' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'r' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'REAL' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'f1' ] = 2 * df [ 'p' ][ 'triple' ] * df [ 'r' ][ 'triple' ] / ( df [ 'p' ][ 'triple' ] + df [ 'r' ][ 'triple' ] + 1e-9 ) triple_precision = df [ 'TP' ][ 'triple' ] / ( df [ 'PRED' ][ 'triple' ] + 1e-9 ) triple_recall = df [ 'TP' ][ 'triple' ] / ( df [ 'REAL' ][ 'triple' ] + 1e-9 ) triple_f1 = 2 * triple_precision * triple_recall / ( triple_precision + triple_recall + 1e-9 ) return sub_precision , sub_recall , sub_f1 , triple_precision , triple_recall , triple_f1 , df \u7b2c\u56db\u6b65: \u7f16\u5199\u6d4b\u8bd5\u51fd\u6570. \u4ee3\u7801\u8def\u5f84\uff1a/home/ec2-user/Casrel_RE/relationship_extract/codes/test.py def model2test ( model , test_iter ): ''' \u6d4b\u8bd5\u6a21\u578b\u6548\u679c :param model: :param test_iter: :return: ''' model . eval () # \u5b9a\u4e49\u4e00\u4e2adf\uff0c\u6765\u5c55\u793a\u6a21\u578b\u7684\u6307\u6807\u3002 df = pd . DataFrame ( columns = [ 'TP' , 'PRED' , \"REAL\" , 'p' , 'r' , 'f1' ], index = [ 'sub' , 'triple' ]) df . fillna ( 0 , inplace = True ) with torch . no_grad (): for inputs , labels in tqdm ( test_iter ): logist = model ( ** inputs ) pred_sub_heads = convert_score_to_zero_one ( logist [ 'pred_sub_heads' ]) pred_sub_tails = convert_score_to_zero_one ( logist [ 'pred_sub_tails' ]) sub_heads = convert_score_to_zero_one ( labels [ 'sub_heads' ]) sub_tails = convert_score_to_zero_one ( labels [ 'sub_tails' ]) batch_size = inputs [ 'input_ids' ] . shape [ 0 ] obj_heads = convert_score_to_zero_one ( labels [ 'obj_heads' ]) obj_tails = convert_score_to_zero_one ( labels [ 'obj_tails' ]) pred_obj_heads = convert_score_to_zero_one ( logist [ 'pred_obj_heads' ]) pred_obj_tails = convert_score_to_zero_one ( logist [ 'pred_obj_tails' ]) for batch_index in range ( batch_size ): pred_subs = extract_sub ( pred_sub_heads [ batch_index ] . squeeze (), pred_sub_tails [ batch_index ] . squeeze ()) true_subs = extract_sub ( sub_heads [ batch_index ] . squeeze (), sub_tails [ batch_index ] . squeeze ()) pred_ojbs = extract_obj_and_rel ( pred_obj_heads [ batch_index ], pred_obj_tails [ batch_index ]) true_objs = extract_obj_and_rel ( obj_heads [ batch_index ], obj_tails [ batch_index ]) df [ 'PRED' ][ 'sub' ] += len ( pred_subs ) df [ 'REAL' ][ 'sub' ] += len ( true_subs ) for true_sub in true_subs : if true_sub in pred_subs : df [ 'TP' ][ 'sub' ] += 1 df [ 'PRED' ][ 'triple' ] += len ( pred_ojbs ) df [ 'REAL' ][ 'triple' ] += len ( true_objs ) for true_obj in true_objs : if true_obj in pred_ojbs : df [ 'TP' ][ 'triple' ] += 1 df . loc [ 'sub' , 'p' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'PRED' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'r' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'REAL' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'f1' ] = 2 * df [ 'p' ][ 'sub' ] * df [ 'r' ][ 'sub' ] / ( df [ 'p' ][ 'sub' ] + df [ 'r' ][ 'sub' ] + 1e-9 ) df . loc [ 'triple' , 'p' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'PRED' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'r' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'REAL' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'f1' ] = 2 * df [ 'p' ][ 'triple' ] * df [ 'r' ][ 'triple' ] / ( df [ 'p' ][ 'triple' ] + df [ 'r' ][ 'triple' ] + 1e-9 ) return df \u7b2c\u4e09\u6b65: \u7f16\u5199\u6a21\u578b\u9884\u6d4b\u51fd\u6570 \u00b6 \u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u968f\u673a\u62bd\u53d6\u6587\u672c\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6 \u4ee3\u7801\u4f4d\u7f6e: /home/ec2-user/Casrel_RE/relationship_extract/codes/predict.py # coding:utf-8 from model.CasrelModel import * from utils.process import * conf = Config () def load_model ( model_path ): # \u5b9e\u4f8b\u5316\u6a21\u578b mymodel = CasRel ( conf ) . to ( conf . device ) mymodel . load_state_dict ( torch . load ( model_path )) return mymodel def get_inputs ( sample , model ): text = conf . tokenizer ( sample ) input_ids = torch . tensor ([ text [ 'input_ids' ]]) . to ( conf . device ) mask = torch . tensor ([ text [ 'attention_mask' ]]) . to ( conf . device ) # \u521d\u59cb\u5316\u503c seq_len = len ( text [ 'input_ids' ]) inner_sub_head2tail = torch . zeros ( seq_len ) inner_sub_len = torch . tensor ([ 1 ], dtype = torch . float ) # \u83b7\u53d6\u6a21\u578b\u9884\u6d4b\u7684\u5b9e\u4f53\u4f4d\u7f6e\u4fe1\u606f model . eval () with torch . no_grad (): # \u5148\u5229\u7528\u6a21\u578b\u83b7\u53d6\u4e3b\u5b9e\u4f53\u7684\u4f4d\u7f6e\u4fe1\u606f encoded_text = model . get_encoded_text ( input_ids , mask ) sub_heads , sub_tails = model . get_subs ( encoded_text ) pred_sub_heads = convert_score_to_zero_one ( sub_heads ) pred_sub_tails = convert_score_to_zero_one ( sub_tails ) # \u83b7\u53d6\u4e3b\u5b9e\u4f53\u7d22\u5f15\u4f4d\u7f6e\u4fe1\u606f pred_subs = extract_sub ( pred_sub_heads . squeeze (), pred_sub_tails . squeeze ()) # \u6a21\u578b\u53ef\u80fd\u6ca1\u8bc6\u522b\u51fa\u5b9e\u4f53 if len ( pred_subs ) != 0 : sub_head_idx = pred_subs [ 0 ][ 0 ] sub_tail_idx = pred_subs [ 0 ][ 1 ] # \u83b7\u53d6\u4e3b\u4f53\u957f\u5ea6\u4ee5\u53ca\u5bf9\u4e3b\u4f53\u4f4d\u7f6e\u5168\u90e8\u8d4b\u503c\u4e3a1 inner_sub_head2tail [ sub_head_idx : sub_tail_idx + 1 ] = 1 inner_sub_len = torch . tensor ([ sub_tail_idx + 1 - sub_head_idx ], dtype = torch . float ) sub_len = inner_sub_len . unsqueeze ( 0 ) . to ( conf . device ) sub_head2tail = inner_sub_head2tail . unsqueeze ( 0 ) . to ( conf . device ) inputs = { 'input_ids' : input_ids , 'mask' : mask , 'sub_head2tail' : sub_head2tail , 'sub_len' : sub_len } return inputs , model def model2predict ( sample , model ): with open ( conf . rel_dict_path , 'r' , encoding = 'utf-8' ) as fr : rel_id2word = json . load ( fr ) inputs , model = get_inputs ( sample , model ) logist = model ( ** inputs ) print ( f \"logist['pred_sub_heads']--> { logist [ 'pred_sub_heads' ] . shape } \" ) print ( f \"logist['pred_obj_heads']--> { logist [ 'pred_obj_heads' ] . shape } \" ) pred_sub_heads = convert_score_to_zero_one ( logist [ 'pred_sub_heads' ]) pred_sub_tails = convert_score_to_zero_one ( logist [ 'pred_sub_tails' ]) pred_obj_heads = convert_score_to_zero_one ( logist [ 'pred_obj_heads' ]) pred_obj_tails = convert_score_to_zero_one ( logist [ 'pred_obj_tails' ]) new_dict = {} spo_list = [] ids = inputs [ 'input_ids' ][ 0 ] text_list = conf . tokenizer . convert_ids_to_tokens ( ids ) sentence = '' . join ( text_list [ 1 : - 1 ]) pred_subs = extract_sub ( pred_sub_heads [ 0 ] . squeeze (), pred_sub_tails [ 0 ] . squeeze ()) pred_objs = extract_obj_and_rel ( pred_obj_heads [ 0 ], pred_obj_tails [ 0 ]) if len ( pred_subs ) == 0 or len ( pred_objs ) == 0 : print ( '\u6ca1\u6709\u8bc6\u522b\u51fa\u7ed3\u679c' ) return {} if len ( pred_objs ) > len ( pred_subs ): pred_subs = pred_subs * len ( pred_objs ) for sub , rel_obj in zip ( pred_subs , pred_objs ): sub_spo = {} sub_head , sub_tail = sub sub = '' . join ( text_list [ sub_head : sub_tail + 1 ]) if '[PAD]' in sub : continue sub_spo [ 'subject' ] = sub relation = rel_id2word [ str ( rel_obj [ 0 ])] obj_head , obj_tail = rel_obj [ 1 ], rel_obj [ 2 ] obj = '' . join ( text_list [ obj_head : obj_tail + 1 ]) if '[PAD]' in obj : continue sub_spo [ 'predicate' ] = relation sub_spo [ 'object' ] = obj spo_list . append ( sub_spo ) new_dict [ 'text' ] = sentence new_dict [ 'spo_list' ] = spo_list return new_dict if __name__ == '__main__' : sample = \"\u300a\u4eba\u95f4\u300b\u662f\u738b\u83f2\u6f14\u5531\u6b4c\u66f2\" model_path = '../save_model/last_model.pth' mymodel = load_model ( model_path ) model2predict ( sample , mymodel ) \u8c03\u7528: cd /home/Desktop/relationship_extract/codes/ # \u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 python train.py \u8f93\u51fa\u7ed3\u679c: \u7ed3\u8bba: Casrel\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u8868\u73b0\u662fF1: 72.7% \u5c0f\u8282\u603b\u7ed3 \u00b6 \u672c\u5c0f\u8282\u5b9e\u73b0\u4e86\u57fa\u4e8eCasrel\u6a21\u578b\u7684\u6784\u5efa, \u5e76\u5b8c\u6210\u4e86\u8bad\u7ec3\u548c\u6d4b\u8bd5\u8bc4\u4f30.","title":"4.4 Casrel\u6a21\u578b\u642d\u5efa\u4e0e\u8bad\u7ec3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#casrel","text":"","title":"Casrel\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\u642d\u5efa"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_1","text":"\u638c\u63e1\u57fa\u4e8eCasrel\u6a21\u578b\u642d\u5efa\u7684\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u6a21\u578b\u7684\u8bad\u7ec3,\u9a8c\u8bc1,\u6d4b\u8bd5\u7684\u4ee3\u7801\u5b9e\u73b0. \u638c\u63e1\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0.","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#casrel_1","text":"\u672c\u9879\u76ee\u4e2dCasrel\u6a21\u578b\u642d\u5efa\u7684\u6b65\u9aa4\u5982\u4e0b: \u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u5de5\u5177\u7c7b\u51fd\u6570,\u8bad\u7ec3\u51fd\u6570,\u9a8c\u8bc1\u51fd\u6570,\u6d4b\u8bd5\u51fd\u6570 \u7b2c\u4e09\u6b65: \u7f16\u5199\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u7684\u5b9e\u73b0.","title":"Casrel\u6a21\u578b\u642d\u5efa"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_2","text":"\u6587\u672c\u7f16\u7801\u91c7\u7528\u7684\u662fBERT\u9884\u8bad\u7ec3\u6a21\u578b \u7b2c\u4e00\u6b65: \u5b9e\u73b0CasRel\u7c7b\u4ee3\u7801. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/model/CasrelModel.py # coding:utf-8 import torch import torch.nn as nn from transformers import BertModel , AdamW from codes.config import * class CasRel ( nn . Module ): def __init__ ( self , conf ): super () . __init__ () self . bert = BertModel . from_pretrained ( conf . bert_path ) # \u5b9a\u4e49\u7b2c\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u4e3b\u5b9e\u4f53\u7684\u5934\u90e8\u4f4d\u7f6e self . sub_heads_linear = nn . Linear ( conf . bert_dim , 1 ) # \u5b9a\u4e49\u7b2c\u4e8c\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u4e3b\u5b9e\u4f53\u7684\u5c3e\u90e8\u4f4d\u7f6e self . sub_tails_linear = nn . Linear ( conf . bert_dim , 1 ) # \u5b9a\u4e49\u7b2c\u4e09\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u5ba2\u5b9e\u4f53\u7684\u5934\u90e8\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b self . obj_heads_linear = nn . Linear ( conf . bert_dim , conf . num_rel ) # \u5b9a\u4e49\u7b2c\u56db\u4e2a\u7ebf\u6027\u5c42\uff0c\u6765\u5224\u65ad\u5ba2\u5b9e\u4f53\u7684\u5c3e\u90e8\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b self . obj_tails_linear = nn . Linear ( conf . bert_dim , conf . num_rel ) def get_encoded_text ( self , token_ids , mask ): encoded_text = self . bert ( token_ids , attention_mask = mask )[ 0 ] return encoded_text def get_subs ( self , encoded_text ): pre_sub_heads = torch . sigmoid ( self . sub_heads_linear ( encoded_text )) pre_sub_tails = torch . sigmoid ( self . sub_tails_linear ( encoded_text )) return pre_sub_heads , pre_sub_tails def get_objs_for_specific_sub ( self , sub_head2tail , sub_len , encoded_text ): ''' \u5c06subject\u5b9e\u4f53\u4fe1\u606f\u878d\u5408\u539f\u59cb\u53e5\u5b50\u4e2d\uff1a\u5c06\u4e3b\u5b9e\u4f53\u5b57\u5411\u91cf\u5b9e\u73b0\u5e73\u5747\uff0c\u7136\u540e\u52a0\u5728\u5f53\u524d\u53e5\u5b50\u7684\u6bcf\u4e00\u4e2a\u5b57\u5411\u91cf\u4e0a\uff0c\u8fdb\u884c\u8ba1\u7b97 :param sub_head2tail:shape-->\u301016\uff0c1, 200\u3011 :param sub_len:shape--->[16,1] :param encoded_text:.shape[16\uff0c200\uff0c768] :return: pred_obj_heads-->shape [] pre_obj_tails-->shape [] ''' sub = torch . matmul ( sub_head2tail , encoded_text ) # \u5c06\u4e3b\u5b9e\u4f53\u7279\u5f81\u548c\u7f16\u7801\u540e\u7684\u6587\u672c\u8fdb\u884c\u878d\u5408 sub_len = sub_len . unsqueeze ( 1 ) # \u4e3b\u5b9e\u4f53\u957f\u5ea6\uff08\u6269\u7ef4\uff09 sub = sub / sub_len # \u5e73\u5747\u4e3b\u5b9e\u4f53\u4fe1\u606f encoded_text = encoded_text + sub #\u5c06\u5904\u7406\u540e\u7684\u5b9e\u4f53\u7279\u5f81\u548c\u539f\u59cb\u7f16\u7801\u540e\u7684\u6587\u672c\u8fdb\u884c\u878d\u5408 pred_obj_heads = torch . sigmoid ( self . obj_heads_linear ( encoded_text )) pre_obj_tails = torch . sigmoid ( self . obj_tails_linear ( encoded_text )) return pred_obj_heads , pre_obj_tails def forward ( self , input_ids , mask , sub_head2tail , sub_len ): ''' :param input_ids: shape-->[16, 200] :param mask: shape-->[16, 200] :param sub_head2tail: shape-->[16, 200] :param sub_len: shape-->[16, 1] :return: ''' # todo: encode_text.shape--->[16,200,768] encoded_text = self . get_encoded_text ( input_ids , mask ) pred_sub_heads , pre_sub_tails = self . get_subs ( encoded_text ) sub_head2tail = sub_head2tail . unsqueeze ( 1 ) pred_obj_heads , pre_obj_tails = self . get_objs_for_specific_sub ( sub_head2tail , sub_len , encoded_text ) result_dict = { 'pred_sub_heads' : pred_sub_heads , 'pred_sub_tails' : pre_sub_tails , 'pred_obj_heads' : pred_obj_heads , 'pred_obj_tails' : pre_obj_tails , 'mask' : mask } return result_dict def compute_loss ( self , pred_sub_heads , pred_sub_tails , pred_obj_heads , pred_obj_tails , mask , sub_heads , sub_tails , obj_heads , obj_tails ): ''' \u8ba1\u7b97\u635f\u5931 :param pred_sub_heads:[16, 200, 1] :param pred_sub_tails:[16, 200, 1] :param pred_obj_heads:[16, 200, 18] :param pred_obj_tails:[16, 200, 18] :param mask: shape-->[16, 200] :param sub_heads: shape-->[16, 200] :param sub_tails: shape-->[16, 200] :param obj_heads: shape-->[16, 200, 18] :param obj_tails: shape-->[16, 200, 18] :return: ''' # todo:sub_heads.shape,sub_tails.shape, mask-->[16, 200] # todo:obj_heads.shape,obj_tails.shape-->[16, 200, 18] rel_count = obj_heads . shape [ - 1 ] rel_mask = mask . unsqueeze ( - 1 ) . repeat ( 1 , 1 , rel_count ) loss_1 = self . loss ( pred_sub_heads , sub_heads , mask ) loss_2 = self . loss ( pred_sub_tails , sub_tails , mask ) loss_3 = self . loss ( pred_obj_heads , obj_heads , rel_mask ) loss_4 = self . loss ( pred_obj_tails , obj_tails , rel_mask ) return loss_1 + loss_2 + loss_3 + loss_4 def loss ( self , pred , gold , mask ): pred = pred . squeeze ( - 1 ) los = nn . BCELoss ( reduction = 'none' )( pred , gold ) if los . shape != mask . shape : mask = mask . unsqueeze ( - 1 ) los = torch . sum ( los * mask ) / torch . sum ( mask ) return los def load_model ( conf ): device = conf . device model = CasRel ( conf ) model . to ( device ) # \u56e0\u4e3a\u672c\u6b21\u6a21\u578b\u501f\u52a9BERT\u505afine_tuning\uff0c \u56e0\u6b64\u9700\u8981\u5bf9\u6a21\u578b\u4e2d\u7684\u5927\u90e8\u5206\u53c2\u6570\u8fdb\u884cL2\u6b63\u5219\u5904\u7406\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u5305\u62ec\u6743\u91cdw\u548c\u504f\u7f6eb # prepare optimzier # named_parameters()\u83b7\u53d6\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u548c\u53c2\u6570\u540d\u5b57 param_optimizer = list ( model . named_parameters ()) print ( f 'param_optimizer---> { param_optimizer } ' ) no_decay = [ \"bias\" , \"LayerNorm.bias\" , \"LayerNorm.weight\" ] # no_decay\u4e2d\u5b58\u653e\u4e0d\u8fdb\u884c\u6743\u91cd\u8870\u51cf\u7684\u53c2\u6570{\u56e0\u4e3abert\u5b98\u65b9\u4ee3\u7801\u5bf9\u8fd9\u4e09\u9879\u514d\u4e8e\u6b63\u5219\u5316} # any()\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u7ed9\u5b9a\u7684\u53ef\u8fed\u4ee3\u53c2\u6570iterable\u662f\u5426\u5168\u90e8\u4e3aFalse\uff0c\u5219\u8fd4\u56deFalse\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u4e3aTrue\uff0c\u5219\u8fd4\u56deTrue # \u5224\u65adparam_optimizer\u4e2d\u6240\u6709\u7684\u53c2\u6570\u3002\u5982\u679c\u4e0d\u5728no_decay\u4e2d\uff0c\u5219\u8fdb\u884c\u6743\u91cd\u8870\u51cf;\u5982\u679c\u5728no_decay\u4e2d\uff0c\u5219\u4e0d\u8fdb\u884c\u6743\u91cd\u8870\u51cf optimizer_grouped_parameters = [ { \"params\" : [ p for n , p in param_optimizer if not any ( nd in n for nd in no_decay )], \"weight_decay\" : 0.01 }, { \"params\" : [ p for n , p in param_optimizer if any ( nd in n for nd in no_decay )], \"weight_decay\" : 0.0 }] optimizer = AdamW ( optimizer_grouped_parameters , lr = conf . learning_rate , eps = 10e-8 ) # \u662f\u5426\u9700\u8981\u5bf9bert\u8fdb\u884cwarm_up\u3002\u8fd9\u91cc\u9ed8\u8ba4\u4e0d\u8fdb\u884c sheduler = None return model , optimizer , sheduler , device if __name__ == '__main__' : conf = Config () # casrel = CasRel(conf) # print(f'\u6a21\u578b\u7684\u67b6\u6784--->{casrel}') load_model ( conf )","title":"\u7b2c\u4e00\u6b65: \u7f16\u5199\u6a21\u578b\u7c7b\u7684\u4ee3\u7801"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_3","text":"\u6ce8\u610f\uff1a\u5de5\u5177\u7c7b\u51fd\u6570\u9700\u8981\u5728\u8bad\u7ec3\u3001\u6d4b\u8bd5\u3001\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u4f7f\u7528\uff1b\u8bad\u7ec3\u51fd\u6570, \u9a8c\u8bc1\u51fd\u6570\u4e24\u8005\u5728\u4e00\u4e2a\u811a\u672c\uff0c\u6d4b\u8bd5\u51fd\u6570\u5355\u72ec\u4e00\u4e2a\u811a\u672c. \u6b64\u5916, \u56e0\u4e3a\u9a8c\u8bc1\u51fd\u6570\u548c\u6d4b\u8bd5\u51fd\u6570\u4e00\u81f4\uff0c\u56e0\u6b64\u53ea\u5199\u4e00\u4e2a\u5373\u53ef. \u7b2c\u4e00\u6b65: \u5b9e\u73b0utils\u51fd\u6570. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/utils/process.py # coding:utf-8 from codes.config import * import torch from random import choice from collections import defaultdict conf = Config () def extract_sub ( pred_sub_heads , pred_sub_tails ): ''' :param pred_sub_heads: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4e3b\u5b9e\u4f53\u5f00\u5934\u4f4d\u7f6e :param pred_sub_tails: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4e3b\u5b9e\u4f53\u5c3e\u90e8\u4f4d\u7f6e :return: subs\u5217\u8868\u91cc\u9762\u5bf9\u5e94\u7684\u6240\u6709\u5b9e\u4f53\u3010head, tail\u3011 ''' subs = [] # \u7edf\u8ba1\u9884\u6d4b\u51fa\u6240\u6709\u503c\u4e3a1\u7684\u5143\u7d20\u7d22\u5f15\u4f4d\u7f6e heads = torch . arange ( 0 , len ( pred_sub_heads ), device = conf . device )[ pred_sub_heads == 1 ] tails = torch . arange ( 0 , len ( pred_sub_tails ), device = conf . device )[ pred_sub_tails == 1 ] for head , tail in zip ( heads , tails ): if tail >= head : subs . append (( head . item (), tail . item ())) return subs def extract_obj_and_rel ( obj_heads , obj_tails ): ''' :param obj_heads: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4ece\u5b9e\u4f53\u5f00\u5934\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b :param obj_tails: \u6a21\u578b\u9884\u6d4b\u51fa\u7684\u4ece\u5b9e\u4f53\u5c3e\u90e8\u4f4d\u7f6e\u4ee5\u53ca\u5173\u7cfb\u7c7b\u578b :return: obj_and_rels\uff1a\u5143\u7d20\u5f62\u72b6\uff1a(rel_index, start_index, end_index) ''' obj_heads = obj_heads . T obj_tails = obj_tails . T rel_count = obj_heads . shape [ 0 ] obj_and_rels = [] for rel_index in range ( rel_count ): obj_head = obj_heads [ rel_index ] obj_tail = obj_tails [ rel_index ] objs = extract_sub ( obj_head , obj_tail ) if objs : for obj in objs : start_index , end_index = obj obj_and_rels . append (( rel_index , start_index , end_index )) return obj_and_rels def convert_score_to_zero_one ( tensor ): ''' \u4ee50.5\u4e3a\u9608\u503c\uff0c\u5927\u4e8e0.5\u7684\u8bbe\u7f6e\u4e3a1\uff0c\u5c0f\u4e8e0.5\u7684\u8bbe\u7f6e\u4e3a0 ''' tensor [ tensor >= 0.5 ] = 1 tensor [ tensor < 0.5 ] = 0 return tensor \u5bfc\u5165\u5b9e\u73b0\u8bad\u7ec3\u51fd\u6570,\u9a8c\u8bc1\u51fd\u6570,\u6d4b\u8bd5\u51fd\u6570\u7684\u5de5\u5177\u5305 # coding:utf-8 from model.CasrelModel import * from utils.process import * from utils.data_loader import * from config import * import pandas as pd from tqdm import tqdm \u7b2c\u4e8c\u6b65: \u7f16\u5199\u8bad\u7ec3\u4e0e\u9a8c\u8bc1\u51fd\u6570. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/train.py \u6ce8\u610f: \u9a8c\u8bc1\u51fd\u6570\u7684\u76ee\u7684\u662f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u5b58F1\u503c\u6700\u597d\u7684\u6a21\u578b\u72b6\u6001\uff0c\u56e0\u6b64\u5d4c\u5957\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d def model2train ( model , train_iter , dev_iter , optimizer , conf ): epochs = conf . epochs best_triple_f1 = 0 for epoch in range ( epochs ): train_epoch ( model , train_iter , dev_iter , optimizer , best_triple_f1 , epoch ) torch . save ( model . state_dict (), '../save_model/last_model.pth' ) def train_epoch ( model , train_iter , dev_iter , optimizer , best_triple_f1 , epoch ): for step , ( inputs , labels ) in enumerate ( tqdm ( train_iter )): model . train () logist = model ( ** inputs ) loss = model . compute_loss ( ** logist , ** labels ) model . zero_grad () loss . backward () optimizer . step () if step % 1500 == 0 : torch . save ( model . state_dict (), '../save_model/epoch_ %s _model_ %s .pth' % ( epoch , step )) results = model2dev ( model , dev_iter ) print ( results [ - 1 ]) if results [ - 2 ] > best_triple_f1 : best_triple_f1 = results [ - 2 ] torch . save ( model . state_dict (), '../save_model/best_f1.pth' ) print ( 'epoch: {} ,' 'step: {} ,' 'sub_precision: {:.4f} , ' 'sub_recall: {:.4f} , ' 'sub_f1: {:.4f} , ' 'triple_precision: {:.4f} , ' 'triple_recall: {:.4f} , ' 'triple_f1: {:.4f} ,' 'train loss: {:.4f} ' . format ( epoch , step , results [ 0 ], results [ 1 ], results [ 2 ], results [ 3 ], results [ 4 ], results [ 5 ], loss . item ())) return best_triple_f1 \u7b2c\u4e09\u6b65: \u7f16\u5199\u9a8c\u8bc1\u51fd\u6570. \u4ee3\u7801\u8def\u5f84: /home/ec2-user/Casrel_RE/relationship_extract/codes/train.py def model2dev ( model , dev_iter ): ''' \u9a8c\u8bc1\u6a21\u578b\u6548\u679c :param model: :param dev_iter: :return: ''' model . eval () # \u5b9a\u4e49\u4e00\u4e2adf\uff0c\u6765\u5c55\u793a\u6a21\u578b\u7684\u6307\u6807\u3002 df = pd . DataFrame ( columns = [ 'TP' , 'PRED' , \"REAL\" , 'p' , 'r' , 'f1' ], index = [ 'sub' , 'triple' ]) df . fillna ( 0 , inplace = True ) for inputs , labels in tqdm ( dev_iter ): logist = model ( ** inputs ) pred_sub_heads = convert_score_to_zero_one ( logist [ 'pred_sub_heads' ]) pred_sub_tails = convert_score_to_zero_one ( logist [ 'pred_sub_tails' ]) sub_heads = convert_score_to_zero_one ( labels [ 'sub_heads' ]) sub_tails = convert_score_to_zero_one ( labels [ 'sub_tails' ]) batch_size = inputs [ 'input_ids' ] . shape [ 0 ] obj_heads = convert_score_to_zero_one ( labels [ 'obj_heads' ]) obj_tails = convert_score_to_zero_one ( labels [ 'obj_tails' ]) pred_obj_heads = convert_score_to_zero_one ( logist [ 'pred_obj_heads' ]) pred_obj_tails = convert_score_to_zero_one ( logist [ 'pred_obj_tails' ]) for batch_index in range ( batch_size ): pred_subs = extract_sub ( pred_sub_heads [ batch_index ] . squeeze (), pred_sub_tails [ batch_index ] . squeeze ()) true_subs = extract_sub ( sub_heads [ batch_index ] . squeeze (), sub_tails [ batch_index ] . squeeze ()) pred_ojbs = extract_obj_and_rel ( pred_obj_heads [ batch_index ], pred_obj_tails [ batch_index ]) true_objs = extract_obj_and_rel ( obj_heads [ batch_index ], obj_tails [ batch_index ]) df [ 'PRED' ][ 'sub' ] += len ( pred_subs ) df [ 'REAL' ][ 'sub' ] += len ( true_subs ) for true_sub in true_subs : if true_sub in pred_subs : df [ 'TP' ][ 'sub' ] += 1 df [ 'PRED' ][ 'triple' ] += len ( pred_ojbs ) df [ 'REAL' ][ 'triple' ] += len ( true_objs ) for true_obj in true_objs : if true_obj in pred_ojbs : df [ 'TP' ][ 'triple' ] += 1 df . loc [ 'sub' , 'p' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'PRED' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'r' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'REAL' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'f1' ] = 2 * df [ 'p' ][ 'sub' ] * df [ 'r' ][ 'sub' ] / ( df [ 'p' ][ 'sub' ] + df [ 'r' ][ 'sub' ] + 1e-9 ) sub_precision = df [ 'TP' ][ 'sub' ] / ( df [ 'PRED' ][ 'sub' ] + 1e-9 ) sub_recall = df [ 'TP' ][ 'sub' ] / ( df [ 'REAL' ][ 'sub' ] + 1e-9 ) sub_f1 = 2 * sub_precision * sub_recall / ( sub_precision + sub_recall + 1e-9 ) df . loc [ 'triple' , 'p' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'PRED' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'r' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'REAL' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'f1' ] = 2 * df [ 'p' ][ 'triple' ] * df [ 'r' ][ 'triple' ] / ( df [ 'p' ][ 'triple' ] + df [ 'r' ][ 'triple' ] + 1e-9 ) triple_precision = df [ 'TP' ][ 'triple' ] / ( df [ 'PRED' ][ 'triple' ] + 1e-9 ) triple_recall = df [ 'TP' ][ 'triple' ] / ( df [ 'REAL' ][ 'triple' ] + 1e-9 ) triple_f1 = 2 * triple_precision * triple_recall / ( triple_precision + triple_recall + 1e-9 ) return sub_precision , sub_recall , sub_f1 , triple_precision , triple_recall , triple_f1 , df \u7b2c\u56db\u6b65: \u7f16\u5199\u6d4b\u8bd5\u51fd\u6570. \u4ee3\u7801\u8def\u5f84\uff1a/home/ec2-user/Casrel_RE/relationship_extract/codes/test.py def model2test ( model , test_iter ): ''' \u6d4b\u8bd5\u6a21\u578b\u6548\u679c :param model: :param test_iter: :return: ''' model . eval () # \u5b9a\u4e49\u4e00\u4e2adf\uff0c\u6765\u5c55\u793a\u6a21\u578b\u7684\u6307\u6807\u3002 df = pd . DataFrame ( columns = [ 'TP' , 'PRED' , \"REAL\" , 'p' , 'r' , 'f1' ], index = [ 'sub' , 'triple' ]) df . fillna ( 0 , inplace = True ) with torch . no_grad (): for inputs , labels in tqdm ( test_iter ): logist = model ( ** inputs ) pred_sub_heads = convert_score_to_zero_one ( logist [ 'pred_sub_heads' ]) pred_sub_tails = convert_score_to_zero_one ( logist [ 'pred_sub_tails' ]) sub_heads = convert_score_to_zero_one ( labels [ 'sub_heads' ]) sub_tails = convert_score_to_zero_one ( labels [ 'sub_tails' ]) batch_size = inputs [ 'input_ids' ] . shape [ 0 ] obj_heads = convert_score_to_zero_one ( labels [ 'obj_heads' ]) obj_tails = convert_score_to_zero_one ( labels [ 'obj_tails' ]) pred_obj_heads = convert_score_to_zero_one ( logist [ 'pred_obj_heads' ]) pred_obj_tails = convert_score_to_zero_one ( logist [ 'pred_obj_tails' ]) for batch_index in range ( batch_size ): pred_subs = extract_sub ( pred_sub_heads [ batch_index ] . squeeze (), pred_sub_tails [ batch_index ] . squeeze ()) true_subs = extract_sub ( sub_heads [ batch_index ] . squeeze (), sub_tails [ batch_index ] . squeeze ()) pred_ojbs = extract_obj_and_rel ( pred_obj_heads [ batch_index ], pred_obj_tails [ batch_index ]) true_objs = extract_obj_and_rel ( obj_heads [ batch_index ], obj_tails [ batch_index ]) df [ 'PRED' ][ 'sub' ] += len ( pred_subs ) df [ 'REAL' ][ 'sub' ] += len ( true_subs ) for true_sub in true_subs : if true_sub in pred_subs : df [ 'TP' ][ 'sub' ] += 1 df [ 'PRED' ][ 'triple' ] += len ( pred_ojbs ) df [ 'REAL' ][ 'triple' ] += len ( true_objs ) for true_obj in true_objs : if true_obj in pred_ojbs : df [ 'TP' ][ 'triple' ] += 1 df . loc [ 'sub' , 'p' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'PRED' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'r' ] = df [ 'TP' ][ 'sub' ] / ( df [ 'REAL' ][ 'sub' ] + 1e-9 ) df . loc [ 'sub' , 'f1' ] = 2 * df [ 'p' ][ 'sub' ] * df [ 'r' ][ 'sub' ] / ( df [ 'p' ][ 'sub' ] + df [ 'r' ][ 'sub' ] + 1e-9 ) df . loc [ 'triple' , 'p' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'PRED' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'r' ] = df [ 'TP' ][ 'triple' ] / ( df [ 'REAL' ][ 'triple' ] + 1e-9 ) df . loc [ 'triple' , 'f1' ] = 2 * df [ 'p' ][ 'triple' ] * df [ 'r' ][ 'triple' ] / ( df [ 'p' ][ 'triple' ] + df [ 'r' ][ 'triple' ] + 1e-9 ) return df","title":"\u7b2c\u4e8c\u6b65: \u7f16\u5199\u5de5\u5177\u7c7b\u51fd\u6570,\u8bad\u7ec3\u51fd\u6570,\u9a8c\u8bc1\u51fd\u6570,\u6d4b\u8bd5\u51fd\u6570"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_4","text":"\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u968f\u673a\u62bd\u53d6\u6587\u672c\u8fdb\u884c\u5173\u7cfb\u62bd\u53d6 \u4ee3\u7801\u4f4d\u7f6e: /home/ec2-user/Casrel_RE/relationship_extract/codes/predict.py # coding:utf-8 from model.CasrelModel import * from utils.process import * conf = Config () def load_model ( model_path ): # \u5b9e\u4f8b\u5316\u6a21\u578b mymodel = CasRel ( conf ) . to ( conf . device ) mymodel . load_state_dict ( torch . load ( model_path )) return mymodel def get_inputs ( sample , model ): text = conf . tokenizer ( sample ) input_ids = torch . tensor ([ text [ 'input_ids' ]]) . to ( conf . device ) mask = torch . tensor ([ text [ 'attention_mask' ]]) . to ( conf . device ) # \u521d\u59cb\u5316\u503c seq_len = len ( text [ 'input_ids' ]) inner_sub_head2tail = torch . zeros ( seq_len ) inner_sub_len = torch . tensor ([ 1 ], dtype = torch . float ) # \u83b7\u53d6\u6a21\u578b\u9884\u6d4b\u7684\u5b9e\u4f53\u4f4d\u7f6e\u4fe1\u606f model . eval () with torch . no_grad (): # \u5148\u5229\u7528\u6a21\u578b\u83b7\u53d6\u4e3b\u5b9e\u4f53\u7684\u4f4d\u7f6e\u4fe1\u606f encoded_text = model . get_encoded_text ( input_ids , mask ) sub_heads , sub_tails = model . get_subs ( encoded_text ) pred_sub_heads = convert_score_to_zero_one ( sub_heads ) pred_sub_tails = convert_score_to_zero_one ( sub_tails ) # \u83b7\u53d6\u4e3b\u5b9e\u4f53\u7d22\u5f15\u4f4d\u7f6e\u4fe1\u606f pred_subs = extract_sub ( pred_sub_heads . squeeze (), pred_sub_tails . squeeze ()) # \u6a21\u578b\u53ef\u80fd\u6ca1\u8bc6\u522b\u51fa\u5b9e\u4f53 if len ( pred_subs ) != 0 : sub_head_idx = pred_subs [ 0 ][ 0 ] sub_tail_idx = pred_subs [ 0 ][ 1 ] # \u83b7\u53d6\u4e3b\u4f53\u957f\u5ea6\u4ee5\u53ca\u5bf9\u4e3b\u4f53\u4f4d\u7f6e\u5168\u90e8\u8d4b\u503c\u4e3a1 inner_sub_head2tail [ sub_head_idx : sub_tail_idx + 1 ] = 1 inner_sub_len = torch . tensor ([ sub_tail_idx + 1 - sub_head_idx ], dtype = torch . float ) sub_len = inner_sub_len . unsqueeze ( 0 ) . to ( conf . device ) sub_head2tail = inner_sub_head2tail . unsqueeze ( 0 ) . to ( conf . device ) inputs = { 'input_ids' : input_ids , 'mask' : mask , 'sub_head2tail' : sub_head2tail , 'sub_len' : sub_len } return inputs , model def model2predict ( sample , model ): with open ( conf . rel_dict_path , 'r' , encoding = 'utf-8' ) as fr : rel_id2word = json . load ( fr ) inputs , model = get_inputs ( sample , model ) logist = model ( ** inputs ) print ( f \"logist['pred_sub_heads']--> { logist [ 'pred_sub_heads' ] . shape } \" ) print ( f \"logist['pred_obj_heads']--> { logist [ 'pred_obj_heads' ] . shape } \" ) pred_sub_heads = convert_score_to_zero_one ( logist [ 'pred_sub_heads' ]) pred_sub_tails = convert_score_to_zero_one ( logist [ 'pred_sub_tails' ]) pred_obj_heads = convert_score_to_zero_one ( logist [ 'pred_obj_heads' ]) pred_obj_tails = convert_score_to_zero_one ( logist [ 'pred_obj_tails' ]) new_dict = {} spo_list = [] ids = inputs [ 'input_ids' ][ 0 ] text_list = conf . tokenizer . convert_ids_to_tokens ( ids ) sentence = '' . join ( text_list [ 1 : - 1 ]) pred_subs = extract_sub ( pred_sub_heads [ 0 ] . squeeze (), pred_sub_tails [ 0 ] . squeeze ()) pred_objs = extract_obj_and_rel ( pred_obj_heads [ 0 ], pred_obj_tails [ 0 ]) if len ( pred_subs ) == 0 or len ( pred_objs ) == 0 : print ( '\u6ca1\u6709\u8bc6\u522b\u51fa\u7ed3\u679c' ) return {} if len ( pred_objs ) > len ( pred_subs ): pred_subs = pred_subs * len ( pred_objs ) for sub , rel_obj in zip ( pred_subs , pred_objs ): sub_spo = {} sub_head , sub_tail = sub sub = '' . join ( text_list [ sub_head : sub_tail + 1 ]) if '[PAD]' in sub : continue sub_spo [ 'subject' ] = sub relation = rel_id2word [ str ( rel_obj [ 0 ])] obj_head , obj_tail = rel_obj [ 1 ], rel_obj [ 2 ] obj = '' . join ( text_list [ obj_head : obj_tail + 1 ]) if '[PAD]' in obj : continue sub_spo [ 'predicate' ] = relation sub_spo [ 'object' ] = obj spo_list . append ( sub_spo ) new_dict [ 'text' ] = sentence new_dict [ 'spo_list' ] = spo_list return new_dict if __name__ == '__main__' : sample = \"\u300a\u4eba\u95f4\u300b\u662f\u738b\u83f2\u6f14\u5531\u6b4c\u66f2\" model_path = '../save_model/last_model.pth' mymodel = load_model ( model_path ) model2predict ( sample , mymodel ) \u8c03\u7528: cd /home/Desktop/relationship_extract/codes/ # \u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 python train.py \u8f93\u51fa\u7ed3\u679c: \u7ed3\u8bba: Casrel\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u8868\u73b0\u662fF1: 72.7%","title":"\u7b2c\u4e09\u6b65: \u7f16\u5199\u6a21\u578b\u9884\u6d4b\u51fd\u6570"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8Ejoint%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB%E6%8A%BD%E5%8F%96/04-Casrel%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E8%AE%AD%E7%BB%83.html#_5","text":"\u672c\u5c0f\u8282\u5b9e\u73b0\u4e86\u57fa\u4e8eCasrel\u6a21\u578b\u7684\u6784\u5efa, \u5e76\u5b8c\u6210\u4e86\u8bad\u7ec3\u548c\u6d4b\u8bd5\u8bc4\u4f30.","title":"\u5c0f\u8282\u603b\u7ed3"}]}